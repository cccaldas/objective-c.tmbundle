actionProperty	AB	Cl	NSObject;ABActions	dm	NSString *
titleForPerson:identifier:	AB	Cl	NSObject;ABActions	dm	NSString *	ABPerson *	NSString *
performActionForPerson:identifier:	AB	Cl	NSObject;ABActions	dm	void	ABPerson *	NSString *
shouldEnableActionForPerson:identifier:	AB	Cl	NSObject;ABActions	dm	BOOL	ABPerson *	NSString *
sharedAddressBook	AB	Cl	ABAddressBook	cm	ABAddressBook *
recordsMatchingSearchElement:	AB	Cl	ABAddressBook	im	NSArray *	ABSearchElement *
save	AB	Cl	ABAddressBook	im	BOOL
hasUnsavedChanges	AB	Cl	ABAddressBook	im	BOOL
me	AB	Cl	ABAddressBook	im	ABPerson *
setMe:	AB	Cl	ABAddressBook	im	void	ABPerson *
recordForUniqueId:	AB	Cl	ABAddressBook	im	ABRecord *	NSString *
addRecord:	AB	Cl	ABAddressBook	im	BOOL	ABRecord *
removeRecord:	AB	Cl	ABAddressBook	im	BOOL	ABRecord *
people	AB	Cl	ABAddressBook	im	NSArray *
groups	AB	Cl	ABAddressBook	im	NSArray *
recordClassFromUniqueId:	AB	Cl	ABAddressBook	im	NSString *	NSString *
formattedAddressFromDictionary:	AB	Cl	ABAddressBook	im	NSAttributedString *	NSDictionary *
defaultCountryCode	AB	Cl	ABAddressBook	im	NSString *
defaultNameOrdering	AB	Cl	ABAddressBook	im	int
members	AB	Cl	ABGroup	im	NSArray *
addMember:	AB	Cl	ABGroup	im	BOOL	ABPerson *
removeMember:	AB	Cl	ABGroup	im	BOOL	ABPerson *
subgroups	AB	Cl	ABGroup	im	NSArray *
addSubgroup:	AB	Cl	ABGroup	im	BOOL	ABGroup *
removeSubgroup:	AB	Cl	ABGroup	im	BOOL	ABGroup *
parentGroups	AB	Cl	ABGroup	im	NSArray *
setDistributionIdentifier:forProperty:person:	AB	Cl	ABGroup	im	BOOL	NSString *	NSString *	ABPerson *
distributionIdentifierForProperty:person:	AB	Cl	ABGroup	im	NSString *	NSString *	ABPerson *
addPropertiesAndTypes:	AB	Cl	ABGroup	cm	int	NSDictionary *
removeProperties:	AB	Cl	ABGroup	cm	int	NSArray *
properties	AB	Cl	ABGroup	cm	NSArray *
typeOfProperty:	AB	Cl	ABGroup	cm	ABPropertyType	NSString *
searchElementForProperty:label:key:value:comparison:	AB	Cl	ABGroup	cm	ABSearchElement *	NSString *	NSString *	NSString *	id	ABSearchComparison
consumeImageData:forTag:	AB	Pr	ABImageClient;ABImageLoading	im	void	NSData *	int
setImageData:	AB	Cl	ABPerson;ABImageLoading	im	BOOL	NSData *
imageData	AB	Cl	ABPerson;ABImageLoading	im	NSData *
beginLoadingImageDataForClient:	AB	Cl	ABPerson;ABImageLoading	im	int	id<ABImageClient>
cancelLoadingImageDataForTag:	AB	Cl	ABPerson;ABImageLoading	cm	void	int
count	AB	Cl	ABMultiValue	im	unsigned int
valueAtIndex:	AB	Cl	ABMultiValue	im	id	unsigned int
labelAtIndex:	AB	Cl	ABMultiValue	im	NSString *	unsigned int
identifierAtIndex:	AB	Cl	ABMultiValue	im	NSString *	unsigned int
indexForIdentifier:	AB	Cl	ABMultiValue	im	unsigned int	NSString *
primaryIdentifier	AB	Cl	ABMultiValue	im	NSString *
propertyType	AB	Cl	ABMultiValue	im	ABPropertyType
addValue:withLabel:	AB	Cl	ABMutableMultiValue;ABMultiValue	im	NSString *	id	NSString *
insertValue:withLabel:atIndex:	AB	Cl	ABMutableMultiValue;ABMultiValue	im	NSString *	id	NSString *	unsigned int
removeValueAndLabelAtIndex:	AB	Cl	ABMutableMultiValue;ABMultiValue	im	BOOL	unsigned int
replaceValueAtIndex:withValue:	AB	Cl	ABMutableMultiValue;ABMultiValue	im	BOOL	unsigned int	id
replaceLabelAtIndex:withLabel:	AB	Cl	ABMutableMultiValue;ABMultiValue	im	BOOL	unsigned int	NSString *
setPrimaryIdentifier:	AB	Cl	ABMutableMultiValue;ABMultiValue	im	BOOL	NSString *
setAccessoryView:	AB	Cl	ABPeoplePickerView	im	void	NSView *
accessoryView	AB	Cl	ABPeoplePickerView	im	NSView *
setValueSelectionBehavior:	AB	Cl	ABPeoplePickerView	im	void	ABPeoplePickerSelectionBehavior
valueSelectionBehavior	AB	Cl	ABPeoplePickerView	im	ABPeoplePickerSelectionBehavior
setAllowsGroupSelection:	AB	Cl	ABPeoplePickerView	im	void	BOOL
allowsGroupSelection	AB	Cl	ABPeoplePickerView	im	BOOL
setAllowsMultipleSelection:	AB	Cl	ABPeoplePickerView	im	void	BOOL
allowsMultipleSelection	AB	Cl	ABPeoplePickerView	im	BOOL
addProperty:	AB	Cl	ABPeoplePickerView	im	void	NSString *
removeProperty:	AB	Cl	ABPeoplePickerView	im	void	NSString *
properties	AB	Cl	ABPeoplePickerView	im	NSArray *
setColumnTitle:forProperty:	AB	Cl	ABPeoplePickerView	im	void	NSString *	NSString *
columnTitleForProperty:	AB	Cl	ABPeoplePickerView	im	NSString *	NSString *
setDisplayedProperty:	AB	Cl	ABPeoplePickerView	im	void	NSString *
displayedProperty	AB	Cl	ABPeoplePickerView	im	NSString *
setAutosaveName:	AB	Cl	ABPeoplePickerView	im	void	NSString *
autosaveName	AB	Cl	ABPeoplePickerView	im	NSString *
selectedGroups	AB	Cl	ABPeoplePickerView	im	NSArray *
selectedRecords	AB	Cl	ABPeoplePickerView	im	NSArray *
selectedIdentifiersForPerson:	AB	Cl	ABPeoplePickerView	im	NSArray *	ABPerson *
selectGroup:byExtendingSelection:	AB	Cl	ABPeoplePickerView	im	void	ABGroup *	BOOL
selectRecord:byExtendingSelection:	AB	Cl	ABPeoplePickerView	im	void	ABRecord *	BOOL
selectIdentifier:forPerson:byExtendingSelection:	AB	Cl	ABPeoplePickerView	im	void	NSString *	ABPerson *	BOOL
deselectGroup:	AB	Cl	ABPeoplePickerView	im	void	ABGroup *
deselectRecord:	AB	Cl	ABPeoplePickerView	im	void	ABRecord *
deselectIdentifier:forPerson:	AB	Cl	ABPeoplePickerView	im	void	NSString *	ABPerson *
deselectAll:	AB	Cl	ABPeoplePickerView	im	void	id
clearSearchField:	AB	Cl	ABPeoplePickerView	im	void	id
setTarget:	AB	Cl	ABPeoplePickerView	im	void	id
target	AB	Cl	ABPeoplePickerView	im	id
setGroupDoubleAction:	AB	Cl	ABPeoplePickerView	im	void	SEL
groupDoubleAction	AB	Cl	ABPeoplePickerView	im	SEL
setNameDoubleAction:	AB	Cl	ABPeoplePickerView	im	void	SEL
nameDoubleAction	AB	Cl	ABPeoplePickerView	im	SEL
selectedValues	AB	Cl	ABPeoplePickerView	im	NSArray *
editInAddressBook:	AB	Cl	ABPeoplePickerView	im	void	id
selectInAddressBook:	AB	Cl	ABPeoplePickerView	im	void	id
parentGroups	AB	Cl	ABPerson	im	NSArray *
addPropertiesAndTypes:	AB	Cl	ABPerson	cm	int	NSDictionary *
removeProperties:	AB	Cl	ABPerson	cm	int	NSArray *
properties	AB	Cl	ABPerson	cm	NSArray *
typeOfProperty:	AB	Cl	ABPerson	cm	ABPropertyType	NSString *
searchElementForProperty:label:key:value:comparison:	AB	Cl	ABPerson	cm	ABSearchElement *	NSString *	NSString *	NSString *	id	ABSearchComparison
initWithVCardRepresentation:	AB	Cl	ABPerson	im	id	NSData *
vCardRepresentation	AB	Cl	ABPerson	im	NSData *
valueForProperty:	AB	Cl	ABRecord	im	id	NSString *
setValue:forProperty:	AB	Cl	ABRecord	im	BOOL	id	NSString *
removeValueForProperty:	AB	Cl	ABRecord	im	BOOL	NSString *
isReadOnly	AB	Cl	ABRecord	im	BOOL
uniqueId	AB	Cl	ABRecord	im	NSString *
searchElementForConjunction:children:	AB	Cl	ABSearchElement	cm	ABSearchElement *	ABSearchConjunction	NSArray *
matchesRecord:	AB	Cl	ABSearchElement	im	BOOL	ABRecord *
accessibilityAttributeNames	AK	Cl	NSObject;NSAccessibility	im	NSArray *
accessibilityAttributeValue:	AK	Cl	NSObject;NSAccessibility	im	id	NSString *
accessibilityIsAttributeSettable:	AK	Cl	NSObject;NSAccessibility	im	BOOL	NSString *
accessibilitySetValue:forAttribute:	AK	Cl	NSObject;NSAccessibility	im	void	id	NSString *
accessibilityParameterizedAttributeNames	AK	Cl	NSObject;NSAccessibility	im	NSArray *
accessibilityAttributeValue:forParameter:	AK	Cl	NSObject;NSAccessibility	im	id	NSString *	id
accessibilityActionNames	AK	Cl	NSObject;NSAccessibility	im	NSArray *
accessibilityActionDescription:	AK	Cl	NSObject;NSAccessibility	im	NSString *	NSString *
accessibilityPerformAction:	AK	Cl	NSObject;NSAccessibility	im	void	NSString *
accessibilityIsIgnored	AK	Cl	NSObject;NSAccessibility	im	BOOL
accessibilityHitTest:	AK	Cl	NSObject;NSAccessibility	im	id	NSPoint
accessibilityFocusedUIElement	AK	Cl	NSObject;NSAccessibility	im	id
accessibilitySetOverrideValue:forAttribute:	AK	Cl	NSObject;NSAccessibility	im	BOOL	id	NSString *
controlView	AK	Cl	NSActionCell	im	NSView *
setControlView:	AK	Cl	NSActionCell	im	void	NSView *
setFont:	AK	Cl	NSActionCell	im	void	NSFont *
setAlignment:	AK	Cl	NSActionCell	im	void	NSTextAlignment
setBordered:	AK	Cl	NSActionCell	im	void	BOOL
setBezeled:	AK	Cl	NSActionCell	im	void	BOOL
setEnabled:	AK	Cl	NSActionCell	im	void	BOOL
setFloatingPointFormat:left:right:	AK	Cl	NSActionCell	im	void	BOOL	unsigned int	unsigned int
setImage:	AK	Cl	NSActionCell	im	void	NSImage *
target	AK	Cl	NSActionCell	im	id
setTarget:	AK	Cl	NSActionCell	im	void	id
action	AK	Cl	NSActionCell	im	SEL
setAction:	AK	Cl	NSActionCell	im	void	SEL
tag	AK	Cl	NSActionCell	im	int
setTag:	AK	Cl	NSActionCell	im	void	int
stringValue	AK	Cl	NSActionCell	im	NSString *
intValue	AK	Cl	NSActionCell	im	int
floatValue	AK	Cl	NSActionCell	im	float
doubleValue	AK	Cl	NSActionCell	im	double
setObjectValue:	AK	Cl	NSActionCell	im	void	id<NSCopying>
transformBezierPath:	AK	Cl	NSAffineTransform	im	NSBezierPath *	NSBezierPath *
set	AK	Cl	NSAffineTransform	im	void
concat	AK	Cl	NSAffineTransform	im	void
alertWithError:	AK	Cl	NSAlert	cm	NSAlert *	NSError *
alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:	AK	Cl	NSAlert	cm	NSAlert *	NSString *	NSString *	NSString *	NSString *	NSString *
setMessageText:	AK	Cl	NSAlert	im	void	NSString *
setInformativeText:	AK	Cl	NSAlert	im	void	NSString *
messageText	AK	Cl	NSAlert	im	NSString *
informativeText	AK	Cl	NSAlert	im	NSString *
setIcon:	AK	Cl	NSAlert	im	void	NSImage *
icon	AK	Cl	NSAlert	im	NSImage *
addButtonWithTitle:	AK	Cl	NSAlert	im	NSButton *	NSString *
buttons	AK	Cl	NSAlert	im	NSArray *
setShowsHelp:	AK	Cl	NSAlert	im	void	BOOL
showsHelp	AK	Cl	NSAlert	im	BOOL
setHelpAnchor:	AK	Cl	NSAlert	im	void	NSString *
helpAnchor	AK	Cl	NSAlert	im	NSString *
setAlertStyle:	AK	Cl	NSAlert	im	void	NSAlertStyle
alertStyle	AK	Cl	NSAlert	im	NSAlertStyle
setDelegate:	AK	Cl	NSAlert	im	void	id
delegate	AK	Cl	NSAlert	im	id
runModal	AK	Cl	NSAlert	im	int
beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:	AK	Cl	NSAlert	im	void	NSWindow *	id	SEL	void *
action:	AK	Cl	NSActionCell	im	void	id
alertDidEnd:returnCode:contextInfo:	AK	Cl	NSAlert	im	void	NSAlert *	int	void *
sheetDidEnd:returnCode:contextInfo:	AK	Cl	NSApplication	im	void	NSWindow *	int	void *
myCustomDrawMethod:	AK	Cl	NSCustomImageRep	im	void	id
document:didSave:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:shouldClose:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
didPresentErrorWithRecovery:contextInfo:	AK	Cl	NSDocument	im	void	BOOL	void *
document:didPrint:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:didRunPageLayoutAndUserAccepted:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:didRunPrintOperation:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:didSave:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:didSave:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:didSave:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:didSave:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
document:shouldClose:contextInfo:	AK	Cl	NSDocument	im	void	NSDocument *	BOOL	void *
documentController:didCloseAll:contextInfo:	AK	Cl	NSDocumentController	im	void	NSDocumentController *	BOOL	void *
didPresentErrorWithRecovery:contextInfo:	AK	Cl	NSDocumentController	im	void	BOOL	void *
documentController:didReviewAll:contextInfo:	AK	Cl	NSDocumentController	im	void	NSDocumentController *	BOOL	void *
action:	AK	Cl	NSFontManager	im	void	id
action:	AK	Cl	NSMatrix	im	void	id
sortAction:	AK	Cl	NSMatrix	im	NSComparisonResult	id
editor:didCommit:contextInfo:	AK	Cl	NSObject	im	void	id	BOOL	void *
openPanelDidEnd:returnCode:contextInfo:	AK	Cl	NSOpenPanel	im	void	NSSavePanel *	int	void *
openPanelDidEnd:returnCode:contextInfo:	AK	Cl	NSOpenPanel	im	void	NSSavePanel *	int	void *
pageLayoutDidEnd:returnCode:contextInfo:	AK	Cl	NSPageLayout	im	void	NSPageLayout *	int	void *
printOperationDidRun:success:contextInfo:	AK	Cl	NSPrintOperation	im	void	NSPrintOperation *	BOOL	void *
printPanelDidEnd:returnCode:contextInfo:	AK	Cl	NSPrintPanel	im	void	NSPrintPanel *	int	void *
didPresentErrorWithRecovery:contextInfo:	AK	Cl	NSResponder	im	void	BOOL	void *
savePanelDidEnd:returnCode:contextInfo:	AK	Cl	NSSavePanel	im	void	NSSavePanel *	int	void *
action:	AK	Cl	NSStatusItem	im	void	id
action:	AK	Cl	NSStatusItem	im	void	id
action:	AK	Cl	NSTableView	im	void	id
action:	AK	Cl	NSToolbarItem	im	void	id
action:	AK	Cl	NSBrowser	im	void	id
action:	AK	Cl	NSBrowser	im	void	id
action:	AK	Cl	NSColorPanel	im	void	id
editor:didCommit:contextInfo:	AK	Cl	NSController	im	void	id	BOOL	void *
action:	AK	Cl	NSMenu	im	void	id
action:	AK	Cl	NSMenu	im	void	id
action:	AK	Cl	NSMenu	im	void	id
action:	AK	Cl	NSMenuItem	im	void	id
action:	AK	Cl	NSMenuItem	im	void	id
action:	AK	Cl	NSPopUpButton	im	void	id
action:	AK	Cl	NSPopUpButtonCell	im	void	id
window	AK	Cl	NSAlert	im	id
alertShowHelp:	AK	Cl	NSObject;NSAlert	dm	BOOL	NSAlert *
initWithDuration:animationCurve:	AK	Cl	NSAnimation	im	id	NSTimeInterval	NSAnimationCurve
startAnimation	AK	Cl	NSAnimation	im	void
stopAnimation	AK	Cl	NSAnimation	im	void
isAnimating	AK	Cl	NSAnimation	im	BOOL
currentProgress	AK	Cl	NSAnimation	im	NSAnimationProgress
setCurrentProgress:	AK	Cl	NSAnimation	im	void	NSAnimationProgress
setDuration:	AK	Cl	NSAnimation	im	void	NSTimeInterval
duration	AK	Cl	NSAnimation	im	NSTimeInterval
animationBlockingMode	AK	Cl	NSAnimation	im	NSAnimationBlockingMode
setAnimationBlockingMode:	AK	Cl	NSAnimation	im	void	NSAnimationBlockingMode
setFrameRate:	AK	Cl	NSAnimation	im	void	float
frameRate	AK	Cl	NSAnimation	im	float
setAnimationCurve:	AK	Cl	NSAnimation	im	void	NSAnimationCurve
animationCurve	AK	Cl	NSAnimation	im	NSAnimationCurve
currentValue	AK	Cl	NSAnimation	im	float
setDelegate:	AK	Cl	NSAnimation	im	void	id
delegate	AK	Cl	NSAnimation	im	id
progressMarks	AK	Cl	NSAnimation	im	NSArray *
setProgressMarks:	AK	Cl	NSAnimation	im	void	NSArray *
addProgressMark:	AK	Cl	NSAnimation	im	void	NSAnimationProgress
removeProgressMark:	AK	Cl	NSAnimation	im	void	NSAnimationProgress
startWhenAnimation:reachesProgress:	AK	Cl	NSAnimation	im	void	NSAnimation *	NSAnimationProgress
stopWhenAnimation:reachesProgress:	AK	Cl	NSAnimation	im	void	NSAnimation *	NSAnimationProgress
clearStartAnimation	AK	Cl	NSAnimation	im	void
clearStopAnimation	AK	Cl	NSAnimation	im	void
runLoopModesForAnimating	AK	Cl	NSAnimation	im	NSArray *
animationShouldStart:	AK	Cl	NSObject;NSAnimation	dm	BOOL	NSAnimation *
animationDidStop:	AK	Cl	NSObject;NSAnimation	dm	void	NSAnimation *
animationDidEnd:	AK	Cl	NSObject;NSAnimation	dm	void	NSAnimation *
animation:valueForProgress:	AK	Cl	NSObject;NSAnimation	dm	float	NSAnimation *	NSAnimationProgress
animation:didReachProgressMark:	AK	Cl	NSObject;NSAnimation	dm	void	NSAnimation *	NSAnimationProgress
initWithViewAnimations:	AK	Cl	NSViewAnimation;NSAnimation	dm	id	NSArray *
viewAnimations	AK	Cl	NSViewAnimation;NSAnimation	dm	NSArray *
setViewAnimations:	AK	Cl	NSViewAnimation;NSAnimation	dm	void	NSArray *
richTextSource	AK	Cl	NSAppleScript;NSAppleScriptExtensions	im	NSAttributedString *
sharedApplication	AK	Cl	NSApplication	cm	NSApplication *
setDelegate:	AK	Cl	NSApplication	im	void	id
delegate	AK	Cl	NSApplication	im	id
context	AK	Cl	NSApplication	im	NSGraphicsContext *
hide:	AK	Cl	NSApplication	im	void	id
unhide:	AK	Cl	NSApplication	im	void	id
unhideWithoutActivation	AK	Cl	NSApplication	im	void
windowWithWindowNumber:	AK	Cl	NSApplication	im	NSWindow *	int
mainWindow	AK	Cl	NSApplication	im	NSWindow *
keyWindow	AK	Cl	NSApplication	im	NSWindow *
isActive	AK	Cl	NSApplication	im	BOOL
isHidden	AK	Cl	NSApplication	im	BOOL
isRunning	AK	Cl	NSApplication	im	BOOL
deactivate	AK	Cl	NSApplication	im	void
activateIgnoringOtherApps:	AK	Cl	NSApplication	im	void	BOOL
hideOtherApplications:	AK	Cl	NSApplication	im	void	id
unhideAllApplications:	AK	Cl	NSApplication	im	void	id
finishLaunching	AK	Cl	NSApplication	im	void
run	AK	Cl	NSApplication	im	void
runModalForWindow:	AK	Cl	NSApplication	im	int	NSWindow *
stop:	AK	Cl	NSApplication	im	void	id
stopModal	AK	Cl	NSApplication	im	void
stopModalWithCode:	AK	Cl	NSApplication	im	void	int
abortModal	AK	Cl	NSApplication	im	void
modalWindow	AK	Cl	NSApplication	im	NSWindow *
beginModalSessionForWindow:	AK	Cl	NSApplication	im	NSModalSession	NSWindow *
runModalSession:	AK	Cl	NSApplication	im	int	NSModalSession
endModalSession:	AK	Cl	NSApplication	im	void	NSModalSession
terminate:	AK	Cl	NSApplication	im	void	id
requestUserAttention:	AK	Cl	NSApplication	im	int	NSRequestUserAttentionType
cancelUserAttentionRequest:	AK	Cl	NSApplication	im	void	int
beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:	AK	Cl	NSApplication	im	void	NSWindow *	NSWindow *	id	SEL	void *
endSheet:	AK	Cl	NSApplication	im	void	NSWindow *
endSheet:returnCode:	AK	Cl	NSApplication	im	void	NSWindow *	int
runModalForWindow:relativeToWindow:	AK	Cl	NSApplication	im	int	NSWindow *	NSWindow *
beginModalSessionForWindow:relativeToWindow:	AK	Cl	NSApplication	im	NSModalSession	NSWindow *	NSWindow *
nextEventMatchingMask:untilDate:inMode:dequeue:	AK	Cl	NSApplication	im	NSEvent *	unsigned int	NSDate *	NSString *	BOOL
discardEventsMatchingMask:beforeEvent:	AK	Cl	NSApplication	im	void	unsigned int	NSEvent *
postEvent:atStart:	AK	Cl	NSApplication	im	void	NSEvent *	BOOL
currentEvent	AK	Cl	NSApplication	im	NSEvent *
sendEvent:	AK	Cl	NSApplication	im	void	NSEvent *
preventWindowOrdering	AK	Cl	NSApplication	im	void
makeWindowsPerform:inOrder:	AK	Cl	NSApplication	im	NSWindow *	SEL	BOOL
windows	AK	Cl	NSApplication	im	NSArray *
setWindowsNeedUpdate:	AK	Cl	NSApplication	im	void	BOOL
updateWindows	AK	Cl	NSApplication	im	void
setMainMenu:	AK	Cl	NSApplication	im	void	NSMenu *
mainMenu	AK	Cl	NSApplication	im	NSMenu *
setApplicationIconImage:	AK	Cl	NSApplication	im	void	NSImage *
applicationIconImage	AK	Cl	NSApplication	im	NSImage *
sendAction:to:from:	AK	Cl	NSApplication	im	BOOL	SEL	id	id
targetForAction:	AK	Cl	NSApplication	im	id	SEL
targetForAction:to:from:	AK	Cl	NSApplication	im	id	SEL	id	id
tryToPerform:with:	AK	Cl	NSApplication	im	BOOL	SEL	id
validRequestorForSendType:returnType:	AK	Cl	NSApplication	im	id	NSString *	NSString *
reportException:	AK	Cl	NSApplication	im	void	NSException *
detachDrawingThread:toTarget:withObject:	AK	Cl	NSApplication	cm	void	SEL	id	id
replyToApplicationShouldTerminate:	AK	Cl	NSApplication	im	void	BOOL
replyToOpenOrPrint:	AK	Cl	NSApplication	im	void	NSApplicationDelegateReply
orderFrontCharacterPalette:	AK	Cl	NSApplication	im	void	id
setWindowsMenu:	AK	Cl	NSApplication	im	void	NSMenu *
windowsMenu	AK	Cl	NSApplication	im	NSMenu *
arrangeInFront:	AK	Cl	NSApplication	im	void	id
removeWindowsItem:	AK	Cl	NSApplication	im	void	NSWindow *
addWindowsItem:title:filename:	AK	Cl	NSApplication	im	void	NSWindow *	NSString *	BOOL
changeWindowsItem:title:filename:	AK	Cl	NSApplication	im	void	NSWindow *	NSString *	BOOL
updateWindowsItem:	AK	Cl	NSApplication	im	void	NSWindow *
miniaturizeAll:	AK	Cl	NSApplication	im	void	id
applicationWillFinishLaunching:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidFinishLaunching:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationWillHide:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidHide:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationWillUnhide:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidUnhide:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationWillBecomeActive:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidBecomeActive:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationWillResignActive:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidResignActive:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationWillUpdate:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidUpdate:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationWillTerminate:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationDidChangeScreenParameters:	AK	Cl	NSObject;NSApplication	im	void	NSNotification *
applicationShouldTerminate:	AK	Cl	NSObject;NSApplication	dm	NSApplicationTerminateReply	NSApplication *
application:openFile:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *	NSString *
application:openFiles:	AK	Cl	NSObject;NSApplication	dm	void	NSApplication *	NSArray *
application:openTempFile:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *	NSString *
applicationShouldOpenUntitledFile:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *
applicationOpenUntitledFile:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *
application:openFileWithoutUI:	AK	Cl	NSObject;NSApplication	dm	BOOL	id	NSString *
application:printFile:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *	NSString *
application:printFiles:withSettings:showPrintPanels:	AK	Cl	NSObject;NSApplication	dm	NSApplicationPrintReply	NSApplication *	NSArray *	NSDictionary *	BOOL
application:printFiles:	AK	Cl	NSObject;NSApplication	dm	void	NSApplication *	NSArray *
applicationShouldTerminateAfterLastWindowClosed:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *
applicationShouldHandleReopen:hasVisibleWindows:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSApplication *	BOOL
applicationDockMenu:	AK	Cl	NSObject;NSApplication	dm	NSMenu *	NSApplication *
application:willPresentError:	AK	Cl	NSObject;NSApplication	dm	NSError *	NSApplication *	NSError *
setServicesMenu:	AK	Cl	NSApplication	dm	void	NSMenu *
servicesMenu	AK	Cl	NSApplication	dm	NSMenu *
registerServicesMenuSendTypes:returnTypes:	AK	Cl	NSApplication	dm	void	NSArray *	NSArray *
writeSelectionToPasteboard:types:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSPasteboard *	NSArray *
readSelectionFromPasteboard:	AK	Cl	NSObject;NSApplication	dm	BOOL	NSPasteboard *
setServicesProvider:	AK	Cl	NSApplication	dm	void	id
servicesProvider	AK	Cl	NSApplication	dm	id
orderFrontStandardAboutPanel:	AK	Cl	NSApplication	dm	void	id
orderFrontStandardAboutPanelWithOptions:	AK	Cl	NSApplication	dm	void	NSDictionary *
setApplicationHandle:previousHandle:commandLine:show:	AK	Cl	NSApplication	dm	void	void * /*HINSTANCE */	void * /*HINSTANCE */	NSString *	int
useRunningCopyOfApplication	AK	Cl	NSApplication	dm	void
applicationHandle	AK	Cl	NSApplication	dm	void * /*HINSTANCE */
windowWithWindowHandle:	AK	Cl	NSApplication	dm	NSWindow *	void * /*HWND */
orderedDocuments	AK	Cl	NSApplication;NSApplicationScripting	im	NSArray *
orderedWindows	AK	Cl	NSApplication;NSApplicationScripting	im	NSArray *
application:delegateHandlesKey:	AK	Cl	NSObject;NSApplicationScripting	im	BOOL	NSApplication *	NSString *
rearrangeObjects	AK	Cl	NSArrayController	im	void
setSortDescriptors:	AK	Cl	NSArrayController	im	void	NSArray *
sortDescriptors	AK	Cl	NSArrayController	im	NSArray *
setFilterPredicate:	AK	Cl	NSArrayController	im	void	NSPredicate *
filterPredicate	AK	Cl	NSArrayController	im	NSPredicate *
setClearsFilterPredicateOnInsertion:	AK	Cl	NSArrayController	im	void	BOOL
clearsFilterPredicateOnInsertion	AK	Cl	NSArrayController	im	BOOL
arrangeObjects:	AK	Cl	NSArrayController	im	NSArray *	NSArray *
arrangedObjects	AK	Cl	NSArrayController	im	id
setAvoidsEmptySelection:	AK	Cl	NSArrayController	im	void	BOOL
avoidsEmptySelection	AK	Cl	NSArrayController	im	BOOL
setPreservesSelection:	AK	Cl	NSArrayController	im	void	BOOL
preservesSelection	AK	Cl	NSArrayController	im	BOOL
setSelectsInsertedObjects:	AK	Cl	NSArrayController	im	void	BOOL
selectsInsertedObjects	AK	Cl	NSArrayController	im	BOOL
setAlwaysUsesMultipleValuesMarker:	AK	Cl	NSArrayController	im	void	BOOL
alwaysUsesMultipleValuesMarker	AK	Cl	NSArrayController	im	BOOL
setSelectionIndexes:	AK	Cl	NSArrayController	im	BOOL	NSIndexSet *
selectionIndexes	AK	Cl	NSArrayController	im	NSIndexSet *
setSelectionIndex:	AK	Cl	NSArrayController	im	BOOL	unsigned int
selectionIndex	AK	Cl	NSArrayController	im	unsigned int
addSelectionIndexes:	AK	Cl	NSArrayController	im	BOOL	NSIndexSet *
removeSelectionIndexes:	AK	Cl	NSArrayController	im	BOOL	NSIndexSet *
setSelectedObjects:	AK	Cl	NSArrayController	im	BOOL	NSArray *
selectedObjects	AK	Cl	NSArrayController	im	NSArray *
addSelectedObjects:	AK	Cl	NSArrayController	im	BOOL	NSArray *
removeSelectedObjects:	AK	Cl	NSArrayController	im	BOOL	NSArray *
add:	AK	Cl	NSArrayController	im	void	id
remove:	AK	Cl	NSArrayController	im	void	id
insert:	AK	Cl	NSArrayController	im	void	id
canInsert	AK	Cl	NSArrayController	im	BOOL
selectNext:	AK	Cl	NSArrayController	im	void	id
selectPrevious:	AK	Cl	NSArrayController	im	void	id
canSelectNext	AK	Cl	NSArrayController	im	BOOL
canSelectPrevious	AK	Cl	NSArrayController	im	BOOL
addObject:	AK	Cl	NSArrayController	im	void	id
addObjects:	AK	Cl	NSArrayController	im	void	NSArray *
insertObject:atArrangedObjectIndex:	AK	Cl	NSArrayController	im	void	id	unsigned int
insertObjects:atArrangedObjectIndexes:	AK	Cl	NSArrayController	im	void	NSArray *	NSIndexSet *
removeObjectAtArrangedObjectIndex:	AK	Cl	NSArrayController	im	void	unsigned int
removeObjectsAtArrangedObjectIndexes:	AK	Cl	NSArrayController	im	void	NSIndexSet *
removeObject:	AK	Cl	NSArrayController	im	void	id
removeObjects:	AK	Cl	NSArrayController	im	void	NSArray *
sharedTypesetter	AK	Cl	NSATSTypesetter	cm	id
lineFragmentRectForProposedRect:remainingRect:	AK	Cl	NSATSTypesetter	im	NSRect	NSRect	NSRectPointer
usesFontLeading	AK	Cl	NSATSTypesetter	im	BOOL
setUsesFontLeading:	AK	Cl	NSATSTypesetter	im	void	BOOL
typesetterBehavior	AK	Cl	NSATSTypesetter	im	NSTypesetterBehavior
setTypesetterBehavior:	AK	Cl	NSATSTypesetter	im	void	NSTypesetterBehavior
hyphenationFactor	AK	Cl	NSATSTypesetter	im	float
setHyphenationFactor:	AK	Cl	NSATSTypesetter	im	void	float
lineFragmentPadding	AK	Cl	NSATSTypesetter	im	float
setLineFragmentPadding:	AK	Cl	NSATSTypesetter	im	void	float
substituteFontForFont:	AK	Cl	NSATSTypesetter	im	NSFont *	NSFont *
textTabForGlyphLocation:writingDirection:maxLocation:	AK	Cl	NSATSTypesetter	im	NSTextTab *	float	NSWritingDirection	float
bidiProcessingEnabled	AK	Cl	NSATSTypesetter	im	BOOL
setBidiProcessingEnabled:	AK	Cl	NSATSTypesetter	im	void	BOOL
setAttributedString:	AK	Cl	NSATSTypesetter	im	void	NSAttributedString *
attributedString	AK	Cl	NSATSTypesetter	im	NSAttributedString *
setParagraphGlyphRange:separatorGlyphRange:	AK	Cl	NSATSTypesetter	im	void	NSRange	NSRange
paragraphGlyphRange	AK	Cl	NSATSTypesetter	im	NSRange
paragraphSeparatorGlyphRange	AK	Cl	NSATSTypesetter	im	NSRange
layoutParagraphAtPoint:	AK	Cl	NSATSTypesetter	im	unsigned int	NSPoint *
lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:	AK	Cl	NSATSTypesetter	im	float	unsigned	NSRect
paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:	AK	Cl	NSATSTypesetter	im	float	unsigned	NSRect
paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:	AK	Cl	NSATSTypesetter	im	float	unsigned	NSRect
layoutManager	AK	Cl	NSATSTypesetter	im	NSLayoutManager *
currentTextContainer	AK	Cl	NSATSTypesetter	im	NSTextContainer *
setHardInvalidation:forGlyphRange:	AK	Cl	NSATSTypesetter	im	void	BOOL	NSRange
getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:	AK	Cl	NSATSTypesetter	im	void	NSRect *	NSRect *	NSRange	NSPoint
willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:	AK	Cl	NSATSTypesetter	im	void	NSRect *	NSRange	NSRect *	float *
shouldBreakLineByWordBeforeCharacterAtIndex:	AK	Cl	NSATSTypesetter	im	BOOL	unsigned
shouldBreakLineByHyphenatingBeforeCharacterAtIndex:	AK	Cl	NSATSTypesetter	im	BOOL	unsigned
hyphenationFactorForGlyphAtIndex:	AK	Cl	NSATSTypesetter	im	float	unsigned
hyphenCharacterForGlyphAtIndex:	AK	Cl	NSATSTypesetter	im	UTF32Char	unsigned
boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:	AK	Cl	NSATSTypesetter	im	NSRect	unsigned	NSTextContainer *	NSRect	NSPoint	unsigned
characterRangeForGlyphRange:actualGlyphRange:	AK	Cl	NSATSTypesetter	im	NSRange	NSRange	NSRangePointer
glyphRangeForCharacterRange:actualCharacterRange:	AK	Cl	NSATSTypesetter	im	NSRange	NSRange	NSRangePointer
getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:	AK	Cl	NSATSTypesetter	im	unsigned	NSRange	NSGlyph *	unsigned *	NSGlyphInscription *	BOOL *
setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:	AK	Cl	NSATSTypesetter	im	void	NSRect	NSRange	NSRect	float
substituteGlyphsInRange:withGlyphs:	AK	Cl	NSATSTypesetter	im	void	NSRange	NSGlyph *
insertGlyph:atGlyphIndex:characterIndex:	AK	Cl	NSATSTypesetter	im	void	NSGlyph	unsigned	unsigned
deleteGlyphsInRange:	AK	Cl	NSATSTypesetter	im	void	NSRange
setNotShownAttribute:forGlyphRange:	AK	Cl	NSATSTypesetter	im	void	BOOL	NSRange
setDrawsOutsideLineFragment:forGlyphRange:	AK	Cl	NSATSTypesetter	im	void	BOOL	NSRange
setLocation:withAdvancements:forStartOfGlyphRange:	AK	Cl	NSATSTypesetter	im	void	NSPoint	const float *	NSRange
setAttachmentSize:forGlyphRange:	AK	Cl	NSATSTypesetter	im	void	NSSize	NSRange
setBidiLevels:forGlyphRange:	AK	Cl	NSATSTypesetter	im	void	const uint8_t *	NSRange
fontAttributesInRange:	AK	Cl	NSAttributedString	im	NSDictionary *	NSRange
rulerAttributesInRange:	AK	Cl	NSAttributedString	im	NSDictionary *	NSRange
containsAttachments	AK	Cl	NSAttributedString	im	BOOL
lineBreakBeforeIndex:withinRange:	AK	Cl	NSAttributedString	im	unsigned	unsigned	NSRange
lineBreakByHyphenatingBeforeIndex:withinRange:	AK	Cl	NSAttributedString	im	unsigned	unsigned	NSRange
doubleClickAtIndex:	AK	Cl	NSAttributedString	im	NSRange	unsigned
nextWordFromIndex:forward:	AK	Cl	NSAttributedString	im	unsigned	unsigned	BOOL
textUnfilteredFileTypes	AK	Cl	NSAttributedString	cm	NSArray *
textUnfilteredPasteboardTypes	AK	Cl	NSAttributedString	cm	NSArray *
textFileTypes	AK	Cl	NSAttributedString	cm	NSArray *
textPasteboardTypes	AK	Cl	NSAttributedString	cm	NSArray *
rangeOfTextBlock:atIndex:	AK	Cl	NSAttributedString	im	NSRange	NSTextBlock *	unsigned
rangeOfTextTable:atIndex:	AK	Cl	NSAttributedString	im	NSRange	NSTextTable *	unsigned
rangeOfTextList:atIndex:	AK	Cl	NSAttributedString	im	NSRange	NSTextList *	unsigned
itemNumberInTextList:atIndex:	AK	Cl	NSAttributedString	im	int	NSTextList *	unsigned
initWithURL:options:documentAttributes:error:	AK	Cl	NSAttributedString	im	id	NSURL *	NSDictionary *	NSDictionary **	NSError **
initWithData:options:documentAttributes:error:	AK	Cl	NSAttributedString	im	id	NSData *	NSDictionary *	NSDictionary **	NSError **
initWithPath:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSString *	NSDictionary **
initWithURL:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSURL *	NSDictionary **
initWithRTF:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSData *	NSDictionary **
initWithRTFD:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSData *	NSDictionary **
initWithHTML:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSData *	NSDictionary **
initWithHTML:baseURL:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSData *	NSURL *	NSDictionary **
initWithDocFormat:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSData *	NSDictionary **
initWithHTML:options:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSData *	NSDictionary *	NSDictionary **
initWithRTFDFileWrapper:documentAttributes:	AK	Cl	NSAttributedString	im	id	NSFileWrapper *	NSDictionary **
dataFromRange:documentAttributes:error:	AK	Cl	NSAttributedString	im	NSData *	NSRange	NSDictionary *	NSError **
fileWrapperFromRange:documentAttributes:error:	AK	Cl	NSAttributedString	im	NSFileWrapper *	NSRange	NSDictionary *	NSError **
RTFFromRange:documentAttributes:	AK	Cl	NSAttributedString	im	NSData *	NSRange	NSDictionary *
RTFDFromRange:documentAttributes:	AK	Cl	NSAttributedString	im	NSData *	NSRange	NSDictionary *
RTFDFileWrapperFromRange:documentAttributes:	AK	Cl	NSAttributedString	im	NSFileWrapper *	NSRange	NSDictionary *
docFormatFromRange:documentAttributes:	AK	Cl	NSAttributedString	im	NSData *	NSRange	NSDictionary *
readFromURL:options:documentAttributes:error:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	BOOL	NSURL *	NSDictionary *	NSDictionary **	NSError **
readFromData:options:documentAttributes:error:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	BOOL	NSData *	NSDictionary *	NSDictionary **	NSError **
readFromURL:options:documentAttributes:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	BOOL	NSURL *	NSDictionary *	NSDictionary **
readFromData:options:documentAttributes:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	BOOL	NSData *	NSDictionary *	NSDictionary **
superscriptRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
subscriptRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
unscriptRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
applyFontTraits:range:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSFontTraitMask	NSRange
setAlignment:range:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSTextAlignment	NSRange
setBaseWritingDirection:range:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSWritingDirection	NSRange
fixAttributesInRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
fixFontAttributeInRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
fixParagraphStyleAttributeInRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
fixAttachmentAttributeInRange:	AK	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
bezierPath	AK	Cl	NSBezierPath	cm	NSBezierPath *
bezierPathWithRect:	AK	Cl	NSBezierPath	cm	NSBezierPath *	NSRect
bezierPathWithOvalInRect:	AK	Cl	NSBezierPath	cm	NSBezierPath *	NSRect
fillRect:	AK	Cl	NSBezierPath	cm	void	NSRect
strokeRect:	AK	Cl	NSBezierPath	cm	void	NSRect
clipRect:	AK	Cl	NSBezierPath	cm	void	NSRect
strokeLineFromPoint:toPoint:	AK	Cl	NSBezierPath	cm	void	NSPoint	NSPoint
drawPackedGlyphs:atPoint:	AK	Cl	NSBezierPath	cm	void	const char *	NSPoint
setDefaultMiterLimit:	AK	Cl	NSBezierPath	cm	void	float
defaultMiterLimit	AK	Cl	NSBezierPath	cm	float
setDefaultFlatness:	AK	Cl	NSBezierPath	cm	void	float
defaultFlatness	AK	Cl	NSBezierPath	cm	float
setDefaultWindingRule:	AK	Cl	NSBezierPath	cm	void	NSWindingRule
defaultWindingRule	AK	Cl	NSBezierPath	cm	NSWindingRule
setDefaultLineCapStyle:	AK	Cl	NSBezierPath	cm	void	NSLineCapStyle
defaultLineCapStyle	AK	Cl	NSBezierPath	cm	NSLineCapStyle
setDefaultLineJoinStyle:	AK	Cl	NSBezierPath	cm	void	NSLineJoinStyle
defaultLineJoinStyle	AK	Cl	NSBezierPath	cm	NSLineJoinStyle
setDefaultLineWidth:	AK	Cl	NSBezierPath	cm	void	float
defaultLineWidth	AK	Cl	NSBezierPath	cm	float
moveToPoint:	AK	Cl	NSBezierPath	im	void	NSPoint
lineToPoint:	AK	Cl	NSBezierPath	im	void	NSPoint
curveToPoint:controlPoint1:controlPoint2:	AK	Cl	NSBezierPath	im	void	NSPoint	NSPoint	NSPoint
closePath	AK	Cl	NSBezierPath	im	void
removeAllPoints	AK	Cl	NSBezierPath	im	void
relativeMoveToPoint:	AK	Cl	NSBezierPath	im	void	NSPoint
relativeLineToPoint:	AK	Cl	NSBezierPath	im	void	NSPoint
relativeCurveToPoint:controlPoint1:controlPoint2:	AK	Cl	NSBezierPath	im	void	NSPoint	NSPoint	NSPoint
lineWidth	AK	Cl	NSBezierPath	im	float
setLineWidth:	AK	Cl	NSBezierPath	im	void	float
lineCapStyle	AK	Cl	NSBezierPath	im	NSLineCapStyle
setLineCapStyle:	AK	Cl	NSBezierPath	im	void	NSLineCapStyle
lineJoinStyle	AK	Cl	NSBezierPath	im	NSLineJoinStyle
setLineJoinStyle:	AK	Cl	NSBezierPath	im	void	NSLineJoinStyle
windingRule	AK	Cl	NSBezierPath	im	NSWindingRule
setWindingRule:	AK	Cl	NSBezierPath	im	void	NSWindingRule
miterLimit	AK	Cl	NSBezierPath	im	float
setMiterLimit:	AK	Cl	NSBezierPath	im	void	float
flatness	AK	Cl	NSBezierPath	im	float
setFlatness:	AK	Cl	NSBezierPath	im	void	float
getLineDash:count:phase:	AK	Cl	NSBezierPath	im	void	float *	int *	float *
setLineDash:count:phase:	AK	Cl	NSBezierPath	im	void	const float *	int	float
stroke	AK	Cl	NSBezierPath	im	void
fill	AK	Cl	NSBezierPath	im	void
addClip	AK	Cl	NSBezierPath	im	void
setClip	AK	Cl	NSBezierPath	im	void
bezierPathByFlatteningPath	AK	Cl	NSBezierPath	im	NSBezierPath *
bezierPathByReversingPath	AK	Cl	NSBezierPath	im	NSBezierPath *
transformUsingAffineTransform:	AK	Cl	NSBezierPath	im	void	NSAffineTransform *
isEmpty	AK	Cl	NSBezierPath	im	BOOL
currentPoint	AK	Cl	NSBezierPath	im	NSPoint
controlPointBounds	AK	Cl	NSBezierPath	im	NSRect
bounds	AK	Cl	NSBezierPath	im	NSRect
elementCount	AK	Cl	NSBezierPath	im	int
elementAtIndex:associatedPoints:	AK	Cl	NSBezierPath	im	NSBezierPathElement	int	NSPointArray
elementAtIndex:	AK	Cl	NSBezierPath	im	NSBezierPathElement	int
setAssociatedPoints:atIndex:	AK	Cl	NSBezierPath	im	void	NSPointArray	int
appendBezierPath:	AK	Cl	NSBezierPath	im	void	NSBezierPath *
appendBezierPathWithRect:	AK	Cl	NSBezierPath	im	void	NSRect
appendBezierPathWithPoints:count:	AK	Cl	NSBezierPath	im	void	NSPointArray	int
appendBezierPathWithOvalInRect:	AK	Cl	NSBezierPath	im	void	NSRect
appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:	AK	Cl	NSBezierPath	im	void	NSPoint	float	float	float	BOOL
appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:	AK	Cl	NSBezierPath	im	void	NSPoint	float	float	float
appendBezierPathWithArcFromPoint:toPoint:radius:	AK	Cl	NSBezierPath	im	void	NSPoint	NSPoint	float
appendBezierPathWithGlyph:inFont:	AK	Cl	NSBezierPath	im	void	NSGlyph	NSFont *
appendBezierPathWithGlyphs:count:inFont:	AK	Cl	NSBezierPath	im	void	NSGlyph *	int	NSFont *
appendBezierPathWithPackedGlyphs:	AK	Cl	NSBezierPath	im	void	const char *
containsPoint:	AK	Cl	NSBezierPath	im	BOOL	NSPoint
cachesBezierPath	AK	Cl	NSBezierPath	im	BOOL
setCachesBezierPath:	AK	Cl	NSBezierPath	im	void	BOOL
initWithFocusedViewRect:	AK	Cl	NSBitmapImageRep	im	id	NSRect
initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:	AK	Cl	NSBitmapImageRep	im	id	unsigned char **	int	int	int	int	BOOL	BOOL	NSString *	int	int
initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:	AK	Cl	NSBitmapImageRep	im	id	unsigned char **	int	int	int	int	BOOL	BOOL	NSString *	NSBitmapFormat	int	int
imageRepsWithData:	AK	Cl	NSBitmapImageRep	cm	NSArray *	NSData *
imageRepWithData:	AK	Cl	NSBitmapImageRep	cm	id	NSData *
initWithData:	AK	Cl	NSBitmapImageRep	im	id	NSData *
bitmapData	AK	Cl	NSBitmapImageRep	im	unsigned char *
getBitmapDataPlanes:	AK	Cl	NSBitmapImageRep	im	void	unsigned char **
isPlanar	AK	Cl	NSBitmapImageRep	im	BOOL
samplesPerPixel	AK	Cl	NSBitmapImageRep	im	int
bitsPerPixel	AK	Cl	NSBitmapImageRep	im	int
bytesPerRow	AK	Cl	NSBitmapImageRep	im	int
bytesPerPlane	AK	Cl	NSBitmapImageRep	im	int
numberOfPlanes	AK	Cl	NSBitmapImageRep	im	int
bitmapFormat	AK	Cl	NSBitmapImageRep	im	NSBitmapFormat
getCompression:factor:	AK	Cl	NSBitmapImageRep	im	void	NSTIFFCompression *	float *
setCompression:factor:	AK	Cl	NSBitmapImageRep	im	void	NSTIFFCompression	float
TIFFRepresentation	AK	Cl	NSBitmapImageRep	im	NSData *
TIFFRepresentationUsingCompression:factor:	AK	Cl	NSBitmapImageRep	im	NSData *	NSTIFFCompression	float
TIFFRepresentationOfImageRepsInArray:	AK	Cl	NSBitmapImageRep	cm	NSData *	NSArray *
TIFFRepresentationOfImageRepsInArray:usingCompression:factor:	AK	Cl	NSBitmapImageRep	cm	NSData *	NSArray *	NSTIFFCompression	float
getTIFFCompressionTypes:count:	AK	Cl	NSBitmapImageRep	cm	void	const NSTIFFCompression **	int *
localizedNameForTIFFCompressionType:	AK	Cl	NSBitmapImageRep	cm	NSString *	NSTIFFCompression
canBeCompressedUsing:	AK	Cl	NSBitmapImageRep	im	BOOL	NSTIFFCompression
colorizeByMappingGray:toColor:blackMapping:whiteMapping:	AK	Cl	NSBitmapImageRep	im	void	float	NSColor *	NSColor *	NSColor *
initForIncrementalLoad	AK	Cl	NSBitmapImageRep	im	id
incrementalLoadFromData:complete:	AK	Cl	NSBitmapImageRep	im	int	NSData *	BOOL
setColor:atX:y:	AK	Cl	NSBitmapImageRep	im	void	NSColor *	int	int
colorAtX:y:	AK	Cl	NSBitmapImageRep	im	NSColor *	int	int
getPixel:atX:y:	AK	Cl	NSBitmapImageRep	im	void	unsigned int[]	int	int
setPixel:atX:y:	AK	Cl	NSBitmapImageRep	im	void	unsigned int[]	int	int
initWithIconHandle:	AK	Cl	NSBitmapImageRep	im	id	void * /* HICON */
initWithBitmapHandle:	AK	Cl	NSBitmapImageRep	im	id	void * /* HBITMAP */
representationOfImageRepsInArray:usingType:properties:	AK	Cl	NSBitmapImageRep	cm	NSData *	NSArray *	NSBitmapImageFileType	NSDictionary *
representationUsingType:properties:	AK	Cl	NSBitmapImageRep	im	NSData *	NSBitmapImageFileType	NSDictionary *
setProperty:withValue:	AK	Cl	NSBitmapImageRep	im	void	NSString *	id
valueForProperty:	AK	Cl	NSBitmapImageRep	im	id	NSString *
borderType	AK	Cl	NSBox	im	NSBorderType
titlePosition	AK	Cl	NSBox	im	NSTitlePosition
setBorderType:	AK	Cl	NSBox	im	void	NSBorderType
setBoxType:	AK	Cl	NSBox	im	void	NSBoxType
boxType	AK	Cl	NSBox	im	NSBoxType
setTitlePosition:	AK	Cl	NSBox	im	void	NSTitlePosition
title	AK	Cl	NSBox	im	NSString *
setTitle:	AK	Cl	NSBox	im	void	NSString *
titleFont	AK	Cl	NSBox	im	NSFont *
setTitleFont:	AK	Cl	NSBox	im	void	NSFont *
borderRect	AK	Cl	NSBox	im	NSRect
titleRect	AK	Cl	NSBox	im	NSRect
titleCell	AK	Cl	NSBox	im	id
sizeToFit	AK	Cl	NSBox	im	void
contentViewMargins	AK	Cl	NSBox	im	NSSize
setContentViewMargins:	AK	Cl	NSBox	im	void	NSSize
setFrameFromContentFrame:	AK	Cl	NSBox	im	void	NSRect
contentView	AK	Cl	NSBox	im	id
setContentView:	AK	Cl	NSBox	im	void	NSView *
setTitleWithMnemonic:	AK	Cl	NSBox	im	void	NSString *
cellClass	AK	Cl	NSBrowser	cm	Class
loadColumnZero	AK	Cl	NSBrowser	im	void
isLoaded	AK	Cl	NSBrowser	im	BOOL
setDoubleAction:	AK	Cl	NSBrowser	im	void	SEL
doubleAction	AK	Cl	NSBrowser	im	SEL
setMatrixClass:	AK	Cl	NSBrowser	im	void	Class
matrixClass	AK	Cl	NSBrowser	im	Class
setCellClass:	AK	Cl	NSBrowser	im	void	Class
setCellPrototype:	AK	Cl	NSBrowser	im	void	NSCell *
cellPrototype	AK	Cl	NSBrowser	im	id
setDelegate:	AK	Cl	NSBrowser	im	void	id
delegate	AK	Cl	NSBrowser	im	id
setReusesColumns:	AK	Cl	NSBrowser	im	void	BOOL
reusesColumns	AK	Cl	NSBrowser	im	BOOL
setHasHorizontalScroller:	AK	Cl	NSBrowser	im	void	BOOL
hasHorizontalScroller	AK	Cl	NSBrowser	im	BOOL
setSeparatesColumns:	AK	Cl	NSBrowser	im	void	BOOL
separatesColumns	AK	Cl	NSBrowser	im	BOOL
setTitled:	AK	Cl	NSBrowser	im	void	BOOL
isTitled	AK	Cl	NSBrowser	im	BOOL
setMinColumnWidth:	AK	Cl	NSBrowser	im	void	float
minColumnWidth	AK	Cl	NSBrowser	im	float
setMaxVisibleColumns:	AK	Cl	NSBrowser	im	void	int
maxVisibleColumns	AK	Cl	NSBrowser	im	int
setAllowsMultipleSelection:	AK	Cl	NSBrowser	im	void	BOOL
allowsMultipleSelection	AK	Cl	NSBrowser	im	BOOL
setAllowsBranchSelection:	AK	Cl	NSBrowser	im	void	BOOL
allowsBranchSelection	AK	Cl	NSBrowser	im	BOOL
setAllowsEmptySelection:	AK	Cl	NSBrowser	im	void	BOOL
allowsEmptySelection	AK	Cl	NSBrowser	im	BOOL
setTakesTitleFromPreviousColumn:	AK	Cl	NSBrowser	im	void	BOOL
takesTitleFromPreviousColumn	AK	Cl	NSBrowser	im	BOOL
setAcceptsArrowKeys:	AK	Cl	NSBrowser	im	void	BOOL
acceptsArrowKeys	AK	Cl	NSBrowser	im	BOOL
setSendsActionOnArrowKeys:	AK	Cl	NSBrowser	im	void	BOOL
sendsActionOnArrowKeys	AK	Cl	NSBrowser	im	BOOL
setTitle:ofColumn:	AK	Cl	NSBrowser	im	void	NSString *	int
titleOfColumn:	AK	Cl	NSBrowser	im	NSString *	int
setPathSeparator:	AK	Cl	NSBrowser	im	void	NSString *
pathSeparator	AK	Cl	NSBrowser	im	NSString *
setPath:	AK	Cl	NSBrowser	im	BOOL	NSString *
path	AK	Cl	NSBrowser	im	NSString *
pathToColumn:	AK	Cl	NSBrowser	im	NSString *	int
selectedColumn	AK	Cl	NSBrowser	im	int
selectedCell	AK	Cl	NSBrowser	im	id
selectedCellInColumn:	AK	Cl	NSBrowser	im	id	int
selectedCells	AK	Cl	NSBrowser	im	NSArray *
selectRow:inColumn:	AK	Cl	NSBrowser	im	void	int	int
selectedRowInColumn:	AK	Cl	NSBrowser	im	int	int
reloadColumn:	AK	Cl	NSBrowser	im	void	int
validateVisibleColumns	AK	Cl	NSBrowser	im	void
scrollColumnsRightBy:	AK	Cl	NSBrowser	im	void	int
scrollColumnsLeftBy:	AK	Cl	NSBrowser	im	void	int
scrollColumnToVisible:	AK	Cl	NSBrowser	im	void	int
setLastColumn:	AK	Cl	NSBrowser	im	void	int
lastColumn	AK	Cl	NSBrowser	im	int
addColumn	AK	Cl	NSBrowser	im	void
numberOfVisibleColumns	AK	Cl	NSBrowser	im	int
firstVisibleColumn	AK	Cl	NSBrowser	im	int
lastVisibleColumn	AK	Cl	NSBrowser	im	int
columnOfMatrix:	AK	Cl	NSBrowser	im	int	NSMatrix *
matrixInColumn:	AK	Cl	NSBrowser	im	NSMatrix *	int
loadedCellAtRow:column:	AK	Cl	NSBrowser	im	id	int	int
selectAll:	AK	Cl	NSBrowser	im	void	id
tile	AK	Cl	NSBrowser	im	void
doClick:	AK	Cl	NSBrowser	im	void	id
doDoubleClick:	AK	Cl	NSBrowser	im	void	id
sendAction	AK	Cl	NSBrowser	im	BOOL
titleFrameOfColumn:	AK	Cl	NSBrowser	im	NSRect	int
drawTitleOfColumn:inRect:	AK	Cl	NSBrowser	im	void	int	NSRect
titleHeight	AK	Cl	NSBrowser	im	float
frameOfColumn:	AK	Cl	NSBrowser	im	NSRect	int
frameOfInsideOfColumn:	AK	Cl	NSBrowser	im	NSRect	int
columnWidthForColumnContentWidth:	AK	Cl	NSBrowser	im	float	float
columnContentWidthForColumnWidth:	AK	Cl	NSBrowser	im	float	float
setColumnResizingType:	AK	Cl	NSBrowser	im	void	NSBrowserColumnResizingType
columnResizingType	AK	Cl	NSBrowser	im	NSBrowserColumnResizingType
setPrefersAllColumnUserResizing:	AK	Cl	NSBrowser	im	void	BOOL
prefersAllColumnUserResizing	AK	Cl	NSBrowser	im	BOOL
setWidth:ofColumn:	AK	Cl	NSBrowser	im	void	float	int
widthOfColumn:	AK	Cl	NSBrowser	im	float	int
setColumnsAutosaveName:	AK	Cl	NSBrowser	im	void	NSString *
columnsAutosaveName	AK	Cl	NSBrowser	im	NSString *
removeSavedColumnsWithAutosaveName:	AK	Cl	NSBrowser	cm	void	NSString *
displayColumn:	AK	Cl	NSBrowser	im	void	int
displayAllColumns	AK	Cl	NSBrowser	im	void
scrollViaScroller:	AK	Cl	NSBrowser	im	void	NSScroller *
updateScroller	AK	Cl	NSBrowser	im	void
browser:numberOfRowsInColumn:	AK	Cl	NSObject;NSBrowser	dm	int	NSBrowser *	int
browser:createRowsForColumn:inMatrix:	AK	Cl	NSObject;NSBrowser	dm	void	NSBrowser *	int	NSMatrix *
browser:willDisplayCell:atRow:column:	AK	Cl	NSObject;NSBrowser	dm	void	NSBrowser *	id	int	int
browser:titleOfColumn:	AK	Cl	NSObject;NSBrowser	dm	NSString *	NSBrowser *	int
browser:selectCellWithString:inColumn:	AK	Cl	NSObject;NSBrowser	dm	BOOL	NSBrowser *	NSString *	int
browser:selectRow:inColumn:	AK	Cl	NSObject;NSBrowser	dm	BOOL	NSBrowser *	int	int
browser:isColumnValid:	AK	Cl	NSObject;NSBrowser	dm	BOOL	NSBrowser *	int
browserWillScroll:	AK	Cl	NSObject;NSBrowser	dm	void	NSBrowser *
browserDidScroll:	AK	Cl	NSObject;NSBrowser	dm	void	NSBrowser *
browser:shouldSizeColumn:forUserResize:toWidth:	AK	Cl	NSObject;NSBrowser	dm	float	NSBrowser *	int	BOOL	float
browser:sizeToFitWidthOfColumn:	AK	Cl	NSObject;NSBrowser	dm	float	NSBrowser *	int
browserColumnConfigurationDidChange:	AK	Cl	NSObject;NSBrowser	dm	void	NSNotification *
branchImage	AK	Cl	NSBrowserCell	cm	NSImage *
highlightedBranchImage	AK	Cl	NSBrowserCell	cm	NSImage *
highlightColorInView:	AK	Cl	NSBrowserCell	im	NSColor *	NSView *
isLeaf	AK	Cl	NSBrowserCell	im	BOOL
setLeaf:	AK	Cl	NSBrowserCell	im	void	BOOL
isLoaded	AK	Cl	NSBrowserCell	im	BOOL
setLoaded:	AK	Cl	NSBrowserCell	im	void	BOOL
reset	AK	Cl	NSBrowserCell	im	void
set	AK	Cl	NSBrowserCell	im	void
setImage:	AK	Cl	NSBrowserCell	im	void	NSImage *
image	AK	Cl	NSBrowserCell	im	NSImage *
setAlternateImage:	AK	Cl	NSBrowserCell	im	void	NSImage *
alternateImage	AK	Cl	NSBrowserCell	im	NSImage *
title	AK	Cl	NSButton	im	NSString *
setTitle:	AK	Cl	NSButton	im	void	NSString *
alternateTitle	AK	Cl	NSButton	im	NSString *
setAlternateTitle:	AK	Cl	NSButton	im	void	NSString *
image	AK	Cl	NSButton	im	NSImage *
setImage:	AK	Cl	NSButton	im	void	NSImage *
alternateImage	AK	Cl	NSButton	im	NSImage *
setAlternateImage:	AK	Cl	NSButton	im	void	NSImage *
imagePosition	AK	Cl	NSButton	im	NSCellImagePosition
setImagePosition:	AK	Cl	NSButton	im	void	NSCellImagePosition
setButtonType:	AK	Cl	NSButton	im	void	NSButtonType
state	AK	Cl	NSButton	im	int
setState:	AK	Cl	NSButton	im	void	int
isBordered	AK	Cl	NSButton	im	BOOL
setBordered:	AK	Cl	NSButton	im	void	BOOL
isTransparent	AK	Cl	NSButton	im	BOOL
setTransparent:	AK	Cl	NSButton	im	void	BOOL
setPeriodicDelay:interval:	AK	Cl	NSButton	im	void	float	float
getPeriodicDelay:interval:	AK	Cl	NSButton	im	void	float *	float *
keyEquivalent	AK	Cl	NSButton	im	NSString *
setKeyEquivalent:	AK	Cl	NSButton	im	void	NSString *
keyEquivalentModifierMask	AK	Cl	NSButton	im	unsigned int
setKeyEquivalentModifierMask:	AK	Cl	NSButton	im	void	unsigned int
highlight:	AK	Cl	NSButton	im	void	BOOL
performKeyEquivalent:	AK	Cl	NSButton	im	BOOL	NSEvent *
setTitleWithMnemonic:	AK	Cl	NSButton	im	void	NSString *
attributedTitle	AK	Cl	NSButton	im	NSAttributedString *
setAttributedTitle:	AK	Cl	NSButton	im	void	NSAttributedString *
attributedAlternateTitle	AK	Cl	NSButton	im	NSAttributedString *
setAttributedAlternateTitle:	AK	Cl	NSButton	im	void	NSAttributedString *
setBezelStyle:	AK	Cl	NSButton	im	void	NSBezelStyle
bezelStyle	AK	Cl	NSButton	im	NSBezelStyle
setAllowsMixedState:	AK	Cl	NSButton	im	void	BOOL
allowsMixedState	AK	Cl	NSButton	im	BOOL
setNextState	AK	Cl	NSButton	im	void
setShowsBorderOnlyWhileMouseInside:	AK	Cl	NSButton	im	void	BOOL
showsBorderOnlyWhileMouseInside	AK	Cl	NSButton	im	BOOL
setSound:	AK	Cl	NSButton	im	void	NSSound *
sound	AK	Cl	NSButton	im	NSSound *
title	AK	Cl	NSButtonCell	im	NSString *
setTitle:	AK	Cl	NSButtonCell	im	void	NSString *
alternateTitle	AK	Cl	NSButtonCell	im	NSString *
setAlternateTitle:	AK	Cl	NSButtonCell	im	void	NSString *
alternateImage	AK	Cl	NSButtonCell	im	NSImage *
setAlternateImage:	AK	Cl	NSButtonCell	im	void	NSImage *
imagePosition	AK	Cl	NSButtonCell	im	NSCellImagePosition
setImagePosition:	AK	Cl	NSButtonCell	im	void	NSCellImagePosition
highlightsBy	AK	Cl	NSButtonCell	im	int
setHighlightsBy:	AK	Cl	NSButtonCell	im	void	int
showsStateBy	AK	Cl	NSButtonCell	im	int
setShowsStateBy:	AK	Cl	NSButtonCell	im	void	int
setButtonType:	AK	Cl	NSButtonCell	im	void	NSButtonType
isOpaque	AK	Cl	NSButtonCell	im	BOOL
setFont:	AK	Cl	NSButtonCell	im	void	NSFont *
isTransparent	AK	Cl	NSButtonCell	im	BOOL
setTransparent:	AK	Cl	NSButtonCell	im	void	BOOL
setPeriodicDelay:interval:	AK	Cl	NSButtonCell	im	void	float	float
getPeriodicDelay:interval:	AK	Cl	NSButtonCell	im	void	float *	float *
keyEquivalent	AK	Cl	NSButtonCell	im	NSString *
setKeyEquivalent:	AK	Cl	NSButtonCell	im	void	NSString *
keyEquivalentModifierMask	AK	Cl	NSButtonCell	im	unsigned int
setKeyEquivalentModifierMask:	AK	Cl	NSButtonCell	im	void	unsigned int
keyEquivalentFont	AK	Cl	NSButtonCell	im	NSFont *
setKeyEquivalentFont:	AK	Cl	NSButtonCell	im	void	NSFont *
setKeyEquivalentFont:size:	AK	Cl	NSButtonCell	im	void	NSString *	float
performClick:	AK	Cl	NSButtonCell	im	void	id
drawImage:withFrame:inView:	AK	Cl	NSButtonCell	im	void	NSImage *	NSRect	NSView *
drawTitle:withFrame:inView:	AK	Cl	NSButtonCell	im	NSRect	NSAttributedString *	NSRect	NSView *
drawBezelWithFrame:inView:	AK	Cl	NSButtonCell	im	void	NSRect	NSView *
setTitleWithMnemonic:	AK	Cl	NSButtonCell	im	void	NSString *
setAlternateTitleWithMnemonic:	AK	Cl	NSButtonCell	im	void	NSString *
setAlternateMnemonicLocation:	AK	Cl	NSButtonCell	im	void	unsigned
alternateMnemonicLocation	AK	Cl	NSButtonCell	im	unsigned
alternateMnemonic	AK	Cl	NSButtonCell	im	NSString *
gradientType	AK	Cl	NSButtonCell	im	NSGradientType
setGradientType:	AK	Cl	NSButtonCell	im	void	NSGradientType
setImageDimsWhenDisabled:	AK	Cl	NSButtonCell	im	void	BOOL
imageDimsWhenDisabled	AK	Cl	NSButtonCell	im	BOOL
setShowsBorderOnlyWhileMouseInside:	AK	Cl	NSButtonCell	im	void	BOOL
showsBorderOnlyWhileMouseInside	AK	Cl	NSButtonCell	im	BOOL
mouseEntered:	AK	Cl	NSButtonCell	im	void	NSEvent *
mouseExited:	AK	Cl	NSButtonCell	im	void	NSEvent *
backgroundColor	AK	Cl	NSButtonCell	im	NSColor *
setBackgroundColor:	AK	Cl	NSButtonCell	im	void	NSColor *
attributedTitle	AK	Cl	NSButtonCell	im	NSAttributedString *
setAttributedTitle:	AK	Cl	NSButtonCell	im	void	NSAttributedString *
attributedAlternateTitle	AK	Cl	NSButtonCell	im	NSAttributedString *
setAttributedAlternateTitle:	AK	Cl	NSButtonCell	im	void	NSAttributedString *
setBezelStyle:	AK	Cl	NSButtonCell	im	void	NSBezelStyle
bezelStyle	AK	Cl	NSButtonCell	im	NSBezelStyle
setSound:	AK	Cl	NSButtonCell	im	void	NSSound *
sound	AK	Cl	NSButtonCell	im	NSSound *
initWithWindow:rect:	AK	Cl	NSCachedImageRep	im	id	NSWindow *	NSRect
initWithSize:depth:separate:alpha:	AK	Cl	NSCachedImageRep	im	id	NSSize	NSWindowDepth	BOOL	BOOL
window	AK	Cl	NSCachedImageRep	im	NSWindow *
rect	AK	Cl	NSCachedImageRep	im	NSRect
prefersTrackingUntilMouseUp	AK	Cl	NSCell	cm	BOOL
initTextCell:	AK	Cl	NSCell	im	id	NSString *
initImageCell:	AK	Cl	NSCell	im	id	NSImage *
controlView	AK	Cl	NSCell	im	NSView *
setControlView:	AK	Cl	NSCell	im	void	NSView *
type	AK	Cl	NSCell	im	NSCellType
setType:	AK	Cl	NSCell	im	void	NSCellType
state	AK	Cl	NSCell	im	int
setState:	AK	Cl	NSCell	im	void	int
target	AK	Cl	NSCell	im	id
setTarget:	AK	Cl	NSCell	im	void	id
action	AK	Cl	NSCell	im	SEL
setAction:	AK	Cl	NSCell	im	void	SEL
tag	AK	Cl	NSCell	im	int
setTag:	AK	Cl	NSCell	im	void	int
title	AK	Cl	NSCell	im	NSString *
setTitle:	AK	Cl	NSCell	im	void	NSString *
isOpaque	AK	Cl	NSCell	im	BOOL
isEnabled	AK	Cl	NSCell	im	BOOL
setEnabled:	AK	Cl	NSCell	im	void	BOOL
sendActionOn:	AK	Cl	NSCell	im	int	int
isContinuous	AK	Cl	NSCell	im	BOOL
setContinuous:	AK	Cl	NSCell	im	void	BOOL
isEditable	AK	Cl	NSCell	im	BOOL
setEditable:	AK	Cl	NSCell	im	void	BOOL
isSelectable	AK	Cl	NSCell	im	BOOL
setSelectable:	AK	Cl	NSCell	im	void	BOOL
isBordered	AK	Cl	NSCell	im	BOOL
setBordered:	AK	Cl	NSCell	im	void	BOOL
isBezeled	AK	Cl	NSCell	im	BOOL
setBezeled:	AK	Cl	NSCell	im	void	BOOL
isScrollable	AK	Cl	NSCell	im	BOOL
setScrollable:	AK	Cl	NSCell	im	void	BOOL
isHighlighted	AK	Cl	NSCell	im	BOOL
setHighlighted:	AK	Cl	NSCell	im	void	BOOL
alignment	AK	Cl	NSCell	im	NSTextAlignment
setAlignment:	AK	Cl	NSCell	im	void	NSTextAlignment
wraps	AK	Cl	NSCell	im	BOOL
setWraps:	AK	Cl	NSCell	im	void	BOOL
font	AK	Cl	NSCell	im	NSFont *
setFont:	AK	Cl	NSCell	im	void	NSFont *
entryType	AK	Cl	NSCell	im	int
setEntryType:	AK	Cl	NSCell	im	void	int
isEntryAcceptable:	AK	Cl	NSCell	im	BOOL	NSString *
setFloatingPointFormat:left:right:	AK	Cl	NSCell	im	void	BOOL	unsigned	unsigned
keyEquivalent	AK	Cl	NSCell	im	NSString *
setFormatter:	AK	Cl	NSCell	im	void	NSFormatter *
formatter	AK	Cl	NSCell	im	id
objectValue	AK	Cl	NSCell	im	id
setObjectValue:	AK	Cl	NSCell	im	void	id <NSCopying>
hasValidObjectValue	AK	Cl	NSCell	im	BOOL
stringValue	AK	Cl	NSCell	im	NSString *
setStringValue:	AK	Cl	NSCell	im	void	NSString *
compare:	AK	Cl	NSCell	im	NSComparisonResult	id
intValue	AK	Cl	NSCell	im	int
setIntValue:	AK	Cl	NSCell	im	void	int
floatValue	AK	Cl	NSCell	im	float
setFloatValue:	AK	Cl	NSCell	im	void	float
doubleValue	AK	Cl	NSCell	im	double
setDoubleValue:	AK	Cl	NSCell	im	void	double
takeIntValueFrom:	AK	Cl	NSCell	im	void	id
takeFloatValueFrom:	AK	Cl	NSCell	im	void	id
takeDoubleValueFrom:	AK	Cl	NSCell	im	void	id
takeStringValueFrom:	AK	Cl	NSCell	im	void	id
takeObjectValueFrom:	AK	Cl	NSCell	im	void	id
image	AK	Cl	NSCell	im	NSImage *
setImage:	AK	Cl	NSCell	im	void	NSImage *
setControlTint:	AK	Cl	NSCell	im	void	NSControlTint
controlTint	AK	Cl	NSCell	im	NSControlTint
setControlSize:	AK	Cl	NSCell	im	void	NSControlSize
controlSize	AK	Cl	NSCell	im	NSControlSize
representedObject	AK	Cl	NSCell	im	id
setRepresentedObject:	AK	Cl	NSCell	im	void	id
cellAttribute:	AK	Cl	NSCell	im	int	NSCellAttribute
setCellAttribute:to:	AK	Cl	NSCell	im	void	NSCellAttribute	int
imageRectForBounds:	AK	Cl	NSCell	im	NSRect	NSRect
titleRectForBounds:	AK	Cl	NSCell	im	NSRect	NSRect
drawingRectForBounds:	AK	Cl	NSCell	im	NSRect	NSRect
cellSize	AK	Cl	NSCell	im	NSSize
cellSizeForBounds:	AK	Cl	NSCell	im	NSSize	NSRect
highlightColorWithFrame:inView:	AK	Cl	NSCell	im	NSColor *	NSRect	NSView *
calcDrawInfo:	AK	Cl	NSCell	im	void	NSRect
setUpFieldEditorAttributes:	AK	Cl	NSCell	im	NSText *	NSText *
drawInteriorWithFrame:inView:	AK	Cl	NSCell	im	void	NSRect	NSView *
drawWithFrame:inView:	AK	Cl	NSCell	im	void	NSRect	NSView *
highlight:withFrame:inView:	AK	Cl	NSCell	im	void	BOOL	NSRect	NSView *
mouseDownFlags	AK	Cl	NSCell	im	int
getPeriodicDelay:interval:	AK	Cl	NSCell	im	void	float *	float *
startTrackingAt:inView:	AK	Cl	NSCell	im	BOOL	NSPoint	NSView *
continueTracking:at:inView:	AK	Cl	NSCell	im	BOOL	NSPoint	NSPoint	NSView *
stopTracking:at:inView:mouseIsUp:	AK	Cl	NSCell	im	void	NSPoint	NSPoint	NSView *	BOOL
trackMouse:inRect:ofView:untilMouseUp:	AK	Cl	NSCell	im	BOOL	NSEvent *	NSRect	NSView *	BOOL
editWithFrame:inView:editor:delegate:event:	AK	Cl	NSCell	im	void	NSRect	NSView *	NSText *	id	NSEvent *
selectWithFrame:inView:editor:delegate:start:length:	AK	Cl	NSCell	im	void	NSRect	NSView *	NSText *	id	int	int
endEditing:	AK	Cl	NSCell	im	void	NSText *
resetCursorRect:inView:	AK	Cl	NSCell	im	void	NSRect	NSView *
setMenu:	AK	Cl	NSCell	im	void	NSMenu *
menu	AK	Cl	NSCell	im	NSMenu *
menuForEvent:inRect:ofView:	AK	Cl	NSCell	im	NSMenu *	NSEvent *	NSRect	NSView *
defaultMenu	AK	Cl	NSCell	cm	NSMenu *
setSendsActionOnEndEditing:	AK	Cl	NSCell	im	void	BOOL
sendsActionOnEndEditing	AK	Cl	NSCell	im	BOOL
baseWritingDirection	AK	Cl	NSCell	im	NSWritingDirection
setBaseWritingDirection:	AK	Cl	NSCell	im	void	NSWritingDirection
setLineBreakMode:	AK	Cl	NSCell	im	void	NSLineBreakMode
lineBreakMode	AK	Cl	NSCell	im	NSLineBreakMode
setAllowsUndo:	AK	Cl	NSCell	im	void	BOOL
allowsUndo	AK	Cl	NSCell	im	BOOL
setRefusesFirstResponder:	AK	Cl	NSCell	im	void	BOOL
refusesFirstResponder	AK	Cl	NSCell	im	BOOL
acceptsFirstResponder	AK	Cl	NSCell	im	BOOL
setShowsFirstResponder:	AK	Cl	NSCell	im	void	BOOL
showsFirstResponder	AK	Cl	NSCell	im	BOOL
setMnemonicLocation:	AK	Cl	NSCell	im	void	unsigned
mnemonicLocation	AK	Cl	NSCell	im	unsigned
mnemonic	AK	Cl	NSCell	im	NSString *
setTitleWithMnemonic:	AK	Cl	NSCell	im	void	NSString *
performClick:	AK	Cl	NSCell	im	void	id
setFocusRingType:	AK	Cl	NSCell	im	void	NSFocusRingType
focusRingType	AK	Cl	NSCell	im	NSFocusRingType
defaultFocusRingType	AK	Cl	NSCell	cm	NSFocusRingType
attributedStringValue	AK	Cl	NSCell	im	NSAttributedString *
setAttributedStringValue:	AK	Cl	NSCell	im	void	NSAttributedString *
allowsEditingTextAttributes	AK	Cl	NSCell	im	BOOL
setAllowsEditingTextAttributes:	AK	Cl	NSCell	im	void	BOOL
importsGraphics	AK	Cl	NSCell	im	BOOL
setImportsGraphics:	AK	Cl	NSCell	im	void	BOOL
setAllowsMixedState:	AK	Cl	NSCell	im	void	BOOL
allowsMixedState	AK	Cl	NSCell	im	BOOL
nextState	AK	Cl	NSCell	im	int
setNextState	AK	Cl	NSCell	im	void
imageRepWithCIImage:	AK	Cl	NSCIImageRep	cm	id	CIImage *
initWithCIImage:	AK	Cl	NSCIImageRep	im	id	CIImage *
CIImage	AK	Cl	NSCIImageRep	im	CIImage *
initWithBitmapImageRep:	AK	Cl	CIImage;NSCIImageRep	im	id	NSBitmapImageRep *
drawInRect:fromRect:operation:fraction:	AK	Cl	CIImage;NSCIImageRep	im	void	NSRect	NSRect	NSCompositingOperation	float
drawAtPoint:fromRect:operation:fraction:	AK	Cl	CIImage;NSCIImageRep	im	void	NSPoint	NSRect	NSCompositingOperation	float
setBackgroundColor:	AK	Cl	NSClipView	im	void	NSColor *
backgroundColor	AK	Cl	NSClipView	im	NSColor *
setDrawsBackground:	AK	Cl	NSClipView	im	void	BOOL
drawsBackground	AK	Cl	NSClipView	im	BOOL
setDocumentView:	AK	Cl	NSClipView	im	void	NSView *
documentView	AK	Cl	NSClipView	im	id
documentRect	AK	Cl	NSClipView	im	NSRect
setDocumentCursor:	AK	Cl	NSClipView	im	void	NSCursor *
documentCursor	AK	Cl	NSClipView	im	NSCursor *
documentVisibleRect	AK	Cl	NSClipView	im	NSRect
viewFrameChanged:	AK	Cl	NSClipView	im	void	NSNotification *
viewBoundsChanged:	AK	Cl	NSClipView	im	void	NSNotification *
setCopiesOnScroll:	AK	Cl	NSClipView	im	void	BOOL
copiesOnScroll	AK	Cl	NSClipView	im	BOOL
autoscroll:	AK	Cl	NSClipView	im	BOOL	NSEvent *
constrainScrollPoint:	AK	Cl	NSClipView	im	NSPoint	NSPoint
scrollToPoint:	AK	Cl	NSClipView	im	void	NSPoint
reflectScrolledClipView:	AK	Cl	NSView;NSClipView	im	void	NSClipView *
scrollClipView:toPoint:	AK	Cl	NSView;NSClipView	im	void	NSClipView *	NSPoint
colorWithCalibratedWhite:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float
colorWithCalibratedHue:saturation:brightness:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float	float	float
colorWithCalibratedRed:green:blue:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float	float	float
colorWithDeviceWhite:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float
colorWithDeviceHue:saturation:brightness:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float	float	float
colorWithDeviceRed:green:blue:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float	float	float
colorWithDeviceCyan:magenta:yellow:black:alpha:	AK	Cl	NSColor	cm	NSColor *	float	float	float	float	float
colorWithCatalogName:colorName:	AK	Cl	NSColor	cm	NSColor *	NSString *	NSString *
colorWithColorSpace:components:count:	AK	Cl	NSColor	cm	NSColor *	NSColorSpace *	const float *	int
blackColor	AK	Cl	NSColor	cm	NSColor *
darkGrayColor	AK	Cl	NSColor	cm	NSColor *
lightGrayColor	AK	Cl	NSColor	cm	NSColor *
whiteColor	AK	Cl	NSColor	cm	NSColor *
grayColor	AK	Cl	NSColor	cm	NSColor *
redColor	AK	Cl	NSColor	cm	NSColor *
greenColor	AK	Cl	NSColor	cm	NSColor *
blueColor	AK	Cl	NSColor	cm	NSColor *
cyanColor	AK	Cl	NSColor	cm	NSColor *
yellowColor	AK	Cl	NSColor	cm	NSColor *
magentaColor	AK	Cl	NSColor	cm	NSColor *
orangeColor	AK	Cl	NSColor	cm	NSColor *
purpleColor	AK	Cl	NSColor	cm	NSColor *
brownColor	AK	Cl	NSColor	cm	NSColor *
clearColor	AK	Cl	NSColor	cm	NSColor *
controlShadowColor	AK	Cl	NSColor	cm	NSColor *
controlDarkShadowColor	AK	Cl	NSColor	cm	NSColor *
controlColor	AK	Cl	NSColor	cm	NSColor *
controlHighlightColor	AK	Cl	NSColor	cm	NSColor *
controlLightHighlightColor	AK	Cl	NSColor	cm	NSColor *
controlTextColor	AK	Cl	NSColor	cm	NSColor *
controlBackgroundColor	AK	Cl	NSColor	cm	NSColor *
selectedControlColor	AK	Cl	NSColor	cm	NSColor *
secondarySelectedControlColor	AK	Cl	NSColor	cm	NSColor *
selectedControlTextColor	AK	Cl	NSColor	cm	NSColor *
disabledControlTextColor	AK	Cl	NSColor	cm	NSColor *
textColor	AK	Cl	NSColor	cm	NSColor *
textBackgroundColor	AK	Cl	NSColor	cm	NSColor *
selectedTextColor	AK	Cl	NSColor	cm	NSColor *
selectedTextBackgroundColor	AK	Cl	NSColor	cm	NSColor *
gridColor	AK	Cl	NSColor	cm	NSColor *
keyboardFocusIndicatorColor	AK	Cl	NSColor	cm	NSColor *
windowBackgroundColor	AK	Cl	NSColor	cm	NSColor *
scrollBarColor	AK	Cl	NSColor	cm	NSColor *
knobColor	AK	Cl	NSColor	cm	NSColor *
selectedKnobColor	AK	Cl	NSColor	cm	NSColor *
windowFrameColor	AK	Cl	NSColor	cm	NSColor *
windowFrameTextColor	AK	Cl	NSColor	cm	NSColor *
selectedMenuItemColor	AK	Cl	NSColor	cm	NSColor *
selectedMenuItemTextColor	AK	Cl	NSColor	cm	NSColor *
highlightColor	AK	Cl	NSColor	cm	NSColor *
shadowColor	AK	Cl	NSColor	cm	NSColor *
headerColor	AK	Cl	NSColor	cm	NSColor *
headerTextColor	AK	Cl	NSColor	cm	NSColor *
alternateSelectedControlColor	AK	Cl	NSColor	cm	NSColor *
alternateSelectedControlTextColor	AK	Cl	NSColor	cm	NSColor *
controlAlternatingRowBackgroundColors	AK	Cl	NSColor	cm	NSArray *
highlightWithLevel:	AK	Cl	NSColor	im	NSColor *	float
shadowWithLevel:	AK	Cl	NSColor	im	NSColor *	float
colorForControlTint:	AK	Cl	NSColor	cm	NSColor *	NSControlTint
currentControlTint	AK	Cl	NSColor	cm	NSControlTint
set	AK	Cl	NSColor	im	void
setFill	AK	Cl	NSColor	im	void
setStroke	AK	Cl	NSColor	im	void
colorSpaceName	AK	Cl	NSColor	im	NSString *
colorUsingColorSpaceName:	AK	Cl	NSColor	im	NSColor *	NSString *
colorUsingColorSpaceName:device:	AK	Cl	NSColor	im	NSColor *	NSString *	NSDictionary *
colorUsingColorSpace:	AK	Cl	NSColor	im	NSColor *	NSColorSpace *
blendedColorWithFraction:ofColor:	AK	Cl	NSColor	im	NSColor *	float	NSColor *
colorWithAlphaComponent:	AK	Cl	NSColor	im	NSColor *	float
catalogNameComponent	AK	Cl	NSColor	im	NSString *
colorNameComponent	AK	Cl	NSColor	im	NSString *
localizedCatalogNameComponent	AK	Cl	NSColor	im	NSString *
localizedColorNameComponent	AK	Cl	NSColor	im	NSString *
redComponent	AK	Cl	NSColor	im	float
greenComponent	AK	Cl	NSColor	im	float
blueComponent	AK	Cl	NSColor	im	float
getRed:green:blue:alpha:	AK	Cl	NSColor	im	void	float *	float *	float *	float *
hueComponent	AK	Cl	NSColor	im	float
saturationComponent	AK	Cl	NSColor	im	float
brightnessComponent	AK	Cl	NSColor	im	float
getHue:saturation:brightness:alpha:	AK	Cl	NSColor	im	void	float *	float *	float *	float *
whiteComponent	AK	Cl	NSColor	im	float
getWhite:alpha:	AK	Cl	NSColor	im	void	float *	float *
cyanComponent	AK	Cl	NSColor	im	float
magentaComponent	AK	Cl	NSColor	im	float
yellowComponent	AK	Cl	NSColor	im	float
blackComponent	AK	Cl	NSColor	im	float
getCyan:magenta:yellow:black:alpha:	AK	Cl	NSColor	im	void	float *	float *	float *	float *	float *
colorSpace	AK	Cl	NSColor	im	NSColorSpace *
numberOfComponents	AK	Cl	NSColor	im	int
getComponents:	AK	Cl	NSColor	im	void	float *
alphaComponent	AK	Cl	NSColor	im	float
colorFromPasteboard:	AK	Cl	NSColor	cm	NSColor *	NSPasteboard *
writeToPasteboard:	AK	Cl	NSColor	im	void	NSPasteboard *
colorWithPatternImage:	AK	Cl	NSColor	cm	NSColor *	NSImage *
patternImage	AK	Cl	NSColor	im	NSImage *
drawSwatchInRect:	AK	Cl	NSColor	im	void	NSRect
setIgnoresAlpha:	AK	Cl	NSColor	cm	void	BOOL
ignoresAlpha	AK	Cl	NSColor	cm	BOOL
colorWithCIColor:	AK	Cl	NSColor	cm	NSColor *	CIColor *
initWithColor:	AK	Cl	CIColor;NSColor	im	id	NSColor *
decodeNXColor	AK	Cl	NSCoder;NSColor	im	NSColor *
availableColorLists	AK	Cl	NSColorList	cm	NSArray *
colorListNamed:	AK	Cl	NSColorList	cm	NSColorList *	NSString *
initWithName:	AK	Cl	NSColorList	im	id	NSString *
initWithName:fromFile:	AK	Cl	NSColorList	im	id	NSString *	NSString *
name	AK	Cl	NSColorList	im	NSString *
setColor:forKey:	AK	Cl	NSColorList	im	void	NSColor *	NSString *
insertColor:key:atIndex:	AK	Cl	NSColorList	im	void	NSColor *	NSString *	unsigned
removeColorWithKey:	AK	Cl	NSColorList	im	void	NSString *
colorWithKey:	AK	Cl	NSColorList	im	NSColor *	NSString *
allKeys	AK	Cl	NSColorList	im	NSArray *
isEditable	AK	Cl	NSColorList	im	BOOL
writeToFile:	AK	Cl	NSColorList	im	BOOL	NSString *
removeFile	AK	Cl	NSColorList	im	void
sharedColorPanel	AK	Cl	NSColorPanel	cm	NSColorPanel *
sharedColorPanelExists	AK	Cl	NSColorPanel	cm	BOOL
dragColor:withEvent:fromView:	AK	Cl	NSColorPanel	cm	BOOL	NSColor *	NSEvent *	NSView *
setPickerMask:	AK	Cl	NSColorPanel	cm	void	int
setPickerMode:	AK	Cl	NSColorPanel	cm	void	int
setAccessoryView:	AK	Cl	NSColorPanel	im	void	NSView *
accessoryView	AK	Cl	NSColorPanel	im	NSView *
setContinuous:	AK	Cl	NSColorPanel	im	void	BOOL
isContinuous	AK	Cl	NSColorPanel	im	BOOL
setShowsAlpha:	AK	Cl	NSColorPanel	im	void	BOOL
showsAlpha	AK	Cl	NSColorPanel	im	BOOL
setMode:	AK	Cl	NSColorPanel	im	void	int
mode	AK	Cl	NSColorPanel	im	int
setColor:	AK	Cl	NSColorPanel	im	void	NSColor *
color	AK	Cl	NSColorPanel	im	NSColor *
alpha	AK	Cl	NSColorPanel	im	float
setAction:	AK	Cl	NSColorPanel	im	void	SEL
setTarget:	AK	Cl	NSColorPanel	im	void	id
attachColorList:	AK	Cl	NSColorPanel	im	void	NSColorList *
detachColorList:	AK	Cl	NSColorPanel	im	void	NSColorList *
orderFrontColorPanel:	AK	Cl	NSApplication;NSColorPanel	im	void	id
changeColor:	AK	Cl	NSObject;NSColorPanel	im	void	id
initWithPickerMask:colorPanel:	AK	Cl	NSColorPicker	im	id	int	NSColorPanel *
colorPanel	AK	Cl	NSColorPicker	im	NSColorPanel *
provideNewButtonImage	AK	Cl	NSColorPicker	im	NSImage *
insertNewButtonImage:in:	AK	Cl	NSColorPicker	im	void	NSImage *	NSButtonCell *
viewSizeChanged:	AK	Cl	NSColorPicker	im	void	id
attachColorList:	AK	Cl	NSColorPicker	im	void	NSColorList *
detachColorList:	AK	Cl	NSColorPicker	im	void	NSColorList *
setMode:	AK	Cl	NSColorPicker	im	void	int
initWithPickerMask:colorPanel:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	id	int	NSColorPanel *
provideNewButtonImage	AK	Pr	NSColorPickingDefault;NSColorPicking	im	NSImage *
insertNewButtonImage:in:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	void	NSImage *	NSButtonCell *
viewSizeChanged:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	void	id
alphaControlAddedOrRemoved:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	void	id
attachColorList:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	void	NSColorList *
detachColorList:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	void	NSColorList *
setMode:	AK	Pr	NSColorPickingDefault;NSColorPicking	im	void	int
supportsMode:	AK	Pr	NSColorPickingCustom;NSColorPicking	im	BOOL	int
currentMode	AK	Pr	NSColorPickingCustom;NSColorPicking	im	int
provideNewView:	AK	Pr	NSColorPickingCustom;NSColorPicking	im	NSView *	BOOL
setColor:	AK	Pr	NSColorPickingCustom;NSColorPicking	im	void	NSColor *
initWithICCProfileData:	AK	Cl	NSColorSpace	im	id	NSData *
ICCProfileData	AK	Cl	NSColorSpace	im	NSData *
initWithColorSyncProfile:	AK	Cl	NSColorSpace	im	id	void * /* CMProfileRef */
colorSyncProfile	AK	Cl	NSColorSpace	im	void * /* CMProfileRef */
numberOfColorComponents	AK	Cl	NSColorSpace	im	int
colorSpaceModel	AK	Cl	NSColorSpace	im	NSColorSpaceModel
localizedName	AK	Cl	NSColorSpace	im	NSString *
genericRGBColorSpace	AK	Cl	NSColorSpace	cm	NSColorSpace *
genericGrayColorSpace	AK	Cl	NSColorSpace	cm	NSColorSpace *
genericCMYKColorSpace	AK	Cl	NSColorSpace	cm	NSColorSpace *
deviceRGBColorSpace	AK	Cl	NSColorSpace	cm	NSColorSpace *
deviceGrayColorSpace	AK	Cl	NSColorSpace	cm	NSColorSpace *
deviceCMYKColorSpace	AK	Cl	NSColorSpace	cm	NSColorSpace *
deactivate	AK	Cl	NSColorWell	im	void
activate:	AK	Cl	NSColorWell	im	void	BOOL
isActive	AK	Cl	NSColorWell	im	BOOL
drawWellInside:	AK	Cl	NSColorWell	im	void	NSRect
isBordered	AK	Cl	NSColorWell	im	BOOL
setBordered:	AK	Cl	NSColorWell	im	void	BOOL
takeColorFrom:	AK	Cl	NSColorWell	im	void	id
setColor:	AK	Cl	NSColorWell	im	void	NSColor *
color	AK	Cl	NSColorWell	im	NSColor *
hasVerticalScroller	AK	Cl	NSComboBox	im	BOOL
setHasVerticalScroller:	AK	Cl	NSComboBox	im	void	BOOL
intercellSpacing	AK	Cl	NSComboBox	im	NSSize
setIntercellSpacing:	AK	Cl	NSComboBox	im	void	NSSize
itemHeight	AK	Cl	NSComboBox	im	float
setItemHeight:	AK	Cl	NSComboBox	im	void	float
numberOfVisibleItems	AK	Cl	NSComboBox	im	int
setNumberOfVisibleItems:	AK	Cl	NSComboBox	im	void	int
setButtonBordered:	AK	Cl	NSComboBox	im	void	BOOL
isButtonBordered	AK	Cl	NSComboBox	im	BOOL
reloadData	AK	Cl	NSComboBox	im	void
noteNumberOfItemsChanged	AK	Cl	NSComboBox	im	void
setUsesDataSource:	AK	Cl	NSComboBox	im	void	BOOL
usesDataSource	AK	Cl	NSComboBox	im	BOOL
scrollItemAtIndexToTop:	AK	Cl	NSComboBox	im	void	int
scrollItemAtIndexToVisible:	AK	Cl	NSComboBox	im	void	int
selectItemAtIndex:	AK	Cl	NSComboBox	im	void	int
deselectItemAtIndex:	AK	Cl	NSComboBox	im	void	int
indexOfSelectedItem	AK	Cl	NSComboBox	im	int
numberOfItems	AK	Cl	NSComboBox	im	int
completes	AK	Cl	NSComboBox	im	BOOL
setCompletes:	AK	Cl	NSComboBox	im	void	BOOL
dataSource	AK	Cl	NSComboBox	im	id
setDataSource:	AK	Cl	NSComboBox	im	void	id
addItemWithObjectValue:	AK	Cl	NSComboBox	im	void	id
addItemsWithObjectValues:	AK	Cl	NSComboBox	im	void	NSArray *
insertItemWithObjectValue:atIndex:	AK	Cl	NSComboBox	im	void	id	int
removeItemWithObjectValue:	AK	Cl	NSComboBox	im	void	id
removeItemAtIndex:	AK	Cl	NSComboBox	im	void	int
removeAllItems	AK	Cl	NSComboBox	im	void
selectItemWithObjectValue:	AK	Cl	NSComboBox	im	void	id
itemObjectValueAtIndex:	AK	Cl	NSComboBox	im	id	int
objectValueOfSelectedItem	AK	Cl	NSComboBox	im	id
indexOfItemWithObjectValue:	AK	Cl	NSComboBox	im	int	id
objectValues	AK	Cl	NSComboBox	im	NSArray *
numberOfItemsInComboBox:	AK	Cl	NSObject;NSComboBox	im	int	NSComboBox *
comboBox:objectValueForItemAtIndex:	AK	Cl	NSObject;NSComboBox	im	id	NSComboBox *	int
comboBox:indexOfItemWithStringValue:	AK	Cl	NSObject;NSComboBox	im	unsigned int	NSComboBox *	NSString *
comboBox:completedString:	AK	Cl	NSObject;NSComboBox	im	NSString *	NSComboBox *	NSString *
comboBoxWillPopUp:	AK	Cl	NSObject;NSComboBox	im	void	NSNotification *
comboBoxWillDismiss:	AK	Cl	NSObject;NSComboBox	im	void	NSNotification *
comboBoxSelectionDidChange:	AK	Cl	NSObject;NSComboBox	im	void	NSNotification *
comboBoxSelectionIsChanging:	AK	Cl	NSObject;NSComboBox	im	void	NSNotification *
hasVerticalScroller	AK	Cl	NSComboBoxCell	im	BOOL
setHasVerticalScroller:	AK	Cl	NSComboBoxCell	im	void	BOOL
intercellSpacing	AK	Cl	NSComboBoxCell	im	NSSize
setIntercellSpacing:	AK	Cl	NSComboBoxCell	im	void	NSSize
itemHeight	AK	Cl	NSComboBoxCell	im	float
setItemHeight:	AK	Cl	NSComboBoxCell	im	void	float
numberOfVisibleItems	AK	Cl	NSComboBoxCell	im	int
setNumberOfVisibleItems:	AK	Cl	NSComboBoxCell	im	void	int
setButtonBordered:	AK	Cl	NSComboBoxCell	im	void	BOOL
isButtonBordered	AK	Cl	NSComboBoxCell	im	BOOL
reloadData	AK	Cl	NSComboBoxCell	im	void
noteNumberOfItemsChanged	AK	Cl	NSComboBoxCell	im	void
setUsesDataSource:	AK	Cl	NSComboBoxCell	im	void	BOOL
usesDataSource	AK	Cl	NSComboBoxCell	im	BOOL
scrollItemAtIndexToTop:	AK	Cl	NSComboBoxCell	im	void	int
scrollItemAtIndexToVisible:	AK	Cl	NSComboBoxCell	im	void	int
selectItemAtIndex:	AK	Cl	NSComboBoxCell	im	void	int
deselectItemAtIndex:	AK	Cl	NSComboBoxCell	im	void	int
indexOfSelectedItem	AK	Cl	NSComboBoxCell	im	int
numberOfItems	AK	Cl	NSComboBoxCell	im	int
completes	AK	Cl	NSComboBoxCell	im	BOOL
setCompletes:	AK	Cl	NSComboBoxCell	im	void	BOOL
completedString:	AK	Cl	NSComboBoxCell	im	NSString *	NSString *
dataSource	AK	Cl	NSComboBoxCell	im	id
setDataSource:	AK	Cl	NSComboBoxCell	im	void	id
addItemWithObjectValue:	AK	Cl	NSComboBoxCell	im	void	id
addItemsWithObjectValues:	AK	Cl	NSComboBoxCell	im	void	NSArray *
insertItemWithObjectValue:atIndex:	AK	Cl	NSComboBoxCell	im	void	id	int
removeItemWithObjectValue:	AK	Cl	NSComboBoxCell	im	void	id
removeItemAtIndex:	AK	Cl	NSComboBoxCell	im	void	int
removeAllItems	AK	Cl	NSComboBoxCell	im	void
selectItemWithObjectValue:	AK	Cl	NSComboBoxCell	im	void	id
itemObjectValueAtIndex:	AK	Cl	NSComboBoxCell	im	id	int
objectValueOfSelectedItem	AK	Cl	NSComboBoxCell	im	id
indexOfItemWithObjectValue:	AK	Cl	NSComboBoxCell	im	int	id
objectValues	AK	Cl	NSComboBoxCell	im	NSArray *
numberOfItemsInComboBoxCell:	AK	Cl	NSObject;NSComboBoxCell	im	int	NSComboBoxCell *
comboBoxCell:objectValueForItemAtIndex:	AK	Cl	NSObject;NSComboBoxCell	im	id	NSComboBoxCell *	int
comboBoxCell:indexOfItemWithStringValue:	AK	Cl	NSObject;NSComboBoxCell	im	unsigned int	NSComboBoxCell *	NSString *
comboBoxCell:completedString:	AK	Cl	NSObject;NSComboBoxCell	im	NSString *	NSComboBoxCell *	NSString *
setCellClass:	AK	Cl	NSControl	cm	void	Class
cellClass	AK	Cl	NSControl	cm	Class
initWithFrame:	AK	Cl	NSControl	im	id	NSRect
sizeToFit	AK	Cl	NSControl	im	void
calcSize	AK	Cl	NSControl	im	void
cell	AK	Cl	NSControl	im	id
setCell:	AK	Cl	NSControl	im	void	NSCell *
selectedCell	AK	Cl	NSControl	im	id
target	AK	Cl	NSControl	im	id
setTarget:	AK	Cl	NSControl	im	void	id
action	AK	Cl	NSControl	im	SEL
setAction:	AK	Cl	NSControl	im	void	SEL
tag	AK	Cl	NSControl	im	int
setTag:	AK	Cl	NSControl	im	void	int
selectedTag	AK	Cl	NSControl	im	int
setIgnoresMultiClick:	AK	Cl	NSControl	im	void	BOOL
ignoresMultiClick	AK	Cl	NSControl	im	BOOL
sendActionOn:	AK	Cl	NSControl	im	int	int
isContinuous	AK	Cl	NSControl	im	BOOL
setContinuous:	AK	Cl	NSControl	im	void	BOOL
isEnabled	AK	Cl	NSControl	im	BOOL
setEnabled:	AK	Cl	NSControl	im	void	BOOL
setFloatingPointFormat:left:right:	AK	Cl	NSControl	im	void	BOOL	unsigned	unsigned
alignment	AK	Cl	NSControl	im	NSTextAlignment
setAlignment:	AK	Cl	NSControl	im	void	NSTextAlignment
font	AK	Cl	NSControl	im	NSFont *
setFont:	AK	Cl	NSControl	im	void	NSFont *
setFormatter:	AK	Cl	NSControl	im	void	NSFormatter *
formatter	AK	Cl	NSControl	im	id
setObjectValue:	AK	Cl	NSControl	im	void	id<NSCopying>
setStringValue:	AK	Cl	NSControl	im	void	NSString *
setIntValue:	AK	Cl	NSControl	im	void	int
setFloatValue:	AK	Cl	NSControl	im	void	float
setDoubleValue:	AK	Cl	NSControl	im	void	double
objectValue	AK	Cl	NSControl	im	id
stringValue	AK	Cl	NSControl	im	NSString *
intValue	AK	Cl	NSControl	im	int
floatValue	AK	Cl	NSControl	im	float
doubleValue	AK	Cl	NSControl	im	double
setNeedsDisplay	AK	Cl	NSControl	im	void
updateCell:	AK	Cl	NSControl	im	void	NSCell *
updateCellInside:	AK	Cl	NSControl	im	void	NSCell *
drawCellInside:	AK	Cl	NSControl	im	void	NSCell *
drawCell:	AK	Cl	NSControl	im	void	NSCell *
selectCell:	AK	Cl	NSControl	im	void	NSCell *
sendAction:to:	AK	Cl	NSControl	im	BOOL	SEL	id
takeIntValueFrom:	AK	Cl	NSControl	im	void	id
takeFloatValueFrom:	AK	Cl	NSControl	im	void	id
takeDoubleValueFrom:	AK	Cl	NSControl	im	void	id
takeStringValueFrom:	AK	Cl	NSControl	im	void	id
takeObjectValueFrom:	AK	Cl	NSControl	im	void	id
currentEditor	AK	Cl	NSControl	im	NSText *
abortEditing	AK	Cl	NSControl	im	BOOL
validateEditing	AK	Cl	NSControl	im	void
mouseDown:	AK	Cl	NSControl	im	void	NSEvent *
baseWritingDirection	AK	Cl	NSControl	im	NSWritingDirection
setBaseWritingDirection:	AK	Cl	NSControl	im	void	NSWritingDirection
performClick:	AK	Cl	NSControl	im	void
setRefusesFirstResponder:	AK	Cl	NSControl	im	void	BOOL
refusesFirstResponder	AK	Cl	NSControl	im	BOOL
controlTextDidBeginEditing:	AK	Cl	NSObject;NSControl	im	void	NSNotification *
controlTextDidEndEditing:	AK	Cl	NSObject;NSControl	im	void	NSNotification *
controlTextDidChange:	AK	Cl	NSObject;NSControl	im	void	NSNotification *
control:textShouldBeginEditing:	AK	Cl	NSObject;NSControl	dm	BOOL	NSControl *	NSText *
control:textShouldEndEditing:	AK	Cl	NSObject;NSControl	dm	BOOL	NSControl *	NSText *
control:didFailToFormatString:errorDescription:	AK	Cl	NSObject;NSControl	dm	BOOL	NSControl *	NSString *	NSString *
control:didFailToValidatePartialString:errorDescription:	AK	Cl	NSObject;NSControl	dm	void	NSControl *	NSString *	NSString *
control:isValidObject:	AK	Cl	NSObject;NSControl	dm	BOOL	NSControl *	id
control:textView:doCommandBySelector:	AK	Cl	NSObject;NSControl	dm	BOOL	NSControl *	NSTextView *	SEL
control:textView:completions:forPartialWordRange:indexOfSelectedItem:	AK	Cl	NSObject;NSControl	dm	NSArray *	NSControl *	NSTextView *	NSArray *	NSRange	int *
attributedStringValue	AK	Cl	NSControl	dm	NSAttributedString *
setAttributedStringValue:	AK	Cl	NSControl	dm	void	NSAttributedString *
objectDidBeginEditing:	AK	Cl	NSController	im	void	id
objectDidEndEditing:	AK	Cl	NSController	im	void	id
discardEditing	AK	Cl	NSController	im	void
commitEditing	AK	Cl	NSController	im	BOOL
commitEditingWithDelegate:didCommitSelector:contextInfo:	AK	Cl	NSController	im	void	id	SEL	void *
isEditing	AK	Cl	NSController	im	BOOL
currentCursor	AK	Cl	NSCursor	cm	NSCursor *
arrowCursor	AK	Cl	NSCursor	cm	NSCursor *
IBeamCursor	AK	Cl	NSCursor	cm	NSCursor *
pointingHandCursor	AK	Cl	NSCursor	cm	NSCursor *
closedHandCursor	AK	Cl	NSCursor	cm	NSCursor *
openHandCursor	AK	Cl	NSCursor	cm	NSCursor *
resizeLeftCursor	AK	Cl	NSCursor	cm	NSCursor *
resizeRightCursor	AK	Cl	NSCursor	cm	NSCursor *
resizeLeftRightCursor	AK	Cl	NSCursor	cm	NSCursor *
resizeUpCursor	AK	Cl	NSCursor	cm	NSCursor *
resizeDownCursor	AK	Cl	NSCursor	cm	NSCursor *
resizeUpDownCursor	AK	Cl	NSCursor	cm	NSCursor *
crosshairCursor	AK	Cl	NSCursor	cm	NSCursor *
disappearingItemCursor	AK	Cl	NSCursor	cm	NSCursor *
initWithImage:hotSpot:	AK	Cl	NSCursor	im	id	NSImage *	NSPoint
initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:	AK	Cl	NSCursor	im	id	NSImage *	NSColor *	NSColor *	NSPoint
hide	AK	Cl	NSCursor	cm	void
unhide	AK	Cl	NSCursor	cm	void
setHiddenUntilMouseMoves:	AK	Cl	NSCursor	cm	void	BOOL
pop	AK	Cl	NSCursor	cm	void
image	AK	Cl	NSCursor	im	NSImage *
hotSpot	AK	Cl	NSCursor	im	NSPoint
push	AK	Cl	NSCursor	im	void
pop	AK	Cl	NSCursor	im	void
set	AK	Cl	NSCursor	im	void
setOnMouseExited:	AK	Cl	NSCursor	im	void	BOOL
setOnMouseEntered:	AK	Cl	NSCursor	im	void	BOOL
isSetOnMouseExited	AK	Cl	NSCursor	im	BOOL
isSetOnMouseEntered	AK	Cl	NSCursor	im	BOOL
mouseEntered:	AK	Cl	NSCursor	im	void	NSEvent *
mouseExited:	AK	Cl	NSCursor	im	void	NSEvent *
initWithDrawSelector:delegate:	AK	Cl	NSCustomImageRep	im	id	SEL	id
drawSelector	AK	Cl	NSCustomImageRep	im	SEL
delegate	AK	Cl	NSCustomImageRep	im	id
datePickerStyle	AK	Cl	NSDatePicker	im	NSDatePickerStyle
setDatePickerStyle:	AK	Cl	NSDatePicker	im	void	NSDatePickerStyle
isBezeled	AK	Cl	NSDatePicker	im	BOOL
setBezeled:	AK	Cl	NSDatePicker	im	void	BOOL
isBordered	AK	Cl	NSDatePicker	im	BOOL
setBordered:	AK	Cl	NSDatePicker	im	void	BOOL
drawsBackground	AK	Cl	NSDatePicker	im	BOOL
setDrawsBackground:	AK	Cl	NSDatePicker	im	void	BOOL
backgroundColor	AK	Cl	NSDatePicker	im	NSColor *
setBackgroundColor:	AK	Cl	NSDatePicker	im	void	NSColor *
textColor	AK	Cl	NSDatePicker	im	NSColor *
setTextColor:	AK	Cl	NSDatePicker	im	void	NSColor *
datePickerMode	AK	Cl	NSDatePicker	im	NSDatePickerMode
setDatePickerMode:	AK	Cl	NSDatePicker	im	void	NSDatePickerMode
datePickerElements	AK	Cl	NSDatePicker	im	NSDatePickerElementFlags
setDatePickerElements:	AK	Cl	NSDatePicker	im	void	unsigned
calendar	AK	Cl	NSDatePicker	im	NSCalendar *
setCalendar:	AK	Cl	NSDatePicker	im	void	NSCalendar *
locale	AK	Cl	NSDatePicker	im	NSLocale *
setLocale:	AK	Cl	NSDatePicker	im	void	NSLocale *
timeZone	AK	Cl	NSDatePicker	im	NSTimeZone *
setTimeZone:	AK	Cl	NSDatePicker	im	void	NSTimeZone *
dateValue	AK	Cl	NSDatePicker	im	NSDate *
setDateValue:	AK	Cl	NSDatePicker	im	void	NSDate *
timeInterval	AK	Cl	NSDatePicker	im	NSTimeInterval
setTimeInterval:	AK	Cl	NSDatePicker	im	void	NSTimeInterval
minDate	AK	Cl	NSDatePicker	im	NSDate *
setMinDate:	AK	Cl	NSDatePicker	im	void	NSDate *
maxDate	AK	Cl	NSDatePicker	im	NSDate *
setMaxDate:	AK	Cl	NSDatePicker	im	void	NSDate *
delegate	AK	Cl	NSDatePicker	im	id
setDelegate:	AK	Cl	NSDatePicker	im	void	id
datePickerStyle	AK	Cl	NSDatePickerCell	im	NSDatePickerStyle
setDatePickerStyle:	AK	Cl	NSDatePickerCell	im	void	NSDatePickerStyle
drawsBackground	AK	Cl	NSDatePickerCell	im	BOOL
setDrawsBackground:	AK	Cl	NSDatePickerCell	im	void	BOOL
backgroundColor	AK	Cl	NSDatePickerCell	im	NSColor *
setBackgroundColor:	AK	Cl	NSDatePickerCell	im	void	NSColor *
textColor	AK	Cl	NSDatePickerCell	im	NSColor *
setTextColor:	AK	Cl	NSDatePickerCell	im	void	NSColor *
datePickerMode	AK	Cl	NSDatePickerCell	im	NSDatePickerMode
setDatePickerMode:	AK	Cl	NSDatePickerCell	im	void	NSDatePickerMode
datePickerElements	AK	Cl	NSDatePickerCell	im	NSDatePickerElementFlags
setDatePickerElements:	AK	Cl	NSDatePickerCell	im	void	unsigned
calendar	AK	Cl	NSDatePickerCell	im	NSCalendar *
setCalendar:	AK	Cl	NSDatePickerCell	im	void	NSCalendar *
locale	AK	Cl	NSDatePickerCell	im	NSLocale *
setLocale:	AK	Cl	NSDatePickerCell	im	void	NSLocale *
timeZone	AK	Cl	NSDatePickerCell	im	NSTimeZone *
setTimeZone:	AK	Cl	NSDatePickerCell	im	void	NSTimeZone *
dateValue	AK	Cl	NSDatePickerCell	im	NSDate *
setDateValue:	AK	Cl	NSDatePickerCell	im	void	NSDate *
timeInterval	AK	Cl	NSDatePickerCell	im	NSTimeInterval
setTimeInterval:	AK	Cl	NSDatePickerCell	im	void	NSTimeInterval
minDate	AK	Cl	NSDatePickerCell	im	NSDate *
setMinDate:	AK	Cl	NSDatePickerCell	im	void	NSDate *
maxDate	AK	Cl	NSDatePickerCell	im	NSDate *
setMaxDate:	AK	Cl	NSDatePickerCell	im	void	NSDate *
delegate	AK	Cl	NSDatePickerCell	im	id
setDelegate:	AK	Cl	NSDatePickerCell	im	void	id
datePickerCell:validateProposedDateValue:timeInterval:	AK	Cl	NSObject;NSDatePickerCell	dm	void	NSDatePickerCell *	NSDate **	NSTimeInterval *
init	AK	Cl	NSDocument	im	id
initWithType:error:	AK	Cl	NSDocument	im	id	NSString *	NSError **
initWithContentsOfURL:ofType:error:	AK	Cl	NSDocument	im	id	NSURL *	NSString *	NSError **
initForURL:withContentsOfURL:ofType:error:	AK	Cl	NSDocument	im	id	NSURL *	NSURL *	NSString *	NSError **
setFileType:	AK	Cl	NSDocument	im	void	NSString *
fileType	AK	Cl	NSDocument	im	NSString *
setFileURL:	AK	Cl	NSDocument	im	void	NSURL *
fileURL	AK	Cl	NSDocument	im	NSURL *
setFileModificationDate:	AK	Cl	NSDocument	im	void	NSDate *
fileModificationDate	AK	Cl	NSDocument	im	NSDate *
revertDocumentToSaved:	AK	Cl	NSDocument	im	IBAction	id
revertToContentsOfURL:ofType:error:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *	NSError **
readFromURL:ofType:error:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *	NSError **
readFromFileWrapper:ofType:error:	AK	Cl	NSDocument	im	BOOL	NSFileWrapper *	NSString *	NSError **
readFromData:ofType:error:	AK	Cl	NSDocument	im	BOOL	NSData *	NSString *	NSError **
writeToURL:ofType:error:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *	NSError **
fileWrapperOfType:error:	AK	Cl	NSDocument	im	NSFileWrapper *	NSString *	NSError **
dataOfType:error:	AK	Cl	NSDocument	im	NSData *	NSString *	NSError **
writeSafelyToURL:ofType:forSaveOperation:error:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *	NSSaveOperationType	NSError **
writeToURL:ofType:forSaveOperation:originalContentsURL:error:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *	NSSaveOperationType	NSURL *	NSError **
writeSafelyToURL:ofType:forSaveOperation:error:	AK	Cl	NSDocument	im	id
fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:	AK	Cl	NSDocument	im	NSDictionary *	NSURL *	NSString *	NSSaveOperationType	NSURL *	NSError **
keepBackupFile	AK	Cl	NSDocument	im	BOOL
saveDocument:	AK	Cl	NSDocument	im	IBAction	id
saveDocumentAs:	AK	Cl	NSDocument	im	IBAction	id
saveDocumentTo:	AK	Cl	NSDocument	im	IBAction	id
saveDocumentWithDelegate:didSaveSelector:contextInfo:	AK	Cl	NSDocument	im	void	id	SEL	void *
runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSSaveOperationType	id	SEL	void *
shouldRunSavePanelWithAccessoryView	AK	Cl	NSDocument	im	BOOL
prepareSavePanel:	AK	Cl	NSDocument	im	BOOL	NSSavePanel *
fileNameExtensionWasHiddenInLastRunSavePanel	AK	Cl	NSDocument	im	BOOL
fileTypeFromLastRunSavePanel	AK	Cl	NSDocument	im	NSString *
saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSURL *	NSString *	NSSaveOperationType	id	SEL	void *
saveToURL:ofType:forSaveOperation:error:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *	NSSaveOperationType	NSError **
hasUnautosavedChanges	AK	Cl	NSDocument	im	BOOL
autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:	AK	Cl	NSDocument	im	void	id	SEL	void *
autosavingFileType	AK	Cl	NSDocument	im	NSString *
setAutosavedContentsFileURL:	AK	Cl	NSDocument	im	void	NSURL *
autosavedContentsFileURL	AK	Cl	NSDocument	im	NSURL *
canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:	AK	Cl	NSDocument	im	void	id	SEL	void *
close	AK	Cl	NSDocument	im	void
runPageLayout:	AK	Cl	NSDocument	im	IBAction	id
runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSPrintInfo *	id	SEL	void *
preparePageLayout:	AK	Cl	NSDocument	im	BOOL	NSPageLayout *
shouldChangePrintInfo:	AK	Cl	NSDocument	im	BOOL	NSPrintInfo *
setPrintInfo:	AK	Cl	NSDocument	im	void	NSPrintInfo *
printInfo	AK	Cl	NSDocument	im	NSPrintInfo *
printDocument:	AK	Cl	NSDocument	im	IBAction	id
printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSDictionary *	BOOL	id	SEL	void *
printOperationWithSettings:error:	AK	Cl	NSDocument	im	NSPrintOperation *	NSDictionary *	NSError **
runModalPrintOperation:delegate:didRunSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSPrintOperation *	id	SEL	void *
isDocumentEdited	AK	Cl	NSDocument	im	BOOL
updateChangeCount:	AK	Cl	NSDocument	im	void	NSDocumentChangeType
undoManager	AK	Cl	NSDocument	im	NSUndoManager *
setUndoManager:	AK	Cl	NSDocument	im	void	NSUndoManager *
hasUndoManager	AK	Cl	NSDocument	im	BOOL
setHasUndoManager:	AK	Cl	NSDocument	im	void	BOOL
presentError:modalForWindow:delegate:didPresentSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSError *	NSWindow *	id	SEL	void *
presentError:	AK	Cl	NSDocument	im	BOOL	NSError *
willPresentError:	AK	Cl	NSDocument	im	NSError *	NSError *
windowControllers	AK	Cl	NSDocument	im	NSArray *
addWindowController:	AK	Cl	NSDocument	im	void	NSWindowController *
removeWindowController:	AK	Cl	NSDocument	im	void	NSWindowController *
windowNibName	AK	Cl	NSDocument	im	NSString *
makeWindowControllers	AK	Cl	NSDocument	im	void
showWindows	AK	Cl	NSDocument	im	void
shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSWindowController *	id	SEL	void *
setWindow:	AK	Cl	NSDocument	im	void	NSWindow *
windowControllerWillLoadNib:	AK	Cl	NSDocument	im	void	NSWindowController *
windowControllerDidLoadNib:	AK	Cl	NSDocument	im	void	NSWindowController *
displayName	AK	Cl	NSDocument	im	NSString *
windowForSheet	AK	Cl	NSDocument	im	NSWindow *
readableTypes	AK	Cl	NSDocument	cm	NSArray *
writableTypes	AK	Cl	NSDocument	cm	NSArray *
isNativeType:	AK	Cl	NSDocument	cm	BOOL	NSString *
writableTypesForSaveOperation:	AK	Cl	NSDocument	im	NSArray *	NSSaveOperationType
validateUserInterfaceItem:	AK	Cl	NSDocument	im	BOOL	id <NSValidatedUserInterfaceItem>
dataRepresentationOfType:	AK	Cl	NSDocument	im	NSData *	NSString *
fileAttributesToWriteToFile:ofType:saveOperation:	AK	Cl	NSDocument	im	NSDictionary *	NSString *	NSString *	NSSaveOperationType
fileName	AK	Cl	NSDocument	im	NSString *
fileWrapperRepresentationOfType:	AK	Cl	NSDocument	im	NSFileWrapper *	NSString *
initWithContentsOfFile:ofType:	AK	Cl	NSDocument	im	id	NSString *	NSString *
initWithContentsOfURL:ofType:	AK	Cl	NSDocument	im	id	NSURL *	NSString *
loadDataRepresentation:ofType:	AK	Cl	NSDocument	im	BOOL	NSData *	NSString *
loadFileWrapperRepresentation:ofType:	AK	Cl	NSDocument	im	BOOL	NSFileWrapper *	NSString *
printShowingPrintPanel:	AK	Cl	NSDocument	im	void	BOOL
readFromFile:ofType:	AK	Cl	NSDocument	im	BOOL	NSString *	NSString *
readFromURL:ofType:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *
revertToSavedFromFile:ofType:	AK	Cl	NSDocument	im	BOOL	NSString *	NSString *
revertToSavedFromURL:ofType:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *
runModalPageLayoutWithPrintInfo:	AK	Cl	NSDocument	im	int	NSPrintInfo *
saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:	AK	Cl	NSDocument	im	void	NSString *	NSSaveOperationType	id	SEL	void *
setFileName:	AK	Cl	NSDocument	im	void	NSString *
writeToFile:ofType:	AK	Cl	NSDocument	im	BOOL	NSString *	NSString *
writeToFile:ofType:originalFile:saveOperation:	AK	Cl	NSDocument	im	BOOL	NSString *	NSString *	NSString *	NSSaveOperationType
writeToURL:ofType:	AK	Cl	NSDocument	im	BOOL	NSURL *	NSString *
writeWithBackupToFile:ofType:saveOperation:	AK	Cl	NSDocument	im	BOOL	NSString *	NSString *	NSSaveOperationType
sharedDocumentController	AK	Cl	NSDocumentController	cm	id
init	AK	Cl	NSDocumentController	im	id
documents	AK	Cl	NSDocumentController	im	NSArray *
currentDocument	AK	Cl	NSDocumentController	im	id
currentDirectory	AK	Cl	NSDocumentController	im	NSString *
documentForURL:	AK	Cl	NSDocumentController	im	id	NSURL *
documentForWindow:	AK	Cl	NSDocumentController	im	id	NSWindow *
addDocument:	AK	Cl	NSDocumentController	im	void	NSDocument *
removeDocument:	AK	Cl	NSDocumentController	im	void	NSDocument *
newDocument:	AK	Cl	NSDocumentController	im	IBAction	id
openUntitledDocumentAndDisplay:error:	AK	Cl	NSDocumentController	im	id	BOOL	NSError **
makeUntitledDocumentOfType:error:	AK	Cl	NSDocumentController	im	id	NSString *	NSError **
openDocument:	AK	Cl	NSDocumentController	im	IBAction	id
URLsFromRunningOpenPanel	AK	Cl	NSDocumentController	im	NSArray *
runModalOpenPanel:forTypes:	AK	Cl	NSDocumentController	im	int	NSOpenPanel *	NSArray *
openDocumentWithContentsOfURL:display:error:	AK	Cl	NSDocumentController	im	id	NSURL *	BOOL	NSError **
makeDocumentWithContentsOfURL:ofType:error:	AK	Cl	NSDocumentController	im	id	NSURL *	NSString *	NSError **
reopenDocumentForURL:withContentsOfURL:error:	AK	Cl	NSDocumentController	im	BOOL	NSURL *	NSURL *	NSError **
makeDocumentForURL:withContentsOfURL:ofType:error:	AK	Cl	NSDocumentController	im	id	NSURL *	NSURL *	NSString *	NSError **
setAutosavingDelay:	AK	Cl	NSDocumentController	im	void	NSTimeInterval
autosavingDelay	AK	Cl	NSDocumentController	im	NSTimeInterval
saveAllDocuments:	AK	Cl	NSDocumentController	im	IBAction	id
hasEditedDocuments	AK	Cl	NSDocumentController	im	BOOL
reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:	AK	Cl	NSDocumentController	im	void	NSString *	BOOL	id	SEL	void *
closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:	AK	Cl	NSDocumentController	im	void	id	SEL	void *
presentError:modalForWindow:delegate:didPresentSelector:contextInfo:	AK	Cl	NSDocumentController	im	void	NSError *	NSWindow *	id	SEL	void *
presentError:	AK	Cl	NSDocumentController	im	BOOL	NSError *
willPresentError:	AK	Cl	NSDocumentController	im	NSError *	NSError *
maximumRecentDocumentCount	AK	Cl	NSDocumentController	im	unsigned int
clearRecentDocuments:	AK	Cl	NSDocumentController	im	IBAction	id
noteNewRecentDocument:	AK	Cl	NSDocumentController	im	void	NSDocument *
noteNewRecentDocumentURL:	AK	Cl	NSDocumentController	im	void	NSURL *
recentDocumentURLs	AK	Cl	NSDocumentController	im	NSArray *
defaultType	AK	Cl	NSDocumentController	im	NSString *
typeForContentsOfURL:error:	AK	Cl	NSDocumentController	im	NSString *	NSURL *	NSError **
documentClassNames	AK	Cl	NSDocumentController	im	NSArray *
typeFromFileExtension:	AK	Cl	NSDocumentController	im	NSString *	NSString *
documentClassForType:	AK	Cl	NSDocumentController	im	Class	NSString *
displayNameForType:	AK	Cl	NSDocumentController	im	NSString *	NSString *
fileExtensionsFromType:	AK	Cl	NSDocumentController	im	NSArray *	NSString *
validateUserInterfaceItem:	AK	Cl	NSDocumentController	im	BOOL	id <NSValidatedUserInterfaceItem>
documentForFileName:	AK	Cl	NSDocumentController	im	id	NSString *
fileNamesFromRunningOpenPanel	AK	Cl	NSDocumentController	im	NSArray *
makeDocumentWithContentsOfFile:ofType:	AK	Cl	NSDocumentController	im	id	NSString *	NSString *
makeDocumentWithContentsOfURL:ofType:	AK	Cl	NSDocumentController	im	id	NSURL *	NSString *
makeUntitledDocumentOfType:	AK	Cl	NSDocumentController	im	id	NSString *
openDocumentWithContentsOfFile:display:	AK	Cl	NSDocumentController	im	id	NSString *	BOOL
openDocumentWithContentsOfURL:display:	AK	Cl	NSDocumentController	im	id	NSURL *	BOOL
openUntitledDocumentOfType:display:	AK	Cl	NSDocumentController	im	id	NSString *	BOOL
setShouldCreateUI:	AK	Cl	NSDocumentController	im	void	BOOL
shouldCreateUI	AK	Cl	NSDocumentController	im	BOOL
lastComponentOfFileName	AK	Cl	NSDocument;NSDocumentScripting	im	NSString *
setLastComponentOfFileName:	AK	Cl	NSDocument;NSDocumentScripting	im	void	NSString *
handleSaveScriptCommand:	AK	Cl	NSDocument;NSDocumentScripting	im	id	NSScriptCommand *
handleCloseScriptCommand:	AK	Cl	NSDocument;NSDocumentScripting	im	id	NSCloseCommand *
handlePrintScriptCommand:	AK	Cl	NSDocument;NSDocumentScripting	im	id	NSScriptCommand *
objectSpecifier	AK	Cl	NSDocument;NSDocumentScripting	im	NSScriptObjectSpecifier *
draggingDestinationWindow	AK	Pr	NSDraggingInfo;NSDragging	im	NSWindow *
draggingSourceOperationMask	AK	Pr	NSDraggingInfo;NSDragging	im	NSDragOperation
draggingLocation	AK	Pr	NSDraggingInfo;NSDragging	im	NSPoint
draggedImageLocation	AK	Pr	NSDraggingInfo;NSDragging	im	NSPoint
draggedImage	AK	Pr	NSDraggingInfo;NSDragging	im	NSImage *
draggingPasteboard	AK	Pr	NSDraggingInfo;NSDragging	im	NSPasteboard *
draggingSource	AK	Pr	NSDraggingInfo;NSDragging	im	id
draggingSequenceNumber	AK	Pr	NSDraggingInfo;NSDragging	im	int
slideDraggedImageTo:	AK	Pr	NSDraggingInfo;NSDragging	im	void	NSPoint
namesOfPromisedFilesDroppedAtDestination:	AK	Pr	NSDraggingInfo;NSDragging	im	NSArray *	NSURL *
draggingEntered:	AK	Cl	NSObject;NSDragging	im	NSDragOperation	id <NSDraggingInfo>
draggingUpdated:	AK	Cl	NSObject;NSDragging	im	NSDragOperation	id <NSDraggingInfo>
draggingExited:	AK	Cl	NSObject;NSDragging	im	void	id <NSDraggingInfo>
prepareForDragOperation:	AK	Cl	NSObject;NSDragging	im	BOOL	id <NSDraggingInfo>
performDragOperation:	AK	Cl	NSObject;NSDragging	im	BOOL	id <NSDraggingInfo>
concludeDragOperation:	AK	Cl	NSObject;NSDragging	im	void	id <NSDraggingInfo>
draggingEnded:	AK	Cl	NSObject;NSDragging	im	void	id <NSDraggingInfo>
wantsPeriodicDraggingUpdates	AK	Cl	NSObject;NSDragging	im	BOOL
draggingSourceOperationMaskForLocal:	AK	Cl	NSObject;NSDragging	im	NSDragOperation	BOOL
namesOfPromisedFilesDroppedAtDestination:	AK	Cl	NSObject;NSDragging	im	NSArray *	NSURL *
draggedImage:beganAt:	AK	Cl	NSObject;NSDragging	im	void	NSImage *	NSPoint
draggedImage:endedAt:operation:	AK	Cl	NSObject;NSDragging	im	void	NSImage *	NSPoint	NSDragOperation
draggedImage:movedTo:	AK	Cl	NSObject;NSDragging	im	void	NSImage *	NSPoint
ignoreModifierKeysWhileDragging	AK	Cl	NSObject;NSDragging	im	BOOL
draggedImage:endedAt:deposited:	AK	Cl	NSObject;NSDragging	im	void	NSImage *	NSPoint	BOOL
initWithContentSize:preferredEdge:	AK	Cl	NSDrawer	im	id	NSSize	NSRectEdge
setParentWindow:	AK	Cl	NSDrawer	im	void	NSWindow *
parentWindow	AK	Cl	NSDrawer	im	NSWindow *
setContentView:	AK	Cl	NSDrawer	im	void	NSView *
contentView	AK	Cl	NSDrawer	im	NSView *
setPreferredEdge:	AK	Cl	NSDrawer	im	void	NSRectEdge
preferredEdge	AK	Cl	NSDrawer	im	NSRectEdge
setDelegate:	AK	Cl	NSDrawer	im	void	id
delegate	AK	Cl	NSDrawer	im	id
open	AK	Cl	NSDrawer	im	void
openOnEdge:	AK	Cl	NSDrawer	im	void	NSRectEdge
close	AK	Cl	NSDrawer	im	void
open:	AK	Cl	NSDrawer	im	void	id
close:	AK	Cl	NSDrawer	im	void	id
toggle:	AK	Cl	NSDrawer	im	void	id
state	AK	Cl	NSDrawer	im	int
edge	AK	Cl	NSDrawer	im	NSRectEdge
setContentSize:	AK	Cl	NSDrawer	im	void	NSSize
contentSize	AK	Cl	NSDrawer	im	NSSize
setMinContentSize:	AK	Cl	NSDrawer	im	void	NSSize
minContentSize	AK	Cl	NSDrawer	im	NSSize
setMaxContentSize:	AK	Cl	NSDrawer	im	void	NSSize
maxContentSize	AK	Cl	NSDrawer	im	NSSize
setLeadingOffset:	AK	Cl	NSDrawer	im	void	float
leadingOffset	AK	Cl	NSDrawer	im	float
setTrailingOffset:	AK	Cl	NSDrawer	im	void	float
trailingOffset	AK	Cl	NSDrawer	im	float
drawers	AK	Cl	NSWindow;NSDrawer	im	NSArray *
drawerWillOpen:	AK	Cl	NSObject;NSDrawer	im	void	NSNotification *
drawerDidOpen:	AK	Cl	NSObject;NSDrawer	im	void	NSNotification *
drawerWillClose:	AK	Cl	NSObject;NSDrawer	im	void	NSNotification *
drawerDidClose:	AK	Cl	NSObject;NSDrawer	im	void	NSNotification *
drawerShouldOpen:	AK	Cl	NSObject;NSDrawer	dm	BOOL	NSDrawer *
drawerShouldClose:	AK	Cl	NSObject;NSDrawer	dm	BOOL	NSDrawer *
drawerWillResizeContents:toSize:	AK	Cl	NSObject;NSDrawer	dm	NSSize	NSDrawer *	NSSize
imageRepWithData:	AK	Cl	NSEPSImageRep	cm	id	NSData *
initWithData:	AK	Cl	NSEPSImageRep	im	id	NSData *
prepareGState	AK	Cl	NSEPSImageRep	im	void
EPSRepresentation	AK	Cl	NSEPSImageRep	im	NSData *
boundingBox	AK	Cl	NSEPSImageRep	im	NSRect
type	AK	Cl	NSEvent	im	NSEventType
modifierFlags	AK	Cl	NSEvent	im	unsigned int
timestamp	AK	Cl	NSEvent	im	NSTimeInterval
window	AK	Cl	NSEvent	im	NSWindow *
windowNumber	AK	Cl	NSEvent	im	int
context	AK	Cl	NSEvent	im	NSGraphicsContext *
clickCount	AK	Cl	NSEvent	im	int
buttonNumber	AK	Cl	NSEvent	im	int
eventNumber	AK	Cl	NSEvent	im	int
pressure	AK	Cl	NSEvent	im	float
locationInWindow	AK	Cl	NSEvent	im	NSPoint
deltaX	AK	Cl	NSEvent	im	float
deltaY	AK	Cl	NSEvent	im	float
deltaZ	AK	Cl	NSEvent	im	float
characters	AK	Cl	NSEvent	im	NSString *
charactersIgnoringModifiers	AK	Cl	NSEvent	im	NSString *
isARepeat	AK	Cl	NSEvent	im	BOOL
keyCode	AK	Cl	NSEvent	im	unsigned short
trackingNumber	AK	Cl	NSEvent	im	int
userData	AK	Cl	NSEvent	im	void *
subtype	AK	Cl	NSEvent	im	short
data1	AK	Cl	NSEvent	im	int
data2	AK	Cl	NSEvent	im	int
deviceID	AK	Cl	NSEvent	im	unsigned int
absoluteX	AK	Cl	NSEvent	im	int
absoluteY	AK	Cl	NSEvent	im	int
absoluteZ	AK	Cl	NSEvent	im	int
buttonMask	AK	Cl	NSEvent	im	unsigned int
tilt	AK	Cl	NSEvent	im	NSPoint
rotation	AK	Cl	NSEvent	im	float
tangentialPressure	AK	Cl	NSEvent	im	float
vendorDefined	AK	Cl	NSEvent	im	id
vendorID	AK	Cl	NSEvent	im	unsigned int
tabletID	AK	Cl	NSEvent	im	unsigned int
pointingDeviceID	AK	Cl	NSEvent	im	unsigned int
systemTabletID	AK	Cl	NSEvent	im	unsigned int
vendorPointingDeviceType	AK	Cl	NSEvent	im	unsigned int
pointingDeviceSerialNumber	AK	Cl	NSEvent	im	unsigned int
uniqueID	AK	Cl	NSEvent	im	unsigned long long
capabilityMask	AK	Cl	NSEvent	im	unsigned int
pointingDeviceType	AK	Cl	NSEvent	im	NSPointingDeviceType
isEnteringProximity	AK	Cl	NSEvent	im	BOOL
startPeriodicEventsAfterDelay:withPeriod:	AK	Cl	NSEvent	cm	void	NSTimeInterval	NSTimeInterval
stopPeriodicEvents	AK	Cl	NSEvent	cm	void
mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:	AK	Cl	NSEvent	cm	NSEvent *	NSEventType	NSPoint	unsigned int	NSTimeInterval	int	NSGraphicsContext *	int	int	float
keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:	AK	Cl	NSEvent	cm	NSEvent *	NSEventType	NSPoint	unsigned int	NSTimeInterval	int	NSGraphicsContext *	NSString *	NSString *	BOOL	unsigned short
enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:	AK	Cl	NSEvent	cm	NSEvent *	NSEventType	NSPoint	unsigned int	NSTimeInterval	int	NSGraphicsContext *	int	int	void *
otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:	AK	Cl	NSEvent	cm	NSEvent *	NSEventType	NSPoint	unsigned int	NSTimeInterval	int	NSGraphicsContext *	short	int	int
mouseLocation	AK	Cl	NSEvent	cm	NSPoint
initDirectoryWithFileWrappers:	AK	Cl	NSFileWrapper	im	id	NSDictionary *
initRegularFileWithContents:	AK	Cl	NSFileWrapper	im	id	NSData *
initSymbolicLinkWithDestination:	AK	Cl	NSFileWrapper	im	id	NSString *
initWithPath:	AK	Cl	NSFileWrapper	im	id	NSString *
initWithSerializedRepresentation:	AK	Cl	NSFileWrapper	im	id	NSData *
writeToFile:atomically:updateFilenames:	AK	Cl	NSFileWrapper	im	BOOL	NSString *	BOOL	BOOL
serializedRepresentation	AK	Cl	NSFileWrapper	im	NSData *
setFilename:	AK	Cl	NSFileWrapper	im	void	NSString *
filename	AK	Cl	NSFileWrapper	im	NSString *
setPreferredFilename:	AK	Cl	NSFileWrapper	im	void	NSString *
preferredFilename	AK	Cl	NSFileWrapper	im	NSString *
setFileAttributes:	AK	Cl	NSFileWrapper	im	void	NSDictionary *
fileAttributes	AK	Cl	NSFileWrapper	im	NSDictionary *
isRegularFile	AK	Cl	NSFileWrapper	im	BOOL
isDirectory	AK	Cl	NSFileWrapper	im	BOOL
isSymbolicLink	AK	Cl	NSFileWrapper	im	BOOL
setIcon:	AK	Cl	NSFileWrapper	im	void	NSImage *
icon	AK	Cl	NSFileWrapper	im	NSImage *
needsToBeUpdatedFromPath:	AK	Cl	NSFileWrapper	im	BOOL	NSString *
updateFromPath:	AK	Cl	NSFileWrapper	im	BOOL	NSString *
addFileWrapper:	AK	Cl	NSFileWrapper	im	NSString *	NSFileWrapper *
removeFileWrapper:	AK	Cl	NSFileWrapper	im	void	NSFileWrapper *
fileWrappers	AK	Cl	NSFileWrapper	im	NSDictionary *
keyForFileWrapper:	AK	Cl	NSFileWrapper	im	NSString *	NSFileWrapper *
addFileWithPath:	AK	Cl	NSFileWrapper	im	NSString *	NSString *
addRegularFileWithContents:preferredFilename:	AK	Cl	NSFileWrapper	im	NSString *	NSData *	NSString *
addSymbolicLinkWithDestination:preferredFilename:	AK	Cl	NSFileWrapper	im	NSString *	NSString *	NSString *
regularFileContents	AK	Cl	NSFileWrapper	im	NSData *
symbolicLinkDestination	AK	Cl	NSFileWrapper	im	NSString *
fontWithName:size:	AK	Cl	NSFont	cm	NSFont *	NSString *	float
fontWithName:matrix:	AK	Cl	NSFont	cm	NSFont *	NSString *	const float *
fontWithDescriptor:size:	AK	Cl	NSFont	cm	NSFont *	NSFontDescriptor *	float
fontWithDescriptor:textTransform:	AK	Cl	NSFont	cm	NSFont *	NSFontDescriptor *	NSAffineTransform *
userFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
userFixedPitchFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
setUserFont:	AK	Cl	NSFont	cm	void	NSFont *
setUserFixedPitchFont:	AK	Cl	NSFont	cm	void	NSFont *
systemFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
boldSystemFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
labelFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
titleBarFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
menuFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
menuBarFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
messageFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
paletteFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
toolTipsFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
controlContentFontOfSize:	AK	Cl	NSFont	cm	NSFont *	float
systemFontSize	AK	Cl	NSFont	cm	float
smallSystemFontSize	AK	Cl	NSFont	cm	float
labelFontSize	AK	Cl	NSFont	cm	float
systemFontSizeForControlSize:	AK	Cl	NSFont	cm	float	NSControlSize
fontName	AK	Cl	NSFont	im	NSString *
pointSize	AK	Cl	NSFont	im	float
matrix	AK	Cl	NSFont	im	const float *
familyName	AK	Cl	NSFont	im	NSString *
displayName	AK	Cl	NSFont	im	NSString *
fontDescriptor	AK	Cl	NSFont	im	NSFontDescriptor *
textTransform	AK	Cl	NSFont	im	NSAffineTransform *
numberOfGlyphs	AK	Cl	NSFont	im	unsigned
mostCompatibleStringEncoding	AK	Cl	NSFont	im	NSStringEncoding
glyphWithName:	AK	Cl	NSFont	im	NSGlyph	NSString *
coveredCharacterSet	AK	Cl	NSFont	im	NSCharacterSet *
boundingRectForFont	AK	Cl	NSFont	im	NSRect
maximumAdvancement	AK	Cl	NSFont	im	NSSize
ascender	AK	Cl	NSFont	im	float
descender	AK	Cl	NSFont	im	float
leading	AK	Cl	NSFont	im	float
underlinePosition	AK	Cl	NSFont	im	float
underlineThickness	AK	Cl	NSFont	im	float
italicAngle	AK	Cl	NSFont	im	float
capHeight	AK	Cl	NSFont	im	float
xHeight	AK	Cl	NSFont	im	float
isFixedPitch	AK	Cl	NSFont	im	BOOL
boundingRectForGlyph:	AK	Cl	NSFont	im	NSRect	NSGlyph
advancementForGlyph:	AK	Cl	NSFont	im	NSSize	NSGlyph
getBoundingRects:forGlyphs:count:	AK	Cl	NSFont	im	void	NSRectArray	const NSGlyph *	unsigned
getAdvancements:forGlyphs:count:	AK	Cl	NSFont	im	void	NSSizeArray	const NSGlyph *	unsigned
getAdvancements:forPackedGlyphs:length:	AK	Cl	NSFont	im	void	NSSizeArray	const void *	unsigned
set	AK	Cl	NSFont	im	void
setInContext:	AK	Cl	NSFont	im	void	NSGraphicsContext *
printerFont	AK	Cl	NSFont	im	NSFont *
screenFont	AK	Cl	NSFont	im	NSFont *
screenFontWithRenderingMode:	AK	Cl	NSFont	im	NSFont *	NSFontRenderingMode
renderingMode	AK	Cl	NSFont	im	NSFontRenderingMode
useFont:	AK	Cl	NSFont	cm	void	NSString *
widthOfString:	AK	Cl	NSFont	im	float	NSString *
isBaseFont	AK	Cl	NSFont	im	BOOL
afmDictionary	AK	Cl	NSFont	im	NSDictionary *
glyphIsEncoded:	AK	Cl	NSFont	im	BOOL	NSGlyph
defaultLineHeightForFont	AK	Cl	NSFont	im	float
preferredFontNames	AK	Cl	NSFont	cm	NSArray *
setPreferredFontNames:	AK	Cl	NSFont	cm	void	NSArray *
encodingScheme	AK	Cl	NSFont	im	NSString *
glyphPacking	AK	Cl	NSFont	im	NSMultibyteGlyphPacking
positionOfGlyph:precededByGlyph:isNominal:	AK	Cl	NSFont	im	NSPoint	NSGlyph	NSGlyph	BOOL *
positionsForCompositeSequence:numberOfGlyphs:pointArray:	AK	Cl	NSFont	im	int	NSGlyph *	int	NSPointArray
positionOfGlyph:struckOverGlyph:metricsExist:	AK	Cl	NSFont	im	NSPoint	NSGlyph	NSGlyph	BOOL *
positionOfGlyph:struckOverRect:metricsExist:	AK	Cl	NSFont	im	NSPoint	NSGlyph	NSRect	BOOL *
positionOfGlyph:forCharacter:struckOverRect:	AK	Cl	NSFont	im	NSPoint	NSGlyph	unichar	NSRect
positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:	AK	Cl	NSFont	im	NSPoint	NSGlyph	NSGlyphRelation	NSGlyph	NSSizePointer	BOOL *
postscriptName	AK	Cl	NSFontDescriptor	im	NSString *
pointSize	AK	Cl	NSFontDescriptor	im	float
matrix	AK	Cl	NSFontDescriptor	im	NSAffineTransform *
symbolicTraits	AK	Cl	NSFontDescriptor	im	NSFontSymbolicTraits
objectForKey:	AK	Cl	NSFontDescriptor	im	id	NSString *
fontAttributes	AK	Cl	NSFontDescriptor	im	NSDictionary *
fontDescriptorWithFontAttributes:	AK	Cl	NSFontDescriptor	cm	NSFontDescriptor *	NSDictionary *
fontDescriptorWithName:size:	AK	Cl	NSFontDescriptor	cm	NSFontDescriptor *	NSString *	float
fontDescriptorWithName:matrix:	AK	Cl	NSFontDescriptor	cm	NSFontDescriptor *	NSString *	NSAffineTransform *
initWithFontAttributes:	AK	Cl	NSFontDescriptor	im	id	NSDictionary *
matchingFontDescriptorsWithMandatoryKeys:	AK	Cl	NSFontDescriptor	im	NSArray *	NSSet *
fontDescriptorByAddingAttributes:	AK	Cl	NSFontDescriptor	im	NSFontDescriptor *	NSDictionary *
fontDescriptorWithSymbolicTraits:	AK	Cl	NSFontDescriptor	im	NSFontDescriptor *	NSFontSymbolicTraits
fontDescriptorWithSize:	AK	Cl	NSFontDescriptor	im	NSFontDescriptor *	float
fontDescriptorWithMatrix:	AK	Cl	NSFontDescriptor	im	NSFontDescriptor *	NSAffineTransform *
fontDescriptorWithFace:	AK	Cl	NSFontDescriptor	im	NSFontDescriptor *	NSString *
fontDescriptorWithFamily:	AK	Cl	NSFontDescriptor	im	NSFontDescriptor *	NSString *
setFontPanelFactory:	AK	Cl	NSFontManager	cm	void	Class
setFontManagerFactory:	AK	Cl	NSFontManager	cm	void	Class
sharedFontManager	AK	Cl	NSFontManager	cm	NSFontManager *
isMultiple	AK	Cl	NSFontManager	im	BOOL
selectedFont	AK	Cl	NSFontManager	im	NSFont *
setSelectedFont:isMultiple:	AK	Cl	NSFontManager	im	void	NSFont *	BOOL
setFontMenu:	AK	Cl	NSFontManager	im	void	NSMenu *
fontMenu:	AK	Cl	NSFontManager	im	NSMenu *	BOOL
fontPanel:	AK	Cl	NSFontManager	im	NSFontPanel *	BOOL
fontWithFamily:traits:weight:size:	AK	Cl	NSFontManager	im	NSFont *	NSString *	NSFontTraitMask	int	float
traitsOfFont:	AK	Cl	NSFontManager	im	NSFontTraitMask	NSFont *
weightOfFont:	AK	Cl	NSFontManager	im	int	NSFont *
availableFonts	AK	Cl	NSFontManager	im	NSArray *
availableFontFamilies	AK	Cl	NSFontManager	im	NSArray *
availableMembersOfFontFamily:	AK	Cl	NSFontManager	im	NSArray *	NSString *
convertFont:	AK	Cl	NSFontManager	im	NSFont *	NSFont *
convertFont:toSize:	AK	Cl	NSFontManager	im	NSFont *	NSFont *	float
convertFont:toFace:	AK	Cl	NSFontManager	im	NSFont *	NSFont *	NSString *
convertFont:toFamily:	AK	Cl	NSFontManager	im	NSFont *	NSFont *	NSString *
convertFont:toHaveTrait:	AK	Cl	NSFontManager	im	NSFont *	NSFont *	NSFontTraitMask
convertFont:toNotHaveTrait:	AK	Cl	NSFontManager	im	NSFont *	NSFont *	NSFontTraitMask
convertWeight:ofFont:	AK	Cl	NSFontManager	im	NSFont *	BOOL	NSFont *
isEnabled	AK	Cl	NSFontManager	im	BOOL
setEnabled:	AK	Cl	NSFontManager	im	void	BOOL
action	AK	Cl	NSFontManager	im	SEL
setAction:	AK	Cl	NSFontManager	im	void	SEL
sendAction	AK	Cl	NSFontManager	im	BOOL
setDelegate:	AK	Cl	NSFontManager	im	void	id
delegate	AK	Cl	NSFontManager	im	id
localizedNameForFamily:face:	AK	Cl	NSFontManager	im	NSString *	NSString *	NSString *
setSelectedAttributes:isMultiple:	AK	Cl	NSFontManager	im	void	NSDictionary *	BOOL
convertAttributes:	AK	Cl	NSFontManager	im	NSDictionary *	NSDictionary *
availableFontNamesMatchingFontDescriptor:	AK	Cl	NSFontManager	im	NSArray *	NSFontDescriptor *
collectionNames	AK	Cl	NSFontManager	im	NSArray *
fontDescriptorsInCollection:	AK	Cl	NSFontManager	im	NSArray *	NSString *
addCollection:options:	AK	Cl	NSFontManager	im	BOOL	NSString *	int
removeCollection:	AK	Cl	NSFontManager	im	BOOL	NSString *
addFontDescriptors:toCollection:	AK	Cl	NSFontManager	im	void	NSArray *	NSString *
removeFontDescriptor:fromCollection:	AK	Cl	NSFontManager	im	void	NSFontDescriptor *	NSString *
fontNamed:hasTraits:	AK	Cl	NSFontManager	im	BOOL	NSString *	NSFontTraitMask
availableFontNamesWithTraits:	AK	Cl	NSFontManager	im	NSArray *	NSFontTraitMask
addFontTrait:	AK	Cl	NSFontManager	im	void	id
removeFontTrait:	AK	Cl	NSFontManager	im	void	id
modifyFontViaPanel:	AK	Cl	NSFontManager	im	void	id
modifyFont:	AK	Cl	NSFontManager	im	void	id
orderFrontFontPanel:	AK	Cl	NSFontManager	im	void	id
orderFrontStylesPanel:	AK	Cl	NSFontManager	im	void	id
fontManager:willIncludeFont:	AK	Cl	NSObject;NSFontManager	dm	BOOL	id	NSString *
changeFont:	AK	Cl	NSObject;NSFontManager	dm	void	id
validModesForFontPanel:	AK	Cl	NSObject;NSFontPanel	im	unsigned int	NSFontPanel *
sharedFontPanel	AK	Cl	NSFontPanel	cm	NSFontPanel *
sharedFontPanelExists	AK	Cl	NSFontPanel	cm	BOOL
accessoryView	AK	Cl	NSFontPanel	im	NSView *
setAccessoryView:	AK	Cl	NSFontPanel	im	void	NSView *
setPanelFont:isMultiple:	AK	Cl	NSFontPanel	im	void	NSFont *	BOOL
panelConvertFont:	AK	Cl	NSFontPanel	im	NSFont *	NSFont *
worksWhenModal	AK	Cl	NSFontPanel	im	BOOL
isEnabled	AK	Cl	NSFontPanel	im	BOOL
setEnabled:	AK	Cl	NSFontPanel	im	void	BOOL
reloadDefaultFontFamilies	AK	Cl	NSFontPanel	im	void
indexOfSelectedItem	AK	Cl	NSForm	im	int
setEntryWidth:	AK	Cl	NSForm	im	void	float
setInterlineSpacing:	AK	Cl	NSForm	im	void	float
setBordered:	AK	Cl	NSForm	im	void	BOOL
setBezeled:	AK	Cl	NSForm	im	void	BOOL
setTitleAlignment:	AK	Cl	NSForm	im	void	NSTextAlignment
setTextAlignment:	AK	Cl	NSForm	im	void	int
setTitleFont:	AK	Cl	NSForm	im	void	NSFont *
setTextFont:	AK	Cl	NSForm	im	void	NSFont *
cellAtIndex:	AK	Cl	NSForm	im	id	int
drawCellAtIndex:	AK	Cl	NSForm	im	void	int
addEntry:	AK	Cl	NSForm	im	NSFormCell *	NSString *
insertEntry:atIndex:	AK	Cl	NSForm	im	NSFormCell *	NSString *	int
removeEntryAtIndex:	AK	Cl	NSForm	im	void	int
indexOfCellWithTag:	AK	Cl	NSForm	im	int	int
selectTextAtIndex:	AK	Cl	NSForm	im	void	int
setFrameSize:	AK	Cl	NSForm	im	void	NSSize
setTitleBaseWritingDirection:	AK	Cl	NSForm	im	void	NSWritingDirection
setTextBaseWritingDirection:	AK	Cl	NSForm	im	void	NSWritingDirection
initTextCell:	AK	Cl	NSFormCell	im	id	NSString *
titleWidth:	AK	Cl	NSFormCell	im	float	NSSize
titleWidth	AK	Cl	NSFormCell	im	float
setTitleWidth:	AK	Cl	NSFormCell	im	void	float
title	AK	Cl	NSFormCell	im	NSString *
setTitle:	AK	Cl	NSFormCell	im	void	NSString *
titleFont	AK	Cl	NSFormCell	im	NSFont *
setTitleFont:	AK	Cl	NSFormCell	im	void	NSFont *
titleAlignment	AK	Cl	NSFormCell	im	NSTextAlignment
setTitleAlignment:	AK	Cl	NSFormCell	im	void	NSTextAlignment
isOpaque	AK	Cl	NSFormCell	im	BOOL
setPlaceholderString:	AK	Cl	NSFormCell	im	void	NSString *
placeholderString	AK	Cl	NSFormCell	im	NSString *
setPlaceholderAttributedString:	AK	Cl	NSFormCell	im	void	NSAttributedString *
placeholderAttributedString	AK	Cl	NSFormCell	im	NSAttributedString *
titleBaseWritingDirection	AK	Cl	NSFormCell	im	NSWritingDirection
setTitleBaseWritingDirection:	AK	Cl	NSFormCell	im	void	NSWritingDirection
setTitleWithMnemonic:	AK	Cl	NSFormCell	im	void	NSString *
attributedTitle	AK	Cl	NSFormCell	im	NSAttributedString *
setAttributedTitle:	AK	Cl	NSFormCell	im	void	NSAttributedString *
insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:	AK	Pr	NSGlyphStorage;NSGlyphGenerator	im	void	const NSGlyph *	unsigned int	unsigned int	unsigned int
setIntAttribute:value:forGlyphAtIndex:	AK	Pr	NSGlyphStorage;NSGlyphGenerator	im	void	int	int	unsigned
attributedString	AK	Pr	NSGlyphStorage;NSGlyphGenerator	im	NSAttributedString *
layoutOptions	AK	Pr	NSGlyphStorage;NSGlyphGenerator	im	unsigned int
generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:	AK	Cl	NSGlyphGenerator	im	void	id <NSGlyphStorage>	unsigned int	unsigned int *	unsigned int *
sharedGlyphGenerator	AK	Cl	NSGlyphGenerator	cm	id
glyphInfoWithGlyphName:forFont:baseString:	AK	Cl	NSGlyphInfo	cm	NSGlyphInfo *	NSString *	NSFont *	NSString *
glyphInfoWithGlyph:forFont:baseString:	AK	Cl	NSGlyphInfo	cm	NSGlyphInfo *	NSGlyph	NSFont *	NSString *
glyphInfoWithCharacterIdentifier:collection:baseString:	AK	Cl	NSGlyphInfo	cm	NSGlyphInfo *	unsigned int	NSCharacterCollection	NSString *
glyphName	AK	Cl	NSGlyphInfo	im	NSString *
characterIdentifier	AK	Cl	NSGlyphInfo	im	unsigned int
characterCollection	AK	Cl	NSGlyphInfo	im	NSCharacterCollection
graphicsContextWithAttributes:	AK	Cl	NSGraphicsContext	cm	NSGraphicsContext *	NSDictionary *
graphicsContextWithWindow:	AK	Cl	NSGraphicsContext	cm	NSGraphicsContext *	NSWindow *
graphicsContextWithBitmapImageRep:	AK	Cl	NSGraphicsContext	cm	NSGraphicsContext *	NSBitmapImageRep *
graphicsContextWithGraphicsPort:flipped:	AK	Cl	NSGraphicsContext	cm	NSGraphicsContext *	void *	BOOL
currentContext	AK	Cl	NSGraphicsContext	cm	NSGraphicsContext *
setCurrentContext:	AK	Cl	NSGraphicsContext	cm	void	NSGraphicsContext *
currentContextDrawingToScreen	AK	Cl	NSGraphicsContext	cm	BOOL
saveGraphicsState	AK	Cl	NSGraphicsContext	cm	void
restoreGraphicsState	AK	Cl	NSGraphicsContext	cm	void
setGraphicsState:	AK	Cl	NSGraphicsContext	cm	void	int
attributes	AK	Cl	NSGraphicsContext	im	NSDictionary *
isDrawingToScreen	AK	Cl	NSGraphicsContext	im	BOOL
saveGraphicsState	AK	Cl	NSGraphicsContext	im	void
restoreGraphicsState	AK	Cl	NSGraphicsContext	im	void
flushGraphics	AK	Cl	NSGraphicsContext	im	void
focusStack	AK	Cl	NSGraphicsContext	im	void *
setFocusStack:	AK	Cl	NSGraphicsContext	im	void	void *
graphicsPort	AK	Cl	NSGraphicsContext	im	void *
isFlipped	AK	Cl	NSGraphicsContext	im	BOOL
setShouldAntialias:	AK	Cl	NSGraphicsContext	im	void	BOOL
shouldAntialias	AK	Cl	NSGraphicsContext	im	BOOL
setImageInterpolation:	AK	Cl	NSGraphicsContext	im	void	NSImageInterpolation
imageInterpolation	AK	Cl	NSGraphicsContext	im	NSImageInterpolation
setPatternPhase:	AK	Cl	NSGraphicsContext	im	void	NSPoint
patternPhase	AK	Cl	NSGraphicsContext	im	NSPoint
setCompositingOperation:	AK	Cl	NSGraphicsContext	im	void	NSCompositingOperation
compositingOperation	AK	Cl	NSGraphicsContext	im	NSCompositingOperation
CIContext	AK	Cl	NSGraphicsContext	im	CIContext *
sharedHelpManager	AK	Cl	NSHelpManager	cm	NSHelpManager *
setContextHelpModeActive:	AK	Cl	NSHelpManager	cm	void	BOOL
isContextHelpModeActive	AK	Cl	NSHelpManager	cm	BOOL
setContextHelp:forObject:	AK	Cl	NSHelpManager	im	void	NSAttributedString *	id
removeContextHelpForObject:	AK	Cl	NSHelpManager	im	void	id
contextHelpForObject:	AK	Cl	NSHelpManager	im	NSAttributedString *	id
showContextHelpForObject:locationHint:	AK	Cl	NSHelpManager	im	BOOL	id	NSPoint
openHelpAnchor:inBook:	AK	Cl	NSHelpManager	im	void	NSString *	NSString *
findString:inBook:	AK	Cl	NSHelpManager	im	void	NSString *	NSString *
contextHelpForKey:	AK	Cl	NSBundle;NSHelpManager	im	NSAttributedString *	NSString *
activateContextHelpMode:	AK	Cl	NSApplication;NSHelpManager	im	void	id
showHelp:	AK	Cl	NSApplication;NSHelpManager	im	void	id
imageNamed:	AK	Cl	NSImage	cm	id	NSString *
initWithSize:	AK	Cl	NSImage	im	id	NSSize
initWithData:	AK	Cl	NSImage	im	id	NSData *
initWithContentsOfFile:	AK	Cl	NSImage	im	id	NSString *
initWithContentsOfURL:	AK	Cl	NSImage	im	id	NSURL *
initByReferencingFile:	AK	Cl	NSImage	im	id	NSString *
initByReferencingURL:	AK	Cl	NSImage	im	id	NSURL *
initWithPasteboard:	AK	Cl	NSImage	im	id	NSPasteboard *
setSize:	AK	Cl	NSImage	im	void	NSSize
size	AK	Cl	NSImage	im	NSSize
setName:	AK	Cl	NSImage	im	BOOL	NSString *
name	AK	Cl	NSImage	im	NSString *
setScalesWhenResized:	AK	Cl	NSImage	im	void	BOOL
scalesWhenResized	AK	Cl	NSImage	im	BOOL
setDataRetained:	AK	Cl	NSImage	im	void	BOOL
isDataRetained	AK	Cl	NSImage	im	BOOL
setCachedSeparately:	AK	Cl	NSImage	im	void	BOOL
isCachedSeparately	AK	Cl	NSImage	im	BOOL
setCacheDepthMatchesImageDepth:	AK	Cl	NSImage	im	void	BOOL
cacheDepthMatchesImageDepth	AK	Cl	NSImage	im	BOOL
setBackgroundColor:	AK	Cl	NSImage	im	void	NSColor *
backgroundColor	AK	Cl	NSImage	im	NSColor *
setUsesEPSOnResolutionMismatch:	AK	Cl	NSImage	im	void	BOOL
usesEPSOnResolutionMismatch	AK	Cl	NSImage	im	BOOL
setPrefersColorMatch:	AK	Cl	NSImage	im	void	BOOL
prefersColorMatch	AK	Cl	NSImage	im	BOOL
setMatchesOnMultipleResolution:	AK	Cl	NSImage	im	void	BOOL
matchesOnMultipleResolution	AK	Cl	NSImage	im	BOOL
dissolveToPoint:fraction:	AK	Cl	NSImage	im	void	NSPoint	float
dissolveToPoint:fromRect:fraction:	AK	Cl	NSImage	im	void	NSPoint	NSRect	float
compositeToPoint:operation:	AK	Cl	NSImage	im	void	NSPoint	NSCompositingOperation
compositeToPoint:fromRect:operation:	AK	Cl	NSImage	im	void	NSPoint	NSRect	NSCompositingOperation
compositeToPoint:operation:fraction:	AK	Cl	NSImage	im	void	NSPoint	NSCompositingOperation	float
compositeToPoint:fromRect:operation:fraction:	AK	Cl	NSImage	im	void	NSPoint	NSRect	NSCompositingOperation	float
drawAtPoint:fromRect:operation:fraction:	AK	Cl	NSImage	im	void	NSPoint	NSRect	NSCompositingOperation	float
drawInRect:fromRect:operation:fraction:	AK	Cl	NSImage	im	void	NSRect	NSRect	NSCompositingOperation	float
drawRepresentation:inRect:	AK	Cl	NSImage	im	BOOL	NSImageRep *	NSRect
recache	AK	Cl	NSImage	im	void
TIFFRepresentation	AK	Cl	NSImage	im	NSData *
TIFFRepresentationUsingCompression:factor:	AK	Cl	NSImage	im	NSData *	NSTIFFCompression	float
representations	AK	Cl	NSImage	im	NSArray *
addRepresentations:	AK	Cl	NSImage	im	void	NSArray *
addRepresentation:	AK	Cl	NSImage	im	void	NSImageRep *
removeRepresentation:	AK	Cl	NSImage	im	void	NSImageRep *
isValid	AK	Cl	NSImage	im	BOOL
lockFocus	AK	Cl	NSImage	im	void
lockFocusOnRepresentation:	AK	Cl	NSImage	im	void	NSImageRep *
unlockFocus	AK	Cl	NSImage	im	void
bestRepresentationForDevice:	AK	Cl	NSImage	im	NSImageRep *	NSDictionary *
setDelegate:	AK	Cl	NSImage	im	void	id
delegate	AK	Cl	NSImage	im	id
imageUnfilteredFileTypes	AK	Cl	NSImage	cm	NSArray *
imageUnfilteredPasteboardTypes	AK	Cl	NSImage	cm	NSArray *
imageFileTypes	AK	Cl	NSImage	cm	NSArray *
imagePasteboardTypes	AK	Cl	NSImage	cm	NSArray *
canInitWithPasteboard:	AK	Cl	NSImage	cm	BOOL	NSPasteboard *
setFlipped:	AK	Cl	NSImage	im	void	BOOL
isFlipped	AK	Cl	NSImage	im	BOOL
cancelIncrementalLoad	AK	Cl	NSImage	im	void
setCacheMode:	AK	Cl	NSImage	im	void	NSImageCacheMode
cacheMode	AK	Cl	NSImage	im	NSImageCacheMode
initWithIconHandle:	AK	Cl	NSImage	im	id	void * /* HICON */
initWithBitmapHandle:	AK	Cl	NSImage	im	id	void * /* HBITMAP */
imageDidNotDraw:inRect:	AK	Cl	NSObject;NSImage	dm	NSImage *	id	NSRect
image:willLoadRepresentation:	AK	Cl	NSObject;NSImage	dm	void	NSImage *	NSImageRep *
image:didLoadRepresentationHeader:	AK	Cl	NSObject;NSImage	dm	void	NSImage *	NSImageRep *
image:didLoadPartOfRepresentation:withValidRows:	AK	Cl	NSObject;NSImage	dm	void	NSImage *	NSImageRep *	int
image:didLoadRepresentation:withStatus:	AK	Cl	NSObject;NSImage	dm	void	NSImage *	NSImageRep *	NSImageLoadStatus
pathForImageResource:	AK	Cl	NSBundle;NSImage	dm	NSString *	NSString *
imageAlignment	AK	Cl	NSImageCell	im	NSImageAlignment
setImageAlignment:	AK	Cl	NSImageCell	im	void	NSImageAlignment
imageScaling	AK	Cl	NSImageCell	im	NSImageScaling
setImageScaling:	AK	Cl	NSImageCell	im	void	NSImageScaling
imageFrameStyle	AK	Cl	NSImageCell	im	NSImageFrameStyle
setImageFrameStyle:	AK	Cl	NSImageCell	im	void	NSImageFrameStyle
draw	AK	Cl	NSImageRep	im	BOOL
drawAtPoint:	AK	Cl	NSImageRep	im	BOOL	NSPoint
drawInRect:	AK	Cl	NSImageRep	im	BOOL	NSRect
setSize:	AK	Cl	NSImageRep	im	void	NSSize
size	AK	Cl	NSImageRep	im	NSSize
setAlpha:	AK	Cl	NSImageRep	im	void	BOOL
hasAlpha	AK	Cl	NSImageRep	im	BOOL
setOpaque:	AK	Cl	NSImageRep	im	void	BOOL
isOpaque	AK	Cl	NSImageRep	im	BOOL
setColorSpaceName:	AK	Cl	NSImageRep	im	void	NSString *
colorSpaceName	AK	Cl	NSImageRep	im	NSString *
setBitsPerSample:	AK	Cl	NSImageRep	im	void	int
bitsPerSample	AK	Cl	NSImageRep	im	int
setPixelsWide:	AK	Cl	NSImageRep	im	void	int
pixelsWide	AK	Cl	NSImageRep	im	int
setPixelsHigh:	AK	Cl	NSImageRep	im	void	int
pixelsHigh	AK	Cl	NSImageRep	im	int
registerImageRepClass:	AK	Cl	NSImageRep	cm	void	Class
unregisterImageRepClass:	AK	Cl	NSImageRep	cm	void	Class
registeredImageRepClasses	AK	Cl	NSImageRep	cm	NSArray *
imageRepClassForFileType:	AK	Cl	NSImageRep	cm	Class	NSString *
imageRepClassForPasteboardType:	AK	Cl	NSImageRep	cm	Class	NSString *
imageRepClassForData:	AK	Cl	NSImageRep	cm	Class	NSData *
canInitWithData:	AK	Cl	NSImageRep	cm	BOOL	NSData *
imageUnfilteredFileTypes	AK	Cl	NSImageRep	cm	NSArray *
imageUnfilteredPasteboardTypes	AK	Cl	NSImageRep	cm	NSArray *
imageFileTypes	AK	Cl	NSImageRep	cm	NSArray *
imagePasteboardTypes	AK	Cl	NSImageRep	cm	NSArray *
canInitWithPasteboard:	AK	Cl	NSImageRep	cm	BOOL	NSPasteboard *
imageRepsWithContentsOfFile:	AK	Cl	NSImageRep	cm	NSArray *	NSString *
imageRepWithContentsOfFile:	AK	Cl	NSImageRep	cm	id	NSString *
imageRepsWithContentsOfURL:	AK	Cl	NSImageRep	cm	NSArray *	NSURL *
imageRepWithContentsOfURL:	AK	Cl	NSImageRep	cm	id	NSURL *
imageRepsWithPasteboard:	AK	Cl	NSImageRep	cm	NSArray *	NSPasteboard *
imageRepWithPasteboard:	AK	Cl	NSImageRep	cm	id	NSPasteboard *
image	AK	Cl	NSImageView	im	NSImage *
setImage:	AK	Cl	NSImageView	im	void	NSImage *
imageAlignment	AK	Cl	NSImageView	im	NSImageAlignment
setImageAlignment:	AK	Cl	NSImageView	im	void	NSImageAlignment
imageScaling	AK	Cl	NSImageView	im	NSImageScaling
setImageScaling:	AK	Cl	NSImageView	im	void	NSImageScaling
imageFrameStyle	AK	Cl	NSImageView	im	NSImageFrameStyle
setImageFrameStyle:	AK	Cl	NSImageView	im	void	NSImageFrameStyle
setEditable:	AK	Cl	NSImageView	im	void	BOOL
isEditable	AK	Cl	NSImageView	im	BOOL
setAnimates:	AK	Cl	NSImageView	im	void	BOOL
animates	AK	Cl	NSImageView	im	BOOL
allowsCutCopyPaste	AK	Cl	NSImageView	im	BOOL
setAllowsCutCopyPaste:	AK	Cl	NSImageView	im	void	BOOL
insertText:	AK	Pr	NSTextInput;NSInputManager	im	void	id
doCommandBySelector:	AK	Pr	NSTextInput;NSInputManager	im	void	SEL
setMarkedText:selectedRange:	AK	Pr	NSTextInput;NSInputManager	im	void	id	NSRange
unmarkText	AK	Pr	NSTextInput;NSInputManager	im	void
hasMarkedText	AK	Pr	NSTextInput;NSInputManager	im	BOOL
conversationIdentifier	AK	Pr	NSTextInput;NSInputManager	im	long
attributedSubstringFromRange:	AK	Pr	NSTextInput;NSInputManager	im	NSAttributedString *	NSRange
markedRange	AK	Pr	NSTextInput;NSInputManager	im	NSRange
selectedRange	AK	Pr	NSTextInput;NSInputManager	im	NSRange
firstRectForCharacterRange:	AK	Pr	NSTextInput;NSInputManager	im	NSRect	NSRange
characterIndexForPoint:	AK	Pr	NSTextInput;NSInputManager	im	unsigned int	NSPoint
validAttributesForMarkedText	AK	Pr	NSTextInput;NSInputManager	im	NSArray *
currentInputManager	AK	Cl	NSInputManager	cm	NSInputManager *
cycleToNextInputLanguage:	AK	Cl	NSInputManager	cm	void	id
cycleToNextInputServerInLanguage:	AK	Cl	NSInputManager	cm	void	id
initWithName:host:	AK	Cl	NSInputManager	im	NSInputManager *	NSString *	NSString *
localizedInputManagerName	AK	Cl	NSInputManager	im	NSString *
markedTextAbandoned:	AK	Cl	NSInputManager	im	void	id
markedTextSelectionChanged:client:	AK	Cl	NSInputManager	im	void	NSRange	id
wantsToInterpretAllKeystrokes	AK	Cl	NSInputManager	im	BOOL
language	AK	Cl	NSInputManager	im	NSString *
image	AK	Cl	NSInputManager	im	NSImage *
server	AK	Cl	NSInputManager	im	NSInputServer *
wantsToHandleMouseEvents	AK	Cl	NSInputManager	im	BOOL
handleMouseEvent:	AK	Cl	NSInputManager	im	BOOL	NSEvent *
wantsToDelayTextChangeNotifications	AK	Cl	NSInputManager	im	BOOL
insertText:client:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id	id
doCommandBySelector:client:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	SEL	id
markedTextAbandoned:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id
markedTextSelectionChanged:client:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	NSRange	id
terminate:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id
canBeDisabled	AK	Pr	NSInputServiceProvider;NSInputServer	im	BOOL
wantsToInterpretAllKeystrokes	AK	Pr	NSInputServiceProvider;NSInputServer	im	BOOL
wantsToHandleMouseEvents	AK	Pr	NSInputServiceProvider;NSInputServer	im	BOOL
wantsToDelayTextChangeNotifications	AK	Pr	NSInputServiceProvider;NSInputServer	im	BOOL
inputClientBecomeActive:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id
inputClientResignActive:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id
inputClientEnabled:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id
inputClientDisabled:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id
activeConversationWillChange:fromOldConversation:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id	long
activeConversationChanged:toNewConversation:	AK	Pr	NSInputServiceProvider;NSInputServer	im	void	id	long
mouseDownOnCharacterIndex:atCoordinate:withModifier:client:	AK	Pr	NSInputServerMouseTracker;NSInputServer	im	BOOL	unsigned	NSPoint	unsigned int	id
mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:	AK	Pr	NSInputServerMouseTracker;NSInputServer	im	BOOL	unsigned	NSPoint	unsigned int	id
mouseUpOnCharacterIndex:atCoordinate:withModifier:client:	AK	Pr	NSInputServerMouseTracker;NSInputServer	im	void	unsigned	NSPoint	unsigned int	id
initWithDelegate:name:	AK	Cl	NSInputServer	im	id	id	NSString *
interfaceStyle	AK	Cl	NSResponder;NSInterfaceStyle	im	NSInterfaceStyle
setInterfaceStyle:	AK	Cl	NSResponder;NSInterfaceStyle	im	void	NSInterfaceStyle
exposeBinding:	AK	Cl	NSObject;NSKeyValueBinding	cm	void	NSString *
exposedBindings	AK	Cl	NSObject;NSKeyValueBinding	im	NSArray *
valueClassForBinding:	AK	Cl	NSObject;NSKeyValueBinding	im	Class	NSString *
bind:toObject:withKeyPath:options:	AK	Cl	NSObject;NSKeyValueBinding	im	void	NSString *	id	NSString *	NSDictionary *
unbind:	AK	Cl	NSObject;NSKeyValueBinding	im	void	NSString *
infoForBinding:	AK	Cl	NSObject;NSKeyValueBinding	im	NSDictionary *	NSString *
setDefaultPlaceholder:forMarker:withBinding:	AK	Cl	NSObject;NSKeyValueBinding	cm	void	id	id	NSString *
defaultPlaceholderForMarker:withBinding:	AK	Cl	NSObject;NSKeyValueBinding	cm	id	id	NSString *
objectDidBeginEditing:	AK	Cl	NSObject;NSKeyValueBinding	im	void	id
objectDidEndEditing:	AK	Cl	NSObject;NSKeyValueBinding	im	void	id
discardEditing	AK	Cl	NSObject;NSKeyValueBinding	im	void
commitEditing	AK	Cl	NSObject;NSKeyValueBinding	im	BOOL
commitEditingWithDelegate:didCommitSelector:contextInfo:	AK	Cl	NSObject;NSKeyValueBinding	im	void	id	SEL	void *
init	AK	Cl	NSLayoutManager	im	id
textStorage	AK	Cl	NSLayoutManager	im	NSTextStorage *
setTextStorage:	AK	Cl	NSLayoutManager	im	void	NSTextStorage *
replaceTextStorage:	AK	Cl	NSLayoutManager	im	void	NSTextStorage *
glyphGenerator	AK	Cl	NSLayoutManager	im	NSGlyphGenerator *
setGlyphGenerator:	AK	Cl	NSLayoutManager	im	void	NSGlyphGenerator *
typesetter	AK	Cl	NSLayoutManager	im	NSTypesetter *
setTypesetter:	AK	Cl	NSLayoutManager	im	void	NSTypesetter *
delegate	AK	Cl	NSLayoutManager	im	id
setDelegate:	AK	Cl	NSLayoutManager	im	void	id
textContainers	AK	Cl	NSLayoutManager	im	NSArray *
addTextContainer:	AK	Cl	NSLayoutManager	im	void	NSTextContainer *
insertTextContainer:atIndex:	AK	Cl	NSLayoutManager	im	void	NSTextContainer *	unsigned
removeTextContainerAtIndex:	AK	Cl	NSLayoutManager	im	void	unsigned
textContainerChangedGeometry:	AK	Cl	NSLayoutManager	im	void	NSTextContainer *
textContainerChangedTextView:	AK	Cl	NSLayoutManager	im	void	NSTextContainer *
invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:	AK	Cl	NSLayoutManager	im	void	NSRange	int	NSRangePointer
invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:	AK	Cl	NSLayoutManager	im	void	NSRange	BOOL	NSRangePointer
invalidateDisplayForGlyphRange:	AK	Cl	NSLayoutManager	im	void	NSRange
invalidateDisplayForCharacterRange:	AK	Cl	NSLayoutManager	im	void	NSRange
textStorage:edited:range:changeInLength:invalidatedRange:	AK	Cl	NSLayoutManager	im	void	NSTextStorage *	unsigned	NSRange	int	NSRange
setBackgroundLayoutEnabled:	AK	Cl	NSLayoutManager	im	void	BOOL
backgroundLayoutEnabled	AK	Cl	NSLayoutManager	im	BOOL
setShowsInvisibleCharacters:	AK	Cl	NSLayoutManager	im	void	BOOL
showsInvisibleCharacters	AK	Cl	NSLayoutManager	im	BOOL
setShowsControlCharacters:	AK	Cl	NSLayoutManager	im	void	BOOL
showsControlCharacters	AK	Cl	NSLayoutManager	im	BOOL
setHyphenationFactor:	AK	Cl	NSLayoutManager	im	void	float
hyphenationFactor	AK	Cl	NSLayoutManager	im	float
setDefaultAttachmentScaling:	AK	Cl	NSLayoutManager	im	void	NSImageScaling
defaultAttachmentScaling	AK	Cl	NSLayoutManager	im	NSImageScaling
insertGlyph:atGlyphIndex:characterIndex:	AK	Cl	NSLayoutManager	im	void	NSGlyph	unsigned	unsigned
replaceGlyphAtIndex:withGlyph:	AK	Cl	NSLayoutManager	im	void	unsigned	NSGlyph
deleteGlyphsInRange:	AK	Cl	NSLayoutManager	im	void	NSRange
setCharacterIndex:forGlyphAtIndex:	AK	Cl	NSLayoutManager	im	void	unsigned	unsigned
numberOfGlyphs	AK	Cl	NSLayoutManager	im	unsigned
glyphAtIndex:	AK	Cl	NSLayoutManager	im	NSGlyph	unsigned
glyphAtIndex:isValidIndex:	AK	Cl	NSLayoutManager	im	NSGlyph	unsigned	BOOL *
isValidGlyphIndex:	AK	Cl	NSLayoutManager	im	BOOL	unsigned
getGlyphs:range:	AK	Cl	NSLayoutManager	im	unsigned	NSGlyph *	NSRange
characterIndexForGlyphAtIndex:	AK	Cl	NSLayoutManager	im	unsigned	unsigned
setIntAttribute:value:forGlyphAtIndex:	AK	Cl	NSLayoutManager	im	void	int	int	unsigned
intAttribute:forGlyphAtIndex:	AK	Cl	NSLayoutManager	im	int	int	unsigned
setTextContainer:forGlyphRange:	AK	Cl	NSLayoutManager	im	void	NSTextContainer *	NSRange
setLineFragmentRect:forGlyphRange:usedRect:	AK	Cl	NSLayoutManager	im	void	NSRect	NSRange	NSRect
setExtraLineFragmentRect:usedRect:textContainer:	AK	Cl	NSLayoutManager	im	void	NSRect	NSRect	NSTextContainer *
setDrawsOutsideLineFragment:forGlyphAtIndex:	AK	Cl	NSLayoutManager	im	void	BOOL	unsigned
setLocation:forStartOfGlyphRange:	AK	Cl	NSLayoutManager	im	void	NSPoint	NSRange
setNotShownAttribute:forGlyphAtIndex:	AK	Cl	NSLayoutManager	im	void	BOOL	unsigned
setAttachmentSize:forGlyphRange:	AK	Cl	NSLayoutManager	im	void	NSSize	NSRange
textContainerForGlyphAtIndex:effectiveRange:	AK	Cl	NSLayoutManager	im	NSTextContainer *	unsigned	NSRangePointer
usedRectForTextContainer:	AK	Cl	NSLayoutManager	im	NSRect	NSTextContainer *
lineFragmentRectForGlyphAtIndex:effectiveRange:	AK	Cl	NSLayoutManager	im	NSRect	unsigned	NSRangePointer
lineFragmentUsedRectForGlyphAtIndex:effectiveRange:	AK	Cl	NSLayoutManager	im	NSRect	unsigned	NSRangePointer
lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:	AK	Cl	NSLayoutManager	im	NSRect	unsigned	NSRangePointer	BOOL
lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:	AK	Cl	NSLayoutManager	im	NSRect	unsigned	NSRangePointer	BOOL
textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:	AK	Cl	NSLayoutManager	im	NSTextContainer *	unsigned	NSRangePointer	BOOL
attachmentSizeForGlyphAtIndex:	AK	Cl	NSLayoutManager	im	NSSize	unsigned
extraLineFragmentRect	AK	Cl	NSLayoutManager	im	NSRect
extraLineFragmentUsedRect	AK	Cl	NSLayoutManager	im	NSRect
extraLineFragmentTextContainer	AK	Cl	NSLayoutManager	im	NSTextContainer *
drawsOutsideLineFragmentForGlyphAtIndex:	AK	Cl	NSLayoutManager	im	BOOL	unsigned
locationForGlyphAtIndex:	AK	Cl	NSLayoutManager	im	NSPoint	unsigned
notShownAttributeForGlyphAtIndex:	AK	Cl	NSLayoutManager	im	BOOL	unsigned
setLayoutRect:forTextBlock:glyphRange:	AK	Cl	NSLayoutManager	im	void	NSRect	NSTextBlock *	NSRange
setBoundsRect:forTextBlock:glyphRange:	AK	Cl	NSLayoutManager	im	void	NSRect	NSTextBlock *	NSRange
layoutRectForTextBlock:glyphRange:	AK	Cl	NSLayoutManager	im	NSRect	NSTextBlock *	NSRange
boundsRectForTextBlock:glyphRange:	AK	Cl	NSLayoutManager	im	NSRect	NSTextBlock *	NSRange
layoutRectForTextBlock:atIndex:effectiveRange:	AK	Cl	NSLayoutManager	im	NSRect	NSTextBlock *	unsigned	NSRangePointer
boundsRectForTextBlock:atIndex:effectiveRange:	AK	Cl	NSLayoutManager	im	NSRect	NSTextBlock *	unsigned	NSRangePointer
glyphRangeForCharacterRange:actualCharacterRange:	AK	Cl	NSLayoutManager	im	NSRange	NSRange	NSRangePointer
characterRangeForGlyphRange:actualGlyphRange:	AK	Cl	NSLayoutManager	im	NSRange	NSRange	NSRangePointer
glyphRangeForTextContainer:	AK	Cl	NSLayoutManager	im	NSRange	NSTextContainer *
rangeOfNominallySpacedGlyphsContainingIndex:	AK	Cl	NSLayoutManager	im	NSRange	unsigned
rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:	AK	Cl	NSLayoutManager	im	NSRectArray	NSRange	NSRange	NSTextContainer *	unsigned *
rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:	AK	Cl	NSLayoutManager	im	NSRectArray	NSRange	NSRange	NSTextContainer *	unsigned *
boundingRectForGlyphRange:inTextContainer:	AK	Cl	NSLayoutManager	im	NSRect	NSRange	NSTextContainer *
glyphRangeForBoundingRect:inTextContainer:	AK	Cl	NSLayoutManager	im	NSRange	NSRect	NSTextContainer *
glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:	AK	Cl	NSLayoutManager	im	NSRange	NSRect	NSTextContainer *
glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:	AK	Cl	NSLayoutManager	im	unsigned	NSPoint	NSTextContainer *	float *
glyphIndexForPoint:inTextContainer:	AK	Cl	NSLayoutManager	im	unsigned	NSPoint	NSTextContainer *
fractionOfDistanceThroughGlyphForPoint:inTextContainer:	AK	Cl	NSLayoutManager	im	float	NSPoint	NSTextContainer *
getFirstUnlaidCharacterIndex:glyphIndex:	AK	Cl	NSLayoutManager	im	void	unsigned *	unsigned *
firstUnlaidCharacterIndex	AK	Cl	NSLayoutManager	im	unsigned
firstUnlaidGlyphIndex	AK	Cl	NSLayoutManager	im	unsigned
usesScreenFonts	AK	Cl	NSLayoutManager	im	BOOL
setUsesScreenFonts:	AK	Cl	NSLayoutManager	im	void	BOOL
substituteFontForFont:	AK	Cl	NSLayoutManager	im	NSFont *	NSFont *
temporaryAttributesAtCharacterIndex:effectiveRange:	AK	Cl	NSLayoutManager	im	NSDictionary *	unsigned	NSRangePointer
setTemporaryAttributes:forCharacterRange:	AK	Cl	NSLayoutManager	im	void	NSDictionary *	NSRange
addTemporaryAttributes:forCharacterRange:	AK	Cl	NSLayoutManager	im	void	NSDictionary *	NSRange
removeTemporaryAttribute:forCharacterRange:	AK	Cl	NSLayoutManager	im	void	NSString *	NSRange
getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:	AK	Cl	NSLayoutManager	im	unsigned	NSRange	NSGlyph *	unsigned *	NSGlyphInscription *	BOOL *	unsigned char *
getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:	AK	Cl	NSLayoutManager	im	unsigned	NSRange	NSGlyph *	unsigned *	NSGlyphInscription *	BOOL *
typesetterBehavior	AK	Cl	NSLayoutManager	im	NSTypesetterBehavior
setTypesetterBehavior:	AK	Cl	NSLayoutManager	im	void	NSTypesetterBehavior
defaultLineHeightForFont:	AK	Cl	NSLayoutManager	im	float	NSFont *
rulerMarkersForTextView:paragraphStyle:ruler:	AK	Cl	NSLayoutManager	im	NSArray *	NSTextView *	NSParagraphStyle *	NSRulerView *
rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:	AK	Cl	NSLayoutManager	im	NSView *	NSTextView *	NSParagraphStyle *	NSRulerView *	BOOL
layoutManagerOwnsFirstResponderInWindow:	AK	Cl	NSLayoutManager	im	BOOL	NSWindow *
firstTextView	AK	Cl	NSLayoutManager	im	NSTextView *
textViewForBeginningOfSelection	AK	Cl	NSLayoutManager	im	NSTextView *
drawBackgroundForGlyphRange:atPoint:	AK	Cl	NSLayoutManager	im	void	NSRange	NSPoint
drawGlyphsForGlyphRange:atPoint:	AK	Cl	NSLayoutManager	im	void	NSRange	NSPoint
showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:	AK	Cl	NSLayoutManager	im	void	char *	unsigned	NSRange	NSPoint	NSFont *	NSColor *	NSSize
showAttachmentCell:inRect:characterIndex:	AK	Cl	NSLayoutManager	im	void	NSCell *	NSRect	unsigned
drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:	AK	Cl	NSLayoutManager	im	void	NSRange	int	float	NSRect	NSRange	NSPoint
underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:	AK	Cl	NSLayoutManager	im	void	NSRange	int	NSRect	NSRange	NSPoint
drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:	AK	Cl	NSLayoutManager	im	void	NSRange	int	float	NSRect	NSRange	NSPoint
strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:	AK	Cl	NSLayoutManager	im	void	NSRange	int	NSRect	NSRange	NSPoint
layoutManagerDidInvalidateLayout:	AK	Cl	NSObject;NSLayoutManager	dm	void	NSLayoutManager *
layoutManager:didCompleteLayoutForTextContainer:atEnd:	AK	Cl	NSObject;NSLayoutManager	dm	void	NSLayoutManager *	NSTextContainer *	BOOL
minValue	AK	Cl	NSLevelIndicator	im	double
setMinValue:	AK	Cl	NSLevelIndicator	im	void	double
maxValue	AK	Cl	NSLevelIndicator	im	double
setMaxValue:	AK	Cl	NSLevelIndicator	im	void	double
warningValue	AK	Cl	NSLevelIndicator	im	double
setWarningValue:	AK	Cl	NSLevelIndicator	im	void	double
criticalValue	AK	Cl	NSLevelIndicator	im	double
setCriticalValue:	AK	Cl	NSLevelIndicator	im	void	double
tickMarkPosition	AK	Cl	NSLevelIndicator	im	NSTickMarkPosition
setTickMarkPosition:	AK	Cl	NSLevelIndicator	im	void	NSTickMarkPosition
numberOfTickMarks	AK	Cl	NSLevelIndicator	im	int
setNumberOfTickMarks:	AK	Cl	NSLevelIndicator	im	void	int
numberOfMajorTickMarks	AK	Cl	NSLevelIndicator	im	int
setNumberOfMajorTickMarks:	AK	Cl	NSLevelIndicator	im	void	int
tickMarkValueAtIndex:	AK	Cl	NSLevelIndicator	im	double	int
rectOfTickMarkAtIndex:	AK	Cl	NSLevelIndicator	im	NSRect	int
initWithLevelIndicatorStyle:	AK	Cl	NSLevelIndicatorCell	im	id	NSLevelIndicatorStyle
levelIndicatorStyle	AK	Cl	NSLevelIndicatorCell	im	NSLevelIndicatorStyle
setLevelIndicatorStyle:	AK	Cl	NSLevelIndicatorCell	im	void	NSLevelIndicatorStyle
minValue	AK	Cl	NSLevelIndicatorCell	im	double
setMinValue:	AK	Cl	NSLevelIndicatorCell	im	void	double
maxValue	AK	Cl	NSLevelIndicatorCell	im	double
setMaxValue:	AK	Cl	NSLevelIndicatorCell	im	void	double
warningValue	AK	Cl	NSLevelIndicatorCell	im	double
setWarningValue:	AK	Cl	NSLevelIndicatorCell	im	void	double
criticalValue	AK	Cl	NSLevelIndicatorCell	im	double
setCriticalValue:	AK	Cl	NSLevelIndicatorCell	im	void	double
setTickMarkPosition:	AK	Cl	NSLevelIndicatorCell	im	void	NSTickMarkPosition
tickMarkPosition	AK	Cl	NSLevelIndicatorCell	im	NSTickMarkPosition
setNumberOfTickMarks:	AK	Cl	NSLevelIndicatorCell	im	void	int
numberOfTickMarks	AK	Cl	NSLevelIndicatorCell	im	int
setNumberOfMajorTickMarks:	AK	Cl	NSLevelIndicatorCell	im	void	int
numberOfMajorTickMarks	AK	Cl	NSLevelIndicatorCell	im	int
rectOfTickMarkAtIndex:	AK	Cl	NSLevelIndicatorCell	im	NSRect	int
tickMarkValueAtIndex:	AK	Cl	NSLevelIndicatorCell	im	double	int
setImage:	AK	Cl	NSLevelIndicatorCell	im	void	NSImage *
initWithFrame:	AK	Cl	NSMatrix	im	id	NSRect
initWithFrame:mode:prototype:numberOfRows:numberOfColumns:	AK	Cl	NSMatrix	im	id	NSRect	int	NSCell *	int	int
initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:	AK	Cl	NSMatrix	im	id	NSRect	int	Class	int	int
setCellClass:	AK	Cl	NSMatrix	im	void	Class
cellClass	AK	Cl	NSMatrix	im	Class
prototype	AK	Cl	NSMatrix	im	id
setPrototype:	AK	Cl	NSMatrix	im	void	NSCell *
makeCellAtRow:column:	AK	Cl	NSMatrix	im	NSCell *	int	int
mode	AK	Cl	NSMatrix	im	NSMatrixMode
setMode:	AK	Cl	NSMatrix	im	void	NSMatrixMode
setAllowsEmptySelection:	AK	Cl	NSMatrix	im	void	BOOL
allowsEmptySelection	AK	Cl	NSMatrix	im	BOOL
sendAction:to:forAllCells:	AK	Cl	NSMatrix	im	void	SEL	id	BOOL
cells	AK	Cl	NSMatrix	im	NSArray *
sortUsingSelector:	AK	Cl	NSMatrix	im	void	SEL
sortUsingFunction:context:	AK	Cl	NSMatrix	im	void	int (*)(id, id, void *)	void *
selectedCell	AK	Cl	NSMatrix	im	id
selectedCells	AK	Cl	NSMatrix	im	NSArray *
selectedRow	AK	Cl	NSMatrix	im	int
selectedColumn	AK	Cl	NSMatrix	im	int
setSelectionByRect:	AK	Cl	NSMatrix	im	void	BOOL
isSelectionByRect	AK	Cl	NSMatrix	im	BOOL
setSelectionFrom:to:anchor:highlight:	AK	Cl	NSMatrix	im	void	int	int	int	BOOL
deselectSelectedCell	AK	Cl	NSMatrix	im	void
deselectAllCells	AK	Cl	NSMatrix	im	void
selectCellAtRow:column:	AK	Cl	NSMatrix	im	void	int	int
selectAll:	AK	Cl	NSMatrix	im	void	id
selectCellWithTag:	AK	Cl	NSMatrix	im	BOOL	int
cellSize	AK	Cl	NSMatrix	im	NSSize
setCellSize:	AK	Cl	NSMatrix	im	void	NSSize
intercellSpacing	AK	Cl	NSMatrix	im	NSSize
setIntercellSpacing:	AK	Cl	NSMatrix	im	void	NSSize
setScrollable:	AK	Cl	NSMatrix	im	void	BOOL
setBackgroundColor:	AK	Cl	NSMatrix	im	void	NSColor *
backgroundColor	AK	Cl	NSMatrix	im	NSColor *
setCellBackgroundColor:	AK	Cl	NSMatrix	im	void	NSColor *
cellBackgroundColor	AK	Cl	NSMatrix	im	NSColor *
setDrawsCellBackground:	AK	Cl	NSMatrix	im	void	BOOL
drawsCellBackground	AK	Cl	NSMatrix	im	BOOL
setDrawsBackground:	AK	Cl	NSMatrix	im	void	BOOL
drawsBackground	AK	Cl	NSMatrix	im	BOOL
setState:atRow:column:	AK	Cl	NSMatrix	im	void	int	int	int
getNumberOfRows:columns:	AK	Cl	NSMatrix	im	void	int *	int *
numberOfRows	AK	Cl	NSMatrix	im	int
numberOfColumns	AK	Cl	NSMatrix	im	int
cellAtRow:column:	AK	Cl	NSMatrix	im	id	int	int
cellFrameAtRow:column:	AK	Cl	NSMatrix	im	NSRect	int	int
getRow:column:ofCell:	AK	Cl	NSMatrix	im	BOOL	int *	int *	NSCell *
getRow:column:forPoint:	AK	Cl	NSMatrix	im	BOOL	int *	int *	NSPoint
renewRows:columns:	AK	Cl	NSMatrix	im	void	int	int
putCell:atRow:column:	AK	Cl	NSMatrix	im	void	NSCell *	int	int
addRow	AK	Cl	NSMatrix	im	void
addRowWithCells:	AK	Cl	NSMatrix	im	void	NSArray *
insertRow:	AK	Cl	NSMatrix	im	void	int
insertRow:withCells:	AK	Cl	NSMatrix	im	void	int	NSArray *
removeRow:	AK	Cl	NSMatrix	im	void	int
addColumn	AK	Cl	NSMatrix	im	void
addColumnWithCells:	AK	Cl	NSMatrix	im	void	NSArray *
insertColumn:	AK	Cl	NSMatrix	im	void	int
insertColumn:withCells:	AK	Cl	NSMatrix	im	void	int	NSArray *
removeColumn:	AK	Cl	NSMatrix	im	void	int
cellWithTag:	AK	Cl	NSMatrix	im	id	int
doubleAction	AK	Cl	NSMatrix	im	SEL
setDoubleAction:	AK	Cl	NSMatrix	im	void	SEL
setAutosizesCells:	AK	Cl	NSMatrix	im	void	BOOL
autosizesCells	AK	Cl	NSMatrix	im	BOOL
sizeToCells	AK	Cl	NSMatrix	im	void
setValidateSize:	AK	Cl	NSMatrix	im	void	BOOL
drawCellAtRow:column:	AK	Cl	NSMatrix	im	void	int	int
highlightCell:atRow:column:	AK	Cl	NSMatrix	im	void	BOOL	int	int
setAutoscroll:	AK	Cl	NSMatrix	im	void	BOOL
isAutoscroll	AK	Cl	NSMatrix	im	BOOL
scrollCellToVisibleAtRow:column:	AK	Cl	NSMatrix	im	void	int	int
mouseDownFlags	AK	Cl	NSMatrix	im	int
mouseDown:	AK	Cl	NSMatrix	im	void	NSEvent *
performKeyEquivalent:	AK	Cl	NSMatrix	im	BOOL	NSEvent *
sendAction	AK	Cl	NSMatrix	im	BOOL
sendDoubleAction	AK	Cl	NSMatrix	im	void
delegate	AK	Cl	NSMatrix	im	id
setDelegate:	AK	Cl	NSMatrix	im	void	id
textShouldBeginEditing:	AK	Cl	NSMatrix	im	BOOL	NSText *
textShouldEndEditing:	AK	Cl	NSMatrix	im	BOOL	NSText *
textDidBeginEditing:	AK	Cl	NSMatrix	im	void	NSNotification *
textDidEndEditing:	AK	Cl	NSMatrix	im	void	NSNotification *
textDidChange:	AK	Cl	NSMatrix	im	void	NSNotification *
selectText:	AK	Cl	NSMatrix	im	void	id
selectTextAtRow:column:	AK	Cl	NSMatrix	im	id	int	int
acceptsFirstMouse:	AK	Cl	NSMatrix	im	BOOL	NSEvent *
resetCursorRects	AK	Cl	NSMatrix	im	void
setToolTip:forCell:	AK	Cl	NSMatrix	im	void	NSString *	NSCell *
toolTipForCell:	AK	Cl	NSMatrix	im	NSString *	NSCell *
setTabKeyTraversesCells:	AK	Cl	NSMatrix	im	void	BOOL
tabKeyTraversesCells	AK	Cl	NSMatrix	im	BOOL
setKeyCell:	AK	Cl	NSMatrix	im	void	NSCell *
keyCell	AK	Cl	NSMatrix	im	id
setMenuZone:	AK	Cl	NSMenu	cm	void	NSZone *
menuZone	AK	Cl	NSMenu	cm	NSZone *
popUpContextMenu:withEvent:forView:	AK	Cl	NSMenu	cm	void	NSMenu *	NSEvent *	NSView *
popUpContextMenu:withEvent:forView:withFont:	AK	Cl	NSMenu	cm	void	NSMenu *	NSEvent *	NSView *	NSFont *
setMenuBarVisible:	AK	Cl	NSMenu	cm	void	BOOL
menuBarVisible	AK	Cl	NSMenu	cm	BOOL
initWithTitle:	AK	Cl	NSMenu	im	id	NSString *
setTitle:	AK	Cl	NSMenu	im	void	NSString *
title	AK	Cl	NSMenu	im	NSString *
setSupermenu:	AK	Cl	NSMenu	im	void	NSMenu *
supermenu	AK	Cl	NSMenu	im	NSMenu *
insertItem:atIndex:	AK	Cl	NSMenu	im	void	id <NSMenuItem>	int
addItem:	AK	Cl	NSMenu	im	void	id <NSMenuItem>
insertItemWithTitle:action:keyEquivalent:atIndex:	AK	Cl	NSMenu	im	id <NSMenuItem>	NSString *	SEL	NSString *	int
addItemWithTitle:action:keyEquivalent:	AK	Cl	NSMenu	im	id <NSMenuItem>	NSString *	SEL	NSString *
removeItemAtIndex:	AK	Cl	NSMenu	im	void	int
removeItem:	AK	Cl	NSMenu	im	void	id <NSMenuItem>
setSubmenu:forItem:	AK	Cl	NSMenu	im	void	NSMenu *	id <NSMenuItem>
itemArray	AK	Cl	NSMenu	im	NSArray *
numberOfItems	AK	Cl	NSMenu	im	int
indexOfItem:	AK	Cl	NSMenu	im	int	id <NSMenuItem>
indexOfItemWithTitle:	AK	Cl	NSMenu	im	int	NSString *
indexOfItemWithTag:	AK	Cl	NSMenu	im	int	int
indexOfItemWithRepresentedObject:	AK	Cl	NSMenu	im	int	id
indexOfItemWithSubmenu:	AK	Cl	NSMenu	im	int	NSMenu *
indexOfItemWithTarget:andAction:	AK	Cl	NSMenu	im	int	id	SEL
itemAtIndex:	AK	Cl	NSMenu	im	id <NSMenuItem>	int
itemWithTitle:	AK	Cl	NSMenu	im	id <NSMenuItem>	NSString *
itemWithTag:	AK	Cl	NSMenu	im	id <NSMenuItem>	int
setAutoenablesItems:	AK	Cl	NSMenu	im	void	BOOL
autoenablesItems	AK	Cl	NSMenu	im	BOOL
performKeyEquivalent:	AK	Cl	NSMenu	im	BOOL	NSEvent *
update	AK	Cl	NSMenu	im	void
setMenuChangedMessagesEnabled:	AK	Cl	NSMenu	im	void	BOOL
menuChangedMessagesEnabled	AK	Cl	NSMenu	im	BOOL
itemChanged:	AK	Cl	NSMenu	im	void	id <NSMenuItem>
helpRequested:	AK	Cl	NSMenu	im	void	NSEvent *
setMenuRepresentation:	AK	Cl	NSMenu	im	void	id
menuRepresentation	AK	Cl	NSMenu	im	id
setContextMenuRepresentation:	AK	Cl	NSMenu	im	void	id
contextMenuRepresentation	AK	Cl	NSMenu	im	id
setTearOffMenuRepresentation:	AK	Cl	NSMenu	im	void	id
tearOffMenuRepresentation	AK	Cl	NSMenu	im	id
isTornOff	AK	Cl	NSMenu	im	BOOL
attachedMenu	AK	Cl	NSMenu	im	NSMenu *
isAttached	AK	Cl	NSMenu	im	BOOL
sizeToFit	AK	Cl	NSMenu	im	void
locationForSubmenu:	AK	Cl	NSMenu	im	NSPoint	NSMenu *
performActionForItemAtIndex:	AK	Cl	NSMenu	im	void	int
setDelegate:	AK	Cl	NSMenu	im	void	id
delegate	AK	Cl	NSMenu	im	id
menuBarHeight	AK	Cl	NSMenu	im	float
submenuAction:	AK	Cl	NSMenu	im	void	id
validateMenuItem:	AK	Cl	NSObject;NSMenu	im	BOOL	id <NSMenuItem>
menuNeedsUpdate:	AK	Cl	NSObject;NSMenu	dm	void	NSMenu *
numberOfItemsInMenu:	AK	Cl	NSObject;NSMenu	dm	int	NSMenu *
menu:updateItem:atIndex:shouldCancel:	AK	Cl	NSObject;NSMenu	dm	BOOL	NSMenu *	NSMenuItem *	int	BOOL
menuHasKeyEquivalent:forEvent:target:action:	AK	Cl	NSObject;NSMenu	dm	BOOL	NSMenu *	NSEvent *	id *	SEL *
setUsesUserKeyEquivalents:	AK	Pr	NSMenuItem	cm	void	BOOL
usesUserKeyEquivalents	AK	Pr	NSMenuItem	cm	BOOL
separatorItem	AK	Pr	NSMenuItem	cm	id <NSMenuItem>
initWithTitle:action:keyEquivalent:	AK	Pr	NSMenuItem	im	id	NSString *	SEL	NSString *
setMenu:	AK	Pr	NSMenuItem	im	void	NSMenu *
menu	AK	Pr	NSMenuItem	im	NSMenu *
hasSubmenu	AK	Pr	NSMenuItem	im	BOOL
setSubmenu:	AK	Pr	NSMenuItem	im	void	NSMenu *
submenu	AK	Pr	NSMenuItem	im	NSMenu *
setTitle:	AK	Pr	NSMenuItem	im	void	NSString *
title	AK	Pr	NSMenuItem	im	NSString *
setAttributedTitle:	AK	Pr	NSMenuItem	im	void	NSAttributedString *
attributedTitle	AK	Pr	NSMenuItem	im	NSAttributedString *
isSeparatorItem	AK	Pr	NSMenuItem	im	BOOL
setKeyEquivalent:	AK	Pr	NSMenuItem	im	void	NSString *
keyEquivalent	AK	Pr	NSMenuItem	im	NSString *
setKeyEquivalentModifierMask:	AK	Pr	NSMenuItem	im	void	unsigned int
keyEquivalentModifierMask	AK	Pr	NSMenuItem	im	unsigned int
userKeyEquivalent	AK	Pr	NSMenuItem	im	NSString *
userKeyEquivalentModifierMask	AK	Pr	NSMenuItem	im	unsigned int
setMnemonicLocation:	AK	Pr	NSMenuItem	im	void	unsigned
mnemonicLocation	AK	Pr	NSMenuItem	im	unsigned
mnemonic	AK	Pr	NSMenuItem	im	NSString *
setTitleWithMnemonic:	AK	Pr	NSMenuItem	im	void	NSString *
setImage:	AK	Pr	NSMenuItem	im	void	NSImage *
image	AK	Pr	NSMenuItem	im	NSImage *
setState:	AK	Pr	NSMenuItem	im	void	int
state	AK	Pr	NSMenuItem	im	int
setOnStateImage:	AK	Pr	NSMenuItem	im	void	NSImage *
onStateImage	AK	Pr	NSMenuItem	im	NSImage *
setOffStateImage:	AK	Pr	NSMenuItem	im	void	NSImage *
offStateImage	AK	Pr	NSMenuItem	im	NSImage *
setMixedStateImage:	AK	Pr	NSMenuItem	im	void	NSImage *
mixedStateImage	AK	Pr	NSMenuItem	im	NSImage *
setEnabled:	AK	Pr	NSMenuItem	im	void	BOOL
isEnabled	AK	Pr	NSMenuItem	im	BOOL
setAlternate:	AK	Pr	NSMenuItem	im	void	BOOL
isAlternate	AK	Pr	NSMenuItem	im	BOOL
setIndentationLevel:	AK	Pr	NSMenuItem	im	void	int
indentationLevel	AK	Pr	NSMenuItem	im	int
setTarget:	AK	Pr	NSMenuItem	im	void	id
target	AK	Pr	NSMenuItem	im	id
setAction:	AK	Pr	NSMenuItem	im	void	SEL
action	AK	Pr	NSMenuItem	im	SEL
setTag:	AK	Pr	NSMenuItem	im	void	int
tag	AK	Pr	NSMenuItem	im	int
setRepresentedObject:	AK	Pr	NSMenuItem	im	void	id
representedObject	AK	Pr	NSMenuItem	im	id
setToolTip:	AK	Pr	NSMenuItem	im	void	NSString *
toolTip	AK	Pr	NSMenuItem	im	NSString *
setUsesUserKeyEquivalents:	AK	Cl	NSMenuItem	cm	void	BOOL
usesUserKeyEquivalents	AK	Cl	NSMenuItem	cm	BOOL
separatorItem	AK	Cl	NSMenuItem	cm	id <NSMenuItem>
initWithTitle:action:keyEquivalent:	AK	Cl	NSMenuItem	im	id	NSString *	SEL	NSString *
setMenu:	AK	Cl	NSMenuItem	im	void	NSMenu *
menu	AK	Cl	NSMenuItem	im	NSMenu *
hasSubmenu	AK	Cl	NSMenuItem	im	BOOL
setSubmenu:	AK	Cl	NSMenuItem	im	void	NSMenu *
submenu	AK	Cl	NSMenuItem	im	NSMenu *
setTitle:	AK	Cl	NSMenuItem	im	void	NSString *
title	AK	Cl	NSMenuItem	im	NSString *
setAttributedTitle:	AK	Cl	NSMenuItem	im	void	NSAttributedString *
attributedTitle	AK	Cl	NSMenuItem	im	NSAttributedString *
isSeparatorItem	AK	Cl	NSMenuItem	im	BOOL
setKeyEquivalent:	AK	Cl	NSMenuItem	im	void	NSString *
keyEquivalent	AK	Cl	NSMenuItem	im	NSString *
setKeyEquivalentModifierMask:	AK	Cl	NSMenuItem	im	void	unsigned int
keyEquivalentModifierMask	AK	Cl	NSMenuItem	im	unsigned int
userKeyEquivalent	AK	Cl	NSMenuItem	im	NSString *
setMnemonicLocation:	AK	Cl	NSMenuItem	im	void	unsigned
mnemonicLocation	AK	Cl	NSMenuItem	im	unsigned
mnemonic	AK	Cl	NSMenuItem	im	NSString *
setTitleWithMnemonic:	AK	Cl	NSMenuItem	im	void	NSString *
setImage:	AK	Cl	NSMenuItem	im	void	NSImage *
image	AK	Cl	NSMenuItem	im	NSImage *
setState:	AK	Cl	NSMenuItem	im	void	int
state	AK	Cl	NSMenuItem	im	int
setOnStateImage:	AK	Cl	NSMenuItem	im	void	NSImage *
onStateImage	AK	Cl	NSMenuItem	im	NSImage *
setOffStateImage:	AK	Cl	NSMenuItem	im	void	NSImage *
offStateImage	AK	Cl	NSMenuItem	im	NSImage *
setMixedStateImage:	AK	Cl	NSMenuItem	im	void	NSImage *
mixedStateImage	AK	Cl	NSMenuItem	im	NSImage *
setEnabled:	AK	Cl	NSMenuItem	im	void	BOOL
isEnabled	AK	Cl	NSMenuItem	im	BOOL
setAlternate:	AK	Cl	NSMenuItem	im	void	BOOL
isAlternate	AK	Cl	NSMenuItem	im	BOOL
setIndentationLevel:	AK	Cl	NSMenuItem	im	void	int
indentationLevel	AK	Cl	NSMenuItem	im	int
setTarget:	AK	Cl	NSMenuItem	im	void	id
target	AK	Cl	NSMenuItem	im	id
setAction:	AK	Cl	NSMenuItem	im	void	SEL
action	AK	Cl	NSMenuItem	im	SEL
setTag:	AK	Cl	NSMenuItem	im	void	int
tag	AK	Cl	NSMenuItem	im	int
setRepresentedObject:	AK	Cl	NSMenuItem	im	void	id
representedObject	AK	Cl	NSMenuItem	im	id
setToolTip:	AK	Cl	NSMenuItem	im	void	NSString *
toolTip	AK	Cl	NSMenuItem	im	NSString *
setMenuItem:	AK	Cl	NSMenuItemCell	im	void	NSMenuItem *
menuItem	AK	Cl	NSMenuItemCell	im	NSMenuItem *
setMenuView:	AK	Cl	NSMenuItemCell	im	void	NSMenuView *
menuView	AK	Cl	NSMenuItemCell	im	NSMenuView *
setHighlighted:	AK	Cl	NSMenuItemCell	im	void	BOOL
isHighlighted	AK	Cl	NSMenuItemCell	im	BOOL
setNeedsSizing:	AK	Cl	NSMenuItemCell	im	void	BOOL
needsSizing	AK	Cl	NSMenuItemCell	im	BOOL
calcSize	AK	Cl	NSMenuItemCell	im	void
setNeedsDisplay:	AK	Cl	NSMenuItemCell	im	void	BOOL
needsDisplay	AK	Cl	NSMenuItemCell	im	BOOL
stateImageWidth	AK	Cl	NSMenuItemCell	im	float
imageWidth	AK	Cl	NSMenuItemCell	im	float
titleWidth	AK	Cl	NSMenuItemCell	im	float
keyEquivalentWidth	AK	Cl	NSMenuItemCell	im	float
stateImageRectForBounds:	AK	Cl	NSMenuItemCell	im	NSRect	NSRect
imageRectForBounds:	AK	Cl	NSMenuItemCell	im	NSRect	NSRect
titleRectForBounds:	AK	Cl	NSMenuItemCell	im	NSRect	NSRect
keyEquivalentRectForBounds:	AK	Cl	NSMenuItemCell	im	NSRect	NSRect
drawSeparatorItemWithFrame:inView:	AK	Cl	NSMenuItemCell	im	void	NSRect	NSView *
drawStateImageWithFrame:inView:	AK	Cl	NSMenuItemCell	im	void	NSRect	NSView *
drawImageWithFrame:inView:	AK	Cl	NSMenuItemCell	im	void	NSRect	NSView *
drawTitleWithFrame:inView:	AK	Cl	NSMenuItemCell	im	void	NSRect	NSView *
drawKeyEquivalentWithFrame:inView:	AK	Cl	NSMenuItemCell	im	void	NSRect	NSView *
drawBorderAndBackgroundWithFrame:inView:	AK	Cl	NSMenuItemCell	im	void	NSRect	NSView *
tag	AK	Cl	NSMenuItemCell	im	int
menuBarHeight	AK	Cl	NSMenuView	cm	float
initWithFrame:	AK	Cl	NSMenuView	im	id	NSRect
initAsTearOff	AK	Cl	NSMenuView	im	id
setMenu:	AK	Cl	NSMenuView	im	void	NSMenu *
menu	AK	Cl	NSMenuView	im	NSMenu *
itemChanged:	AK	Cl	NSMenuView	im	void	NSNotification *
itemAdded:	AK	Cl	NSMenuView	im	void	NSNotification *
itemRemoved:	AK	Cl	NSMenuView	im	void	NSNotification *
update	AK	Cl	NSMenuView	im	void
setHorizontal:	AK	Cl	NSMenuView	im	void	BOOL
isHorizontal	AK	Cl	NSMenuView	im	BOOL
setFont:	AK	Cl	NSMenuView	im	void	NSFont *
font	AK	Cl	NSMenuView	im	NSFont *
innerRect	AK	Cl	NSMenuView	im	NSRect
rectOfItemAtIndex:	AK	Cl	NSMenuView	im	NSRect	int
indexOfItemAtPoint:	AK	Cl	NSMenuView	im	int	NSPoint
setNeedsDisplayForItemAtIndex:	AK	Cl	NSMenuView	im	void	int
setHighlightedItemIndex:	AK	Cl	NSMenuView	im	void	int
highlightedItemIndex	AK	Cl	NSMenuView	im	int
stateImageOffset	AK	Cl	NSMenuView	im	float
stateImageWidth	AK	Cl	NSMenuView	im	float
imageAndTitleOffset	AK	Cl	NSMenuView	im	float
imageAndTitleWidth	AK	Cl	NSMenuView	im	float
keyEquivalentOffset	AK	Cl	NSMenuView	im	float
keyEquivalentWidth	AK	Cl	NSMenuView	im	float
setMenuItemCell:forItemAtIndex:	AK	Cl	NSMenuView	im	void	NSMenuItemCell *	int
menuItemCellForItemAtIndex:	AK	Cl	NSMenuView	im	NSMenuItemCell *	int
attachedMenuView	AK	Cl	NSMenuView	im	NSMenuView *
setNeedsSizing:	AK	Cl	NSMenuView	im	void	BOOL
needsSizing	AK	Cl	NSMenuView	im	BOOL
sizeToFit	AK	Cl	NSMenuView	im	void
attachedMenu	AK	Cl	NSMenuView	im	NSMenu *
isAttached	AK	Cl	NSMenuView	im	BOOL
isTornOff	AK	Cl	NSMenuView	im	BOOL
locationForSubmenu:	AK	Cl	NSMenuView	im	NSPoint	NSMenu *
setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:	AK	Cl	NSMenuView	im	void	NSRect	NSScreen *	NSRectEdge	int
detachSubmenu	AK	Cl	NSMenuView	im	void
attachSubmenuForItemAtIndex:	AK	Cl	NSMenuView	im	void	int
performActionWithHighlightingForItemAtIndex:	AK	Cl	NSMenuView	im	void	int
trackWithEvent:	AK	Cl	NSMenuView	im	BOOL	NSEvent *
horizontalEdgePadding	AK	Cl	NSMenuView	im	float
setHorizontalEdgePadding:	AK	Cl	NSMenuView	im	void	float
initWithMovie:	AK	Cl	NSMovie	im	id	void * /*Movie */
initWithURL:byReference:	AK	Cl	NSMovie	im	id	NSURL *	BOOL
initWithPasteboard:	AK	Cl	NSMovie	im	id	NSPasteboard *
QTMovie	AK	Cl	NSMovie	im	void */*Movie */
URL	AK	Cl	NSMovie	im	NSURL *
movieUnfilteredFileTypes	AK	Cl	NSMovie	cm	NSArray *
movieUnfilteredPasteboardTypes	AK	Cl	NSMovie	cm	NSArray *
canInitWithPasteboard:	AK	Cl	NSMovie	cm	BOOL	NSPasteboard *
setMovie:	AK	Cl	NSMovieView	im	void	NSMovie *
movie	AK	Cl	NSMovieView	im	NSMovie *
movieController	AK	Cl	NSMovieView	im	void * /*MovieController */
movieRect	AK	Cl	NSMovieView	im	NSRect
start:	AK	Cl	NSMovieView	im	void	id
stop:	AK	Cl	NSMovieView	im	void	id
isPlaying	AK	Cl	NSMovieView	im	BOOL
gotoPosterFrame:	AK	Cl	NSMovieView	im	void	id
gotoBeginning:	AK	Cl	NSMovieView	im	void	id
gotoEnd:	AK	Cl	NSMovieView	im	void	id
stepForward:	AK	Cl	NSMovieView	im	void	id
stepBack:	AK	Cl	NSMovieView	im	void	id
setRate:	AK	Cl	NSMovieView	im	void	float
rate	AK	Cl	NSMovieView	im	float
setVolume:	AK	Cl	NSMovieView	im	void	float
volume	AK	Cl	NSMovieView	im	float
setMuted:	AK	Cl	NSMovieView	im	void	BOOL
isMuted	AK	Cl	NSMovieView	im	BOOL
setLoopMode:	AK	Cl	NSMovieView	im	void	NSQTMovieLoopMode
loopMode	AK	Cl	NSMovieView	im	NSQTMovieLoopMode
setPlaysSelectionOnly:	AK	Cl	NSMovieView	im	void	BOOL
playsSelectionOnly	AK	Cl	NSMovieView	im	BOOL
setPlaysEveryFrame:	AK	Cl	NSMovieView	im	void	BOOL
playsEveryFrame	AK	Cl	NSMovieView	im	BOOL
showController:adjustingSize:	AK	Cl	NSMovieView	im	void	BOOL	BOOL
isControllerVisible	AK	Cl	NSMovieView	im	BOOL
resizeWithMagnification:	AK	Cl	NSMovieView	im	void	float
sizeForMagnification:	AK	Cl	NSMovieView	im	NSSize	float
setEditable:	AK	Cl	NSMovieView	im	void	BOOL
isEditable	AK	Cl	NSMovieView	im	BOOL
cut:	AK	Cl	NSMovieView	im	void	id
copy:	AK	Cl	NSMovieView	im	void	id
paste:	AK	Cl	NSMovieView	im	void	id
delete:	AK	Cl	NSMovieView	im	void	id
selectAll:	AK	Cl	NSMovieView	im	void	id
clear:	AK	Cl	NSMovieView	im	void	id
initWithContentsOfURL:	AK	Cl	NSNib	im	id	NSURL *
initWithNibNamed:bundle:	AK	Cl	NSNib	im	id	NSString *	NSBundle *
instantiateNibWithExternalNameTable:	AK	Cl	NSNib	im	BOOL	NSDictionary *
instantiateNibWithOwner:topLevelObjects:	AK	Cl	NSNib	im	BOOL	id	NSArray **
source	AK	Cl	NSNibConnector	im	id
setSource:	AK	Cl	NSNibConnector	im	void	id
destination	AK	Cl	NSNibConnector	im	id
setDestination:	AK	Cl	NSNibConnector	im	void	id
label	AK	Cl	NSNibConnector	im	NSString *
setLabel:	AK	Cl	NSNibConnector	im	void	NSString *
replaceObject:withObject:	AK	Cl	NSNibConnector	im	void	id	id
establishConnection	AK	Cl	NSNibConnector	im	void
establishConnection	AK	Cl	NSNibControlConnector	im	void
loadNibFile:externalNameTable:withZone:	AK	Cl	NSBundle;NSNibLoading	cm	BOOL	NSString *	NSDictionary *	NSZone *
loadNibNamed:owner:	AK	Cl	NSBundle;NSNibLoading	cm	BOOL	NSString *	id
loadNibFile:externalNameTable:withZone:	AK	Cl	NSBundle;NSNibLoading	im	BOOL	NSString *	NSDictionary *	NSZone *
awakeFromNib	AK	Cl	NSObject;NSNibLoading	im	void
establishConnection	AK	Cl	NSNibOutletConnector	im	void
initWithContent:	AK	Cl	NSObjectController	im	id	id
setContent:	AK	Cl	NSObjectController	im	void	id
content	AK	Cl	NSObjectController	im	id
selection	AK	Cl	NSObjectController	im	id
selectedObjects	AK	Cl	NSObjectController	im	NSArray *
setAutomaticallyPreparesContent:	AK	Cl	NSObjectController	im	void	BOOL
automaticallyPreparesContent	AK	Cl	NSObjectController	im	BOOL
prepareContent	AK	Cl	NSObjectController	im	void
setObjectClass:	AK	Cl	NSObjectController	im	void	Class
objectClass	AK	Cl	NSObjectController	im	Class
newObject	AK	Cl	NSObjectController	im	id
addObject:	AK	Cl	NSObjectController	im	void	id
removeObject:	AK	Cl	NSObjectController	im	void	id
setEditable:	AK	Cl	NSObjectController	im	void	BOOL
isEditable	AK	Cl	NSObjectController	im	BOOL
add:	AK	Cl	NSObjectController	im	void	id
canAdd	AK	Cl	NSObjectController	im	BOOL
remove:	AK	Cl	NSObjectController	im	void	id
canRemove	AK	Cl	NSObjectController	im	BOOL
validateMenuItem:	AK	Cl	NSObjectController	im	BOOL	id <NSMenuItem>
managedObjectContext	AK	Cl	NSObjectController	im	NSManagedObjectContext *
setManagedObjectContext:	AK	Cl	NSObjectController	im	void	NSManagedObjectContext *
entityName	AK	Cl	NSObjectController	im	NSString *
setEntityName:	AK	Cl	NSObjectController	im	void	NSString *
fetchPredicate	AK	Cl	NSObjectController	im	NSPredicate *
setFetchPredicate:	AK	Cl	NSObjectController	im	void	NSPredicate *
fetchWithRequest:merge:error:	AK	Cl	NSObjectController	im	BOOL	NSFetchRequest *	BOOL	NSError **
fetch:	AK	Cl	NSObjectController	im	void	id
initWithAttributes:	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	id	NSOpenGLPixelFormatAttribute *
initWithData:	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	id	NSData *
attributes	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	NSData *
setAttributes:	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	void	NSData *
getValues:forAttribute:forVirtualScreen:	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	void	long *	NSOpenGLPixelFormatAttribute	int
numberOfVirtualScreens	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	int
CGLPixelFormatObj	AK	Cl	NSOpenGLPixelFormat;NSOpenGL	im	void *
initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:	AK	Cl	NSOpenGLPixelBuffer;NSOpenGL	im	id	unsigned long/*GLenum */	unsigned long/*GLenum */	long/*GLenum */	int	int
pixelsWide	AK	Cl	NSOpenGLPixelBuffer;NSOpenGL	im	int
pixelsHigh	AK	Cl	NSOpenGLPixelBuffer;NSOpenGL	im	int
textureTarget	AK	Cl	NSOpenGLPixelBuffer;NSOpenGL	im	unsigned long/*GLenum */
textureInternalFormat	AK	Cl	NSOpenGLPixelBuffer;NSOpenGL	im	unsigned long/*GLenum */
textureMaxMipMapLevel	AK	Cl	NSOpenGLPixelBuffer;NSOpenGL	im	long/*GLint */
initWithFormat:shareContext:	AK	Cl	NSOpenGLContext;NSOpenGL	im	id	NSOpenGLPixelFormat *	NSOpenGLContext *
setView:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	NSView *
view	AK	Cl	NSOpenGLContext;NSOpenGL	im	NSView *
setFullScreen	AK	Cl	NSOpenGLContext;NSOpenGL	im	void
setOffScreen:width:height:rowbytes:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	void *	long	long	long
clearDrawable	AK	Cl	NSOpenGLContext;NSOpenGL	im	void
update	AK	Cl	NSOpenGLContext;NSOpenGL	im	void
flushBuffer	AK	Cl	NSOpenGLContext;NSOpenGL	im	void
makeCurrentContext	AK	Cl	NSOpenGLContext;NSOpenGL	im	void
clearCurrentContext	AK	Cl	NSOpenGLContext;NSOpenGL	cm	void
currentContext	AK	Cl	NSOpenGLContext;NSOpenGL	cm	NSOpenGLContext *
copyAttributesFromContext:withMask:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	NSOpenGLContext *	unsigned long
setValues:forParameter:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	const long *	NSOpenGLContextParameter
getValues:forParameter:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	long *	NSOpenGLContextParameter
setCurrentVirtualScreen:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	int
currentVirtualScreen	AK	Cl	NSOpenGLContext;NSOpenGL	im	int
createTexture:fromView:internalFormat:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	unsigned long/*GLenum */	NSView *	unsigned long/*GLenum */
CGLContextObj	AK	Cl	NSOpenGLContext;NSOpenGL	im	void *
setPixelBuffer:cubeMapFace:mipMapLevel:currentVirtualScreen:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	NSOpenGLPixelBuffer *	unsigned long/*GLenum */	long/*GLint */	int
pixelBuffer	AK	Cl	NSOpenGLContext;NSOpenGL	im	NSOpenGLPixelBuffer *
pixelBufferCubeMapFace	AK	Cl	NSOpenGLContext;NSOpenGL	im	unsigned long/*GLenum */
pixelBufferMipMapLevel	AK	Cl	NSOpenGLContext;NSOpenGL	im	long/*GLint */
setTextureImageToPixelBuffer:colorBuffer:	AK	Cl	NSOpenGLContext;NSOpenGL	im	void	NSOpenGLPixelBuffer *	unsigned long/*GLenum */
defaultPixelFormat	AK	Cl	NSOpenGLView	cm	NSOpenGLPixelFormat *
initWithFrame:pixelFormat:	AK	Cl	NSOpenGLView	im	id	NSRect	NSOpenGLPixelFormat *
setOpenGLContext:	AK	Cl	NSOpenGLView	im	void	NSOpenGLContext *
openGLContext	AK	Cl	NSOpenGLView	im	NSOpenGLContext *
clearGLContext	AK	Cl	NSOpenGLView	im	void
update	AK	Cl	NSOpenGLView	im	void
reshape	AK	Cl	NSOpenGLView	im	void
setPixelFormat:	AK	Cl	NSOpenGLView	im	void	NSOpenGLPixelFormat *
pixelFormat	AK	Cl	NSOpenGLView	im	NSOpenGLPixelFormat *
prepareOpenGL	AK	Cl	NSOpenGLView	im	void
openPanel	AK	Cl	NSOpenPanel	cm	NSOpenPanel *
URLs	AK	Cl	NSOpenPanel	im	NSArray *
filenames	AK	Cl	NSOpenPanel	im	NSArray *
resolvesAliases	AK	Cl	NSOpenPanel	im	BOOL
setResolvesAliases:	AK	Cl	NSOpenPanel	im	void	BOOL
canChooseDirectories	AK	Cl	NSOpenPanel	im	BOOL
setCanChooseDirectories:	AK	Cl	NSOpenPanel	im	void	BOOL
allowsMultipleSelection	AK	Cl	NSOpenPanel	im	BOOL
setAllowsMultipleSelection:	AK	Cl	NSOpenPanel	im	void	BOOL
canChooseFiles	AK	Cl	NSOpenPanel	im	BOOL
setCanChooseFiles:	AK	Cl	NSOpenPanel	im	void	BOOL
beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:	AK	Cl	NSOpenPanel	im	void	NSString *	NSString *	NSArray *	NSWindow *	id	SEL	void *
beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:	AK	Cl	NSOpenPanel	im	void	NSString *	NSString *	NSArray *	id	SEL	void *
runModalForDirectory:file:types:	AK	Cl	NSOpenPanel	im	int	NSString *	NSString *	NSArray *
runModalForTypes:	AK	Cl	NSOpenPanel	im	int	NSArray *
setOutlineTableColumn:	AK	Cl	NSOutlineView	im	void	NSTableColumn *
outlineTableColumn	AK	Cl	NSOutlineView	im	NSTableColumn *
isExpandable:	AK	Cl	NSOutlineView	im	BOOL	id
expandItem:expandChildren:	AK	Cl	NSOutlineView	im	void	id	BOOL
expandItem:	AK	Cl	NSOutlineView	im	void	id
collapseItem:collapseChildren:	AK	Cl	NSOutlineView	im	void	id	BOOL
collapseItem:	AK	Cl	NSOutlineView	im	void	id
reloadItem:reloadChildren:	AK	Cl	NSOutlineView	im	void	id	BOOL
reloadItem:	AK	Cl	NSOutlineView	im	void	id
itemAtRow:	AK	Cl	NSOutlineView	im	id	int
rowForItem:	AK	Cl	NSOutlineView	im	int	id
levelForItem:	AK	Cl	NSOutlineView	im	int	id
levelForRow:	AK	Cl	NSOutlineView	im	int	int
isItemExpanded:	AK	Cl	NSOutlineView	im	BOOL	id
setIndentationPerLevel:	AK	Cl	NSOutlineView	im	void	float
indentationPerLevel	AK	Cl	NSOutlineView	im	float
setIndentationMarkerFollowsCell:	AK	Cl	NSOutlineView	im	void	BOOL
indentationMarkerFollowsCell	AK	Cl	NSOutlineView	im	BOOL
setAutoresizesOutlineColumn:	AK	Cl	NSOutlineView	im	void	BOOL
autoresizesOutlineColumn	AK	Cl	NSOutlineView	im	BOOL
setDropItem:dropChildIndex:	AK	Cl	NSOutlineView	im	void	id	int
shouldCollapseAutoExpandedItemsForDeposited:	AK	Cl	NSOutlineView	im	BOOL	BOOL
autosaveExpandedItems	AK	Cl	NSOutlineView	im	BOOL
setAutosaveExpandedItems:	AK	Cl	NSOutlineView	im	void	BOOL
outlineView:child:ofItem:	AK	Cl	NSObject;NSOutlineView	im	id	NSOutlineView *	int	id
outlineView:isItemExpandable:	AK	Cl	NSObject;NSOutlineView	im	BOOL	NSOutlineView *	id
outlineView:numberOfChildrenOfItem:	AK	Cl	NSObject;NSOutlineView	im	int	NSOutlineView *	id
outlineView:objectValueForTableColumn:byItem:	AK	Cl	NSObject;NSOutlineView	im	id	NSOutlineView *	NSTableColumn *	id
outlineView:setObjectValue:forTableColumn:byItem:	AK	Cl	NSObject;NSOutlineView	im	void	NSOutlineView *	id	NSTableColumn *	id
outlineView:itemForPersistentObject:	AK	Cl	NSObject;NSOutlineView	im	id	NSOutlineView *	id
outlineView:persistentObjectForItem:	AK	Cl	NSObject;NSOutlineView	im	id	NSOutlineView *	id
outlineView:sortDescriptorsDidChange:	AK	Cl	NSObject;NSOutlineView	im	void	NSOutlineView *	NSArray *
outlineView:writeItems:toPasteboard:	AK	Cl	NSObject;NSOutlineView	im	BOOL	NSOutlineView *	NSArray *	NSPasteboard *
outlineView:validateDrop:proposedItem:proposedChildIndex:	AK	Cl	NSObject;NSOutlineView	im	NSDragOperation	NSOutlineView *	id <NSDraggingInfo>	id	int
outlineView:acceptDrop:item:childIndex:	AK	Cl	NSObject;NSOutlineView	im	BOOL	NSOutlineView *	id <NSDraggingInfo>	id	int
outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:	AK	Cl	NSObject;NSOutlineView	im	NSArray *	NSOutlineView *	NSURL *	NSArray *
outlineView:willDisplayCell:forTableColumn:item:	AK	Cl	NSObject;NSOutlineView	dm	void	NSOutlineView *	id	NSTableColumn *	id
outlineView:shouldEditTableColumn:item:	AK	Cl	NSObject;NSOutlineView	dm	BOOL	NSOutlineView *	NSTableColumn *	id
selectionShouldChangeInOutlineView:	AK	Cl	NSObject;NSOutlineView	dm	BOOL	NSOutlineView *
outlineView:shouldSelectItem:	AK	Cl	NSObject;NSOutlineView	dm	BOOL	NSOutlineView *	id
outlineView:shouldSelectTableColumn:	AK	Cl	NSObject;NSOutlineView	dm	BOOL	NSOutlineView *	NSTableColumn *
outlineView:mouseDownInHeaderOfTableColumn:	AK	Cl	NSObject;NSOutlineView	dm	void	NSOutlineView *	NSTableColumn *
outlineView:didClickTableColumn:	AK	Cl	NSObject;NSOutlineView	dm	void	NSOutlineView *	NSTableColumn *
outlineView:didDragTableColumn:	AK	Cl	NSObject;NSOutlineView	dm	void	NSOutlineView *	NSTableColumn *
outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:	AK	Cl	NSObject;NSOutlineView	dm	NSString *	NSOutlineView *	NSCell *	NSRectPointer	NSTableColumn *	id	NSPoint
outlineView:heightOfRowByItem:	AK	Cl	NSObject;NSOutlineView	dm	float	NSOutlineView *	id
outlineView:shouldExpandItem:	AK	Cl	NSObject;NSOutlineView	dm	BOOL	NSOutlineView *	id
outlineView:shouldCollapseItem:	AK	Cl	NSObject;NSOutlineView	dm	BOOL	NSOutlineView *	id
outlineView:willDisplayOutlineCell:forTableColumn:item:	AK	Cl	NSObject;NSOutlineView	dm	void	NSOutlineView *	id	NSTableColumn *	id
outlineViewSelectionDidChange:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewColumnDidMove:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewColumnDidResize:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewSelectionIsChanging:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewItemWillExpand:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewItemDidExpand:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewItemWillCollapse:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
outlineViewItemDidCollapse:	AK	Cl	NSObject;NSOutlineView	dm	void	NSNotification *
pageLayout	AK	Cl	NSPageLayout	cm	NSPageLayout *
beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:	AK	Cl	NSPageLayout	im	void	NSPrintInfo *	NSWindow *	id	SEL	void *
runModal	AK	Cl	NSPageLayout	im	int
runModalWithPrintInfo:	AK	Cl	NSPageLayout	im	int	NSPrintInfo *
accessoryView	AK	Cl	NSPageLayout	im	NSView *
setAccessoryView:	AK	Cl	NSPageLayout	im	void	NSView *
printInfo	AK	Cl	NSPageLayout	im	NSPrintInfo *
readPrintInfo	AK	Cl	NSPageLayout	im	void
writePrintInfo	AK	Cl	NSPageLayout	im	void
convertOldFactor:newFactor:	AK	Cl	NSPageLayout	im	void	float *	float *
pickedButton:	AK	Cl	NSPageLayout	im	void	id
pickedOrientation:	AK	Cl	NSPageLayout	im	void	id
pickedPaperSize:	AK	Cl	NSPageLayout	im	void	id
pickedUnits:	AK	Cl	NSPageLayout	im	void	id
runPageLayout:	AK	Cl	NSApplication;NSPageLayout	im	void	id
pageLayout	AK	Cl	NSPageLayout	cm	NSPageLayout *
setAccessoryView:	AK	Cl	NSPageLayout	im	void	NSView *
accessoryView	AK	Cl	NSPageLayout	im	NSView *
readPrintInfo	AK	Cl	NSPageLayout	im	void
writePrintInfo	AK	Cl	NSPageLayout	im	void
printInfo	AK	Cl	NSPageLayout	im	NSPrintInfo *
runModalWithPrintInfo:	AK	Cl	NSPageLayout	im	int	NSPrintInfo *
runModal	AK	Cl	NSPageLayout	im	int
runPageLayout:	AK	Cl	NSApplication;NSPageLayout	im	void	id
isFloatingPanel	AK	Cl	NSPanel	im	BOOL
setFloatingPanel:	AK	Cl	NSPanel	im	void	BOOL
becomesKeyOnlyIfNeeded	AK	Cl	NSPanel	im	BOOL
setBecomesKeyOnlyIfNeeded:	AK	Cl	NSPanel	im	void	BOOL
worksWhenModal	AK	Cl	NSPanel	im	BOOL
setWorksWhenModal:	AK	Cl	NSPanel	im	void	BOOL
initWithTextAlignment:location:options:	AK	Cl	NSTextTab;NSParagraphStyle	im	id	NSTextAlignment	float	NSDictionary *
alignment	AK	Cl	NSTextTab;NSParagraphStyle	im	NSTextAlignment
options	AK	Cl	NSTextTab;NSParagraphStyle	im	NSDictionary *
initWithType:location:	AK	Cl	NSTextTab;NSParagraphStyle	im	id	NSTextTabType	float
location	AK	Cl	NSTextTab;NSParagraphStyle	im	float
tabStopType	AK	Cl	NSTextTab;NSParagraphStyle	im	NSTextTabType
defaultParagraphStyle	AK	Cl	NSParagraphStyle	cm	NSParagraphStyle *
defaultWritingDirectionForLanguage:	AK	Cl	NSParagraphStyle	cm	NSWritingDirection	NSString *
lineSpacing	AK	Cl	NSParagraphStyle	im	float
paragraphSpacing	AK	Cl	NSParagraphStyle	im	float
alignment	AK	Cl	NSParagraphStyle	im	NSTextAlignment
headIndent	AK	Cl	NSParagraphStyle	im	float
tailIndent	AK	Cl	NSParagraphStyle	im	float
firstLineHeadIndent	AK	Cl	NSParagraphStyle	im	float
tabStops	AK	Cl	NSParagraphStyle	im	NSArray *
minimumLineHeight	AK	Cl	NSParagraphStyle	im	float
maximumLineHeight	AK	Cl	NSParagraphStyle	im	float
lineBreakMode	AK	Cl	NSParagraphStyle	im	NSLineBreakMode
baseWritingDirection	AK	Cl	NSParagraphStyle	im	NSWritingDirection
lineHeightMultiple	AK	Cl	NSParagraphStyle	im	float
paragraphSpacingBefore	AK	Cl	NSParagraphStyle	im	float
defaultTabInterval	AK	Cl	NSParagraphStyle	im	float
textBlocks	AK	Cl	NSParagraphStyle	im	NSArray *
textLists	AK	Cl	NSParagraphStyle	im	NSArray *
hyphenationFactor	AK	Cl	NSParagraphStyle	im	float
tighteningFactorForTruncation	AK	Cl	NSParagraphStyle	im	float
headerLevel	AK	Cl	NSParagraphStyle	im	int
setLineSpacing:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setParagraphSpacing:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setAlignment:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSTextAlignment
setFirstLineHeadIndent:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setHeadIndent:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setTailIndent:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setLineBreakMode:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSLineBreakMode
setMinimumLineHeight:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setMaximumLineHeight:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
addTabStop:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSTextTab *
removeTabStop:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSTextTab *
setTabStops:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSArray *
setParagraphStyle:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSParagraphStyle *
setBaseWritingDirection:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSWritingDirection
setLineHeightMultiple:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setParagraphSpacingBefore:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setDefaultTabInterval:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setTextBlocks:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSArray *
setTextLists:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	NSArray *
setHyphenationFactor:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setTighteningFactorForTruncation:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	float
setHeaderLevel:	AK	Cl	NSMutableParagraphStyle;NSParagraphStyle	im	void	int
generalPasteboard	AK	Cl	NSPasteboard	cm	NSPasteboard *
pasteboardWithName:	AK	Cl	NSPasteboard	cm	NSPasteboard *	NSString *
pasteboardWithUniqueName	AK	Cl	NSPasteboard	cm	NSPasteboard *
typesFilterableTo:	AK	Cl	NSPasteboard	cm	NSArray *	NSString *
pasteboardByFilteringFile:	AK	Cl	NSPasteboard	cm	NSPasteboard *	NSString *
pasteboardByFilteringData:ofType:	AK	Cl	NSPasteboard	cm	NSPasteboard *	NSData *	NSString *
pasteboardByFilteringTypesInPasteboard:	AK	Cl	NSPasteboard	cm	NSPasteboard *	NSPasteboard *
name	AK	Cl	NSPasteboard	im	NSString *
releaseGlobally	AK	Cl	NSPasteboard	im	void
declareTypes:owner:	AK	Cl	NSPasteboard	im	int	NSArray *	id
addTypes:owner:	AK	Cl	NSPasteboard	im	int	NSArray *	id
changeCount	AK	Cl	NSPasteboard	im	int
types	AK	Cl	NSPasteboard	im	NSArray *
availableTypeFromArray:	AK	Cl	NSPasteboard	im	NSString *	NSArray *
setData:forType:	AK	Cl	NSPasteboard	im	BOOL	NSData *	NSString *
dataForType:	AK	Cl	NSPasteboard	im	NSData *	NSString *
setPropertyList:forType:	AK	Cl	NSPasteboard	im	BOOL	id	NSString *
propertyListForType:	AK	Cl	NSPasteboard	im	id	NSString *
setString:forType:	AK	Cl	NSPasteboard	im	BOOL	NSString *	NSString *
stringForType:	AK	Cl	NSPasteboard	im	NSString *	NSString *
writeFileContents:	AK	Cl	NSPasteboard	im	BOOL	NSString *
readFileContentsType:toFile:	AK	Cl	NSPasteboard	im	NSString *	NSString *	NSString *
writeFileWrapper:	AK	Cl	NSPasteboard	im	BOOL	NSFileWrapper *
readFileWrapper	AK	Cl	NSPasteboard	im	NSFileWrapper *
URLFromPasteboard:	AK	Cl	NSURL;NSPasteboard	cm	NSURL *	NSPasteboard *
writeToPasteboard:	AK	Cl	NSURL;NSPasteboard	im	void	NSPasteboard *
pasteboard:provideDataForType:	AK	Cl	NSObject;NSPasteboard	im	void	NSPasteboard *	NSString *
pasteboardChangedOwner:	AK	Cl	NSObject;NSPasteboard	im	void	NSPasteboard *
imageRepWithData:	AK	Cl	NSPDFImageRep	cm	id	NSData *
initWithData:	AK	Cl	NSPDFImageRep	im	id	NSData *
PDFRepresentation	AK	Cl	NSPDFImageRep	im	NSData *
bounds	AK	Cl	NSPDFImageRep	im	NSRect
setCurrentPage:	AK	Cl	NSPDFImageRep	im	void	int
currentPage	AK	Cl	NSPDFImageRep	im	int
pageCount	AK	Cl	NSPDFImageRep	im	int
managedObjectContext	AK	Cl	NSPersistentDocument	im	NSManagedObjectContext *
setManagedObjectContext:	AK	Cl	NSPersistentDocument	im	void	NSManagedObjectContext *
managedObjectModel	AK	Cl	NSPersistentDocument	im	id
configurePersistentStoreCoordinatorForURL:ofType:error:	AK	Cl	NSPersistentDocument	im	BOOL	NSURL *	NSString *	NSError **
persistentStoreTypeForFileType:	AK	Cl	NSPersistentDocument	im	NSString *	NSString *
writeToURL:ofType:forSaveOperation:originalContentsURL:error:	AK	Cl	NSPersistentDocument	im	BOOL	NSURL *	NSString *	NSSaveOperationType	NSURL *	NSError **
readFromURL:ofType:error:	AK	Cl	NSPersistentDocument	im	BOOL	NSURL *	NSString *	NSError **
revertToContentsOfURL:ofType:error:	AK	Cl	NSPersistentDocument	im	BOOL	NSURL *	NSString *	NSError **
imageRepWithData:	AK	Cl	NSPICTImageRep	cm	id	NSData *
initWithData:	AK	Cl	NSPICTImageRep	im	id	NSData *
PICTRepresentation	AK	Cl	NSPICTImageRep	im	NSData *
boundingBox	AK	Cl	NSPICTImageRep	im	NSRect
initWithFrame:pullsDown:	AK	Cl	NSPopUpButton	im	id	NSRect	BOOL
setMenu:	AK	Cl	NSPopUpButton	im	void	NSMenu *
menu	AK	Cl	NSPopUpButton	im	NSMenu *
setPullsDown:	AK	Cl	NSPopUpButton	im	void	BOOL
pullsDown	AK	Cl	NSPopUpButton	im	BOOL
setAutoenablesItems:	AK	Cl	NSPopUpButton	im	void	BOOL
autoenablesItems	AK	Cl	NSPopUpButton	im	BOOL
setPreferredEdge:	AK	Cl	NSPopUpButton	im	void	NSRectEdge
preferredEdge	AK	Cl	NSPopUpButton	im	NSRectEdge
addItemWithTitle:	AK	Cl	NSPopUpButton	im	void	NSString *
addItemsWithTitles:	AK	Cl	NSPopUpButton	im	void	NSArray *
insertItemWithTitle:atIndex:	AK	Cl	NSPopUpButton	im	void	NSString *	int
removeItemWithTitle:	AK	Cl	NSPopUpButton	im	void	NSString *
removeItemAtIndex:	AK	Cl	NSPopUpButton	im	void	int
removeAllItems	AK	Cl	NSPopUpButton	im	void
itemArray	AK	Cl	NSPopUpButton	im	NSArray *
numberOfItems	AK	Cl	NSPopUpButton	im	int
indexOfItem:	AK	Cl	NSPopUpButton	im	int	id <NSMenuItem>
indexOfItemWithTitle:	AK	Cl	NSPopUpButton	im	int	NSString *
indexOfItemWithTag:	AK	Cl	NSPopUpButton	im	int	int
indexOfItemWithRepresentedObject:	AK	Cl	NSPopUpButton	im	int	id
indexOfItemWithTarget:andAction:	AK	Cl	NSPopUpButton	im	int	id	SEL
itemAtIndex:	AK	Cl	NSPopUpButton	im	id <NSMenuItem>	int
itemWithTitle:	AK	Cl	NSPopUpButton	im	id <NSMenuItem>	NSString *
lastItem	AK	Cl	NSPopUpButton	im	id <NSMenuItem>
selectItem:	AK	Cl	NSPopUpButton	im	void	id <NSMenuItem>
selectItemAtIndex:	AK	Cl	NSPopUpButton	im	void	int
selectItemWithTitle:	AK	Cl	NSPopUpButton	im	void	NSString *
selectItemWithTag:	AK	Cl	NSPopUpButton	im	BOOL	int
setTitle:	AK	Cl	NSPopUpButton	im	void	NSString *
selectedItem	AK	Cl	NSPopUpButton	im	id <NSMenuItem>
indexOfSelectedItem	AK	Cl	NSPopUpButton	im	int
synchronizeTitleAndSelectedItem	AK	Cl	NSPopUpButton	im	void
itemTitleAtIndex:	AK	Cl	NSPopUpButton	im	NSString *	int
itemTitles	AK	Cl	NSPopUpButton	im	NSArray *
titleOfSelectedItem	AK	Cl	NSPopUpButton	im	NSString *
initTextCell:pullsDown:	AK	Cl	NSPopUpButtonCell	im	id	NSString *	BOOL
setMenu:	AK	Cl	NSPopUpButtonCell	im	void	NSMenu *
menu	AK	Cl	NSPopUpButtonCell	im	NSMenu *
setPullsDown:	AK	Cl	NSPopUpButtonCell	im	void	BOOL
pullsDown	AK	Cl	NSPopUpButtonCell	im	BOOL
setAutoenablesItems:	AK	Cl	NSPopUpButtonCell	im	void	BOOL
autoenablesItems	AK	Cl	NSPopUpButtonCell	im	BOOL
setPreferredEdge:	AK	Cl	NSPopUpButtonCell	im	void	NSRectEdge
preferredEdge	AK	Cl	NSPopUpButtonCell	im	NSRectEdge
setUsesItemFromMenu:	AK	Cl	NSPopUpButtonCell	im	void	BOOL
usesItemFromMenu	AK	Cl	NSPopUpButtonCell	im	BOOL
setAltersStateOfSelectedItem:	AK	Cl	NSPopUpButtonCell	im	void	BOOL
altersStateOfSelectedItem	AK	Cl	NSPopUpButtonCell	im	BOOL
addItemWithTitle:	AK	Cl	NSPopUpButtonCell	im	void	NSString *
addItemsWithTitles:	AK	Cl	NSPopUpButtonCell	im	void	NSArray *
insertItemWithTitle:atIndex:	AK	Cl	NSPopUpButtonCell	im	void	NSString *	int
removeItemWithTitle:	AK	Cl	NSPopUpButtonCell	im	void	NSString *
removeItemAtIndex:	AK	Cl	NSPopUpButtonCell	im	void	int
removeAllItems	AK	Cl	NSPopUpButtonCell	im	void
itemArray	AK	Cl	NSPopUpButtonCell	im	NSArray *
numberOfItems	AK	Cl	NSPopUpButtonCell	im	int
indexOfItem:	AK	Cl	NSPopUpButtonCell	im	int	id <NSMenuItem>
indexOfItemWithTitle:	AK	Cl	NSPopUpButtonCell	im	int	NSString *
indexOfItemWithTag:	AK	Cl	NSPopUpButtonCell	im	int	int
indexOfItemWithRepresentedObject:	AK	Cl	NSPopUpButtonCell	im	int	id
indexOfItemWithTarget:andAction:	AK	Cl	NSPopUpButtonCell	im	int	id	SEL
itemAtIndex:	AK	Cl	NSPopUpButtonCell	im	id <NSMenuItem>	int
itemWithTitle:	AK	Cl	NSPopUpButtonCell	im	id <NSMenuItem>	NSString *
lastItem	AK	Cl	NSPopUpButtonCell	im	id <NSMenuItem>
selectItem:	AK	Cl	NSPopUpButtonCell	im	void	id <NSMenuItem>
selectItemAtIndex:	AK	Cl	NSPopUpButtonCell	im	void	int
selectItemWithTitle:	AK	Cl	NSPopUpButtonCell	im	void	NSString *
selectItemWithTag:	AK	Cl	NSPopUpButtonCell	im	BOOL	int
setTitle:	AK	Cl	NSPopUpButtonCell	im	void	NSString *
selectedItem	AK	Cl	NSPopUpButtonCell	im	id <NSMenuItem>
indexOfSelectedItem	AK	Cl	NSPopUpButtonCell	im	int
synchronizeTitleAndSelectedItem	AK	Cl	NSPopUpButtonCell	im	void
itemTitleAtIndex:	AK	Cl	NSPopUpButtonCell	im	NSString *	int
itemTitles	AK	Cl	NSPopUpButtonCell	im	NSArray *
titleOfSelectedItem	AK	Cl	NSPopUpButtonCell	im	NSString *
attachPopUpWithFrame:inView:	AK	Cl	NSPopUpButtonCell	im	void	NSRect	NSView *
dismissPopUp	AK	Cl	NSPopUpButtonCell	im	void
performClickWithFrame:inView:	AK	Cl	NSPopUpButtonCell	im	void	NSRect	NSView *
arrowPosition	AK	Cl	NSPopUpButtonCell	im	NSPopUpArrowPosition
setArrowPosition:	AK	Cl	NSPopUpButtonCell	im	void	NSPopUpArrowPosition
objectValue	AK	Cl	NSPopUpButtonCell	im	id <NSCopying>
setObjectValue:	AK	Cl	NSPopUpButtonCell	im	void	id <NSCopying>
printerNames	AK	Cl	NSPrinter	cm	NSArray *
printerTypes	AK	Cl	NSPrinter	cm	NSArray *
printerWithName:	AK	Cl	NSPrinter	cm	NSPrinter *	NSString *
printerWithType:	AK	Cl	NSPrinter	cm	NSPrinter *	NSString *
name	AK	Cl	NSPrinter	im	NSString *
type	AK	Cl	NSPrinter	im	NSString *
languageLevel	AK	Cl	NSPrinter	im	int
pageSizeForPaper:	AK	Cl	NSPrinter	im	NSSize	NSString *
statusForTable:	AK	Cl	NSPrinter	im	NSPrinterTableStatus	NSString *
isKey:inTable:	AK	Cl	NSPrinter	im	BOOL	NSString *	NSString *
booleanForKey:inTable:	AK	Cl	NSPrinter	im	BOOL	NSString *	NSString *
floatForKey:inTable:	AK	Cl	NSPrinter	im	float	NSString *	NSString *
intForKey:inTable:	AK	Cl	NSPrinter	im	int	NSString *	NSString *
rectForKey:inTable:	AK	Cl	NSPrinter	im	NSRect	NSString *	NSString *
sizeForKey:inTable:	AK	Cl	NSPrinter	im	NSSize	NSString *	NSString *
stringForKey:inTable:	AK	Cl	NSPrinter	im	NSString *	NSString *	NSString *
stringListForKey:inTable:	AK	Cl	NSPrinter	im	NSArray *	NSString *	NSString *
deviceDescription	AK	Cl	NSPrinter	im	NSDictionary *
imageRectForPaper:	AK	Cl	NSPrinter	im	NSRect	NSString *
acceptsBinary	AK	Cl	NSPrinter	im	BOOL
isColor	AK	Cl	NSPrinter	im	BOOL
isFontAvailable:	AK	Cl	NSPrinter	im	BOOL	NSString *
isOutputStackInReverseOrder	AK	Cl	NSPrinter	im	BOOL
printerWithName:domain:includeUnavailable:	AK	Cl	NSPrinter	cm	NSPrinter *	NSString *	NSString *	BOOL
domain	AK	Cl	NSPrinter	im	NSString *
host	AK	Cl	NSPrinter	im	NSString *
note	AK	Cl	NSPrinter	im	NSString *
setSharedPrintInfo:	AK	Cl	NSPrintInfo	cm	void	NSPrintInfo *
sharedPrintInfo	AK	Cl	NSPrintInfo	cm	NSPrintInfo *
initWithDictionary:	AK	Cl	NSPrintInfo	im	id	NSDictionary *
dictionary	AK	Cl	NSPrintInfo	im	NSMutableDictionary *
setPaperName:	AK	Cl	NSPrintInfo	im	void	NSString *
setPaperSize:	AK	Cl	NSPrintInfo	im	void	NSSize
setOrientation:	AK	Cl	NSPrintInfo	im	void	NSPrintingOrientation
paperName	AK	Cl	NSPrintInfo	im	NSString *
paperSize	AK	Cl	NSPrintInfo	im	NSSize
orientation	AK	Cl	NSPrintInfo	im	NSPrintingOrientation
setLeftMargin:	AK	Cl	NSPrintInfo	im	void	float
setRightMargin:	AK	Cl	NSPrintInfo	im	void	float
setTopMargin:	AK	Cl	NSPrintInfo	im	void	float
setBottomMargin:	AK	Cl	NSPrintInfo	im	void	float
leftMargin	AK	Cl	NSPrintInfo	im	float
rightMargin	AK	Cl	NSPrintInfo	im	float
topMargin	AK	Cl	NSPrintInfo	im	float
bottomMargin	AK	Cl	NSPrintInfo	im	float
setHorizontallyCentered:	AK	Cl	NSPrintInfo	im	void	BOOL
setVerticallyCentered:	AK	Cl	NSPrintInfo	im	void	BOOL
isHorizontallyCentered	AK	Cl	NSPrintInfo	im	BOOL
isVerticallyCentered	AK	Cl	NSPrintInfo	im	BOOL
setHorizontalPagination:	AK	Cl	NSPrintInfo	im	void	NSPrintingPaginationMode
setVerticalPagination:	AK	Cl	NSPrintInfo	im	void	NSPrintingPaginationMode
horizontalPagination	AK	Cl	NSPrintInfo	im	NSPrintingPaginationMode
verticalPagination	AK	Cl	NSPrintInfo	im	NSPrintingPaginationMode
setJobDisposition:	AK	Cl	NSPrintInfo	im	void	NSString *
jobDisposition	AK	Cl	NSPrintInfo	im	NSString *
setPrinter:	AK	Cl	NSPrintInfo	im	void	NSPrinter *
printer	AK	Cl	NSPrintInfo	im	NSPrinter *
setUpPrintOperationDefaultValues	AK	Cl	NSPrintInfo	im	void
imageablePageBounds	AK	Cl	NSPrintInfo	im	NSRect
localizedPaperName	AK	Cl	NSPrintInfo	im	NSString *
defaultPrinter	AK	Cl	NSPrintInfo	cm	NSPrinter *
setDefaultPrinter:	AK	Cl	NSPrintInfo	cm	void	NSPrinter *
sizeForPaperName:	AK	Cl	NSPrintInfo	cm	NSSize	NSString *
printOperationWithView:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *
printOperationWithView:printInfo:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSPrintInfo *
EPSOperationWithView:insideRect:toData:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSRect	NSMutableData *
EPSOperationWithView:insideRect:toData:printInfo:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSRect	NSMutableData *	NSPrintInfo *
EPSOperationWithView:insideRect:toPath:printInfo:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSRect	NSString *	NSPrintInfo *
PDFOperationWithView:insideRect:toData:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSRect	NSMutableData *
PDFOperationWithView:insideRect:toData:printInfo:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSRect	NSMutableData *	NSPrintInfo *
PDFOperationWithView:insideRect:toPath:printInfo:	AK	Cl	NSPrintOperation	cm	NSPrintOperation *	NSView *	NSRect	NSString *	NSPrintInfo *
currentOperation	AK	Cl	NSPrintOperation	cm	NSPrintOperation *
setCurrentOperation:	AK	Cl	NSPrintOperation	cm	void	NSPrintOperation *
isCopyingOperation	AK	Cl	NSPrintOperation	im	BOOL
runOperation	AK	Cl	NSPrintOperation	im	BOOL
printOperationDidRun:success:contextInfo:	AK	Cl	NSPrintOperation	im	void	NSPrintOperation *	BOOL	void *
runOperationModalForWindow:delegate:didRunSelector:contextInfo:	AK	Cl	NSPrintOperation	im	void	NSWindow *	id	SEL	void *
setCanSpawnSeparateThread:	AK	Cl	NSPrintOperation	im	void	BOOL
canSpawnSeparateThread	AK	Cl	NSPrintOperation	im	BOOL
setShowsPrintPanel:	AK	Cl	NSPrintOperation	im	void	BOOL
showsPrintPanel	AK	Cl	NSPrintOperation	im	BOOL
setShowsProgressPanel:	AK	Cl	NSPrintOperation	im	void	BOOL
showsProgressPanel	AK	Cl	NSPrintOperation	im	BOOL
setPrintPanel:	AK	Cl	NSPrintOperation	im	void	NSPrintPanel *
printPanel	AK	Cl	NSPrintOperation	im	NSPrintPanel *
setAccessoryView:	AK	Cl	NSPrintOperation	im	void	NSView *
accessoryView	AK	Cl	NSPrintOperation	im	NSView *
setJobStyleHint:	AK	Cl	NSPrintOperation	im	void	NSString *
jobStyleHint	AK	Cl	NSPrintOperation	im	NSString *
setPrintInfo:	AK	Cl	NSPrintOperation	im	void	NSPrintInfo *
printInfo	AK	Cl	NSPrintOperation	im	NSPrintInfo *
view	AK	Cl	NSPrintOperation	im	NSView *
currentPage	AK	Cl	NSPrintOperation	im	int
setPageOrder:	AK	Cl	NSPrintOperation	im	void	NSPrintingPageOrder
pageOrder	AK	Cl	NSPrintOperation	im	NSPrintingPageOrder
context	AK	Cl	NSPrintOperation	im	NSGraphicsContext *
createContext	AK	Cl	NSPrintOperation	im	NSGraphicsContext *
destroyContext	AK	Cl	NSPrintOperation	im	void
deliverResult	AK	Cl	NSPrintOperation	im	BOOL
cleanUpOperation	AK	Cl	NSPrintOperation	im	void
setShowPanels:	AK	Cl	NSPrintOperation	im	void	BOOL
showPanels	AK	Cl	NSPrintOperation	im	BOOL
printPanel	AK	Cl	NSPrintPanel	cm	NSPrintPanel *
beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:	AK	Cl	NSPrintPanel	im	void	NSPrintInfo *	NSWindow *	id	SEL	void *
runModal	AK	Cl	NSPrintPanel	im	int
accessoryView	AK	Cl	NSPrintPanel	im	NSView *
setAccessoryView:	AK	Cl	NSPrintPanel	im	void	NSView *
setJobStyleHint:	AK	Cl	NSPrintPanel	im	void	NSString *
jobStyleHint	AK	Cl	NSPrintPanel	im	NSString *
updateFromPrintInfo	AK	Cl	NSPrintPanel	im	void
finalWritePrintInfo	AK	Cl	NSPrintPanel	im	void
pickedAllPages:	AK	Cl	NSPrintPanel	im	void	id
pickedButton:	AK	Cl	NSPrintPanel	im	void	id
pickedLayoutList:	AK	Cl	NSPrintPanel	im	void	id
isIndeterminate	AK	Cl	NSProgressIndicator	im	BOOL
setIndeterminate:	AK	Cl	NSProgressIndicator	im	void	BOOL
isBezeled	AK	Cl	NSProgressIndicator	im	BOOL
setBezeled:	AK	Cl	NSProgressIndicator	im	void	BOOL
controlTint	AK	Cl	NSProgressIndicator	im	NSControlTint
setControlTint:	AK	Cl	NSProgressIndicator	im	void	NSControlTint
controlSize	AK	Cl	NSProgressIndicator	im	NSControlSize
setControlSize:	AK	Cl	NSProgressIndicator	im	void	NSControlSize
doubleValue	AK	Cl	NSProgressIndicator	im	double
setDoubleValue:	AK	Cl	NSProgressIndicator	im	void	double
incrementBy:	AK	Cl	NSProgressIndicator	im	void	double
minValue	AK	Cl	NSProgressIndicator	im	double
maxValue	AK	Cl	NSProgressIndicator	im	double
setMinValue:	AK	Cl	NSProgressIndicator	im	void	double
setMaxValue:	AK	Cl	NSProgressIndicator	im	void	double
animationDelay	AK	Cl	NSProgressIndicator	im	NSTimeInterval
setAnimationDelay:	AK	Cl	NSProgressIndicator	im	void	NSTimeInterval
usesThreadedAnimation	AK	Cl	NSProgressIndicator	im	BOOL
setUsesThreadedAnimation:	AK	Cl	NSProgressIndicator	im	void	BOOL
startAnimation:	AK	Cl	NSProgressIndicator	im	void	id
stopAnimation:	AK	Cl	NSProgressIndicator	im	void	id
animate:	AK	Cl	NSProgressIndicator	im	void	id
setStyle:	AK	Cl	NSProgressIndicator	im	void	NSProgressIndicatorStyle
style	AK	Cl	NSProgressIndicator	im	NSProgressIndicatorStyle
sizeToFit	AK	Cl	NSProgressIndicator	im	void
isDisplayedWhenStopped	AK	Cl	NSProgressIndicator	im	BOOL
setDisplayedWhenStopped:	AK	Cl	NSProgressIndicator	im	void	BOOL
qdPort	AK	Cl	NSQuickDrawView	im	void *
nextResponder	AK	Cl	NSResponder	im	NSResponder *
setNextResponder:	AK	Cl	NSResponder	im	void	NSResponder *
tryToPerform:with:	AK	Cl	NSResponder	im	BOOL	SEL	id
performKeyEquivalent:	AK	Cl	NSResponder	im	BOOL	NSEvent *
validRequestorForSendType:returnType:	AK	Cl	NSResponder	im	id	NSString *	NSString *
mouseDown:	AK	Cl	NSResponder	im	void	NSEvent *
rightMouseDown:	AK	Cl	NSResponder	im	void	NSEvent *
otherMouseDown:	AK	Cl	NSResponder	im	void	NSEvent *
mouseUp:	AK	Cl	NSResponder	im	void	NSEvent *
rightMouseUp:	AK	Cl	NSResponder	im	void	NSEvent *
otherMouseUp:	AK	Cl	NSResponder	im	void	NSEvent *
mouseMoved:	AK	Cl	NSResponder	im	void	NSEvent *
mouseDragged:	AK	Cl	NSResponder	im	void	NSEvent *
scrollWheel:	AK	Cl	NSResponder	im	void	NSEvent *
rightMouseDragged:	AK	Cl	NSResponder	im	void	NSEvent *
otherMouseDragged:	AK	Cl	NSResponder	im	void	NSEvent *
mouseEntered:	AK	Cl	NSResponder	im	void	NSEvent *
mouseExited:	AK	Cl	NSResponder	im	void	NSEvent *
keyDown:	AK	Cl	NSResponder	im	void	NSEvent *
keyUp:	AK	Cl	NSResponder	im	void	NSEvent *
flagsChanged:	AK	Cl	NSResponder	im	void	NSEvent *
tabletPoint:	AK	Cl	NSResponder	im	void	NSEvent *
tabletProximity:	AK	Cl	NSResponder	im	void	NSEvent *
noResponderFor:	AK	Cl	NSResponder	im	void	SEL
acceptsFirstResponder	AK	Cl	NSResponder	im	BOOL
becomeFirstResponder	AK	Cl	NSResponder	im	BOOL
resignFirstResponder	AK	Cl	NSResponder	im	BOOL
interpretKeyEvents:	AK	Cl	NSResponder	im	void	NSArray *
flushBufferedKeyEvents	AK	Cl	NSResponder	im	void
setMenu:	AK	Cl	NSResponder	im	void	NSMenu *
menu	AK	Cl	NSResponder	im	NSMenu *
showContextHelp:	AK	Cl	NSResponder	im	void	id
helpRequested:	AK	Cl	NSResponder	im	void	NSEvent *
shouldBeTreatedAsInkEvent:	AK	Cl	NSResponder	im	BOOL	NSEvent *
performMnemonic:	AK	Cl	NSResponder	im	BOOL	NSString *
insertText:	AK	Cl	NSResponder	im	void	id
doCommandBySelector:	AK	Cl	NSResponder	im	void	SEL
moveForward:	AK	Cl	NSResponder	im	void	id
moveRight:	AK	Cl	NSResponder	im	void	id
moveBackward:	AK	Cl	NSResponder	im	void	id
moveLeft:	AK	Cl	NSResponder	im	void	id
moveUp:	AK	Cl	NSResponder	im	void	id
moveDown:	AK	Cl	NSResponder	im	void	id
moveWordForward:	AK	Cl	NSResponder	im	void	id
moveWordBackward:	AK	Cl	NSResponder	im	void	id
moveToBeginningOfLine:	AK	Cl	NSResponder	im	void	id
moveToEndOfLine:	AK	Cl	NSResponder	im	void	id
moveToBeginningOfParagraph:	AK	Cl	NSResponder	im	void	id
moveToEndOfParagraph:	AK	Cl	NSResponder	im	void	id
moveToEndOfDocument:	AK	Cl	NSResponder	im	void	id
moveToBeginningOfDocument:	AK	Cl	NSResponder	im	void	id
pageDown:	AK	Cl	NSResponder	im	void	id
pageUp:	AK	Cl	NSResponder	im	void	id
centerSelectionInVisibleArea:	AK	Cl	NSResponder	im	void	id
moveBackwardAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveForwardAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveWordForwardAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveWordBackwardAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveUpAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveDownAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveWordRight:	AK	Cl	NSResponder	im	void	id
moveWordLeft:	AK	Cl	NSResponder	im	void	id
moveRightAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveLeftAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveWordRightAndModifySelection:	AK	Cl	NSResponder	im	void	id
moveWordLeftAndModifySelection:	AK	Cl	NSResponder	im	void	id
scrollPageUp:	AK	Cl	NSResponder	im	void	id
scrollPageDown:	AK	Cl	NSResponder	im	void	id
scrollLineUp:	AK	Cl	NSResponder	im	void	id
scrollLineDown:	AK	Cl	NSResponder	im	void	id
transpose:	AK	Cl	NSResponder	im	void	id
transposeWords:	AK	Cl	NSResponder	im	void	id
selectAll:	AK	Cl	NSResponder	im	void	id
selectParagraph:	AK	Cl	NSResponder	im	void	id
selectLine:	AK	Cl	NSResponder	im	void	id
selectWord:	AK	Cl	NSResponder	im	void	id
indent:	AK	Cl	NSResponder	im	void	id
insertTab:	AK	Cl	NSResponder	im	void	id
insertBacktab:	AK	Cl	NSResponder	im	void	id
insertNewline:	AK	Cl	NSResponder	im	void	id
insertParagraphSeparator:	AK	Cl	NSResponder	im	void	id
insertNewlineIgnoringFieldEditor:	AK	Cl	NSResponder	im	void	id
insertTabIgnoringFieldEditor:	AK	Cl	NSResponder	im	void	id
insertLineBreak:	AK	Cl	NSResponder	im	void	id
insertContainerBreak:	AK	Cl	NSResponder	im	void	id
changeCaseOfLetter:	AK	Cl	NSResponder	im	void	id
uppercaseWord:	AK	Cl	NSResponder	im	void	id
lowercaseWord:	AK	Cl	NSResponder	im	void	id
capitalizeWord:	AK	Cl	NSResponder	im	void	id
deleteForward:	AK	Cl	NSResponder	im	void	id
deleteBackward:	AK	Cl	NSResponder	im	void	id
deleteBackwardByDecomposingPreviousCharacter:	AK	Cl	NSResponder	im	void	id
deleteWordForward:	AK	Cl	NSResponder	im	void	id
deleteWordBackward:	AK	Cl	NSResponder	im	void	id
deleteToBeginningOfLine:	AK	Cl	NSResponder	im	void	id
deleteToEndOfLine:	AK	Cl	NSResponder	im	void	id
deleteToBeginningOfParagraph:	AK	Cl	NSResponder	im	void	id
deleteToEndOfParagraph:	AK	Cl	NSResponder	im	void	id
yank:	AK	Cl	NSResponder	im	void	id
complete:	AK	Cl	NSResponder	im	void	id
setMark:	AK	Cl	NSResponder	im	void	id
deleteToMark:	AK	Cl	NSResponder	im	void	id
selectToMark:	AK	Cl	NSResponder	im	void	id
swapWithMark:	AK	Cl	NSResponder	im	void	id
cancelOperation:	AK	Cl	NSResponder	im	void	id
undoManager	AK	Cl	NSResponder	im	NSUndoManager *
presentError:modalForWindow:delegate:didPresentSelector:contextInfo:	AK	Cl	NSResponder	im	void	NSError *	NSWindow *	id	SEL	void *
presentError:	AK	Cl	NSResponder	im	BOOL	NSError *
willPresentError:	AK	Cl	NSResponder	im	NSError *	NSError *
initWithRulerView:markerLocation:image:imageOrigin:	AK	Cl	NSRulerMarker	im	id	NSRulerView *	float	NSImage *	NSPoint
ruler	AK	Cl	NSRulerMarker	im	NSRulerView *
setMarkerLocation:	AK	Cl	NSRulerMarker	im	void	float
markerLocation	AK	Cl	NSRulerMarker	im	float
setImage:	AK	Cl	NSRulerMarker	im	void	NSImage *
image	AK	Cl	NSRulerMarker	im	NSImage *
setImageOrigin:	AK	Cl	NSRulerMarker	im	void	NSPoint
imageOrigin	AK	Cl	NSRulerMarker	im	NSPoint
setMovable:	AK	Cl	NSRulerMarker	im	void	BOOL
setRemovable:	AK	Cl	NSRulerMarker	im	void	BOOL
isMovable	AK	Cl	NSRulerMarker	im	BOOL
isRemovable	AK	Cl	NSRulerMarker	im	BOOL
isDragging	AK	Cl	NSRulerMarker	im	BOOL
setRepresentedObject:	AK	Cl	NSRulerMarker	im	void	id <NSCopying>
representedObject	AK	Cl	NSRulerMarker	im	id <NSCopying>
imageRectInRuler	AK	Cl	NSRulerMarker	im	NSRect
thicknessRequiredInRuler	AK	Cl	NSRulerMarker	im	float
drawRect:	AK	Cl	NSRulerMarker	im	void	NSRect
trackMouse:adding:	AK	Cl	NSRulerMarker	im	BOOL	NSEvent *	BOOL
registerUnitWithName:abbreviation:unitToPointsConversionFactor:stepUpCycle:stepDownCycle:	AK	Cl	NSRulerView	cm	void	NSString *	NSString *	float	NSArray *	NSArray *
initWithScrollView:orientation:	AK	Cl	NSRulerView	im	id	NSScrollView *	NSRulerOrientation
setScrollView:	AK	Cl	NSRulerView	im	void	NSScrollView *
scrollView	AK	Cl	NSRulerView	im	NSScrollView *
setOrientation:	AK	Cl	NSRulerView	im	void	NSRulerOrientation
orientation	AK	Cl	NSRulerView	im	NSRulerOrientation
baselineLocation	AK	Cl	NSRulerView	im	float
requiredThickness	AK	Cl	NSRulerView	im	float
setRuleThickness:	AK	Cl	NSRulerView	im	void	float
ruleThickness	AK	Cl	NSRulerView	im	float
setReservedThicknessForMarkers:	AK	Cl	NSRulerView	im	void	float
reservedThicknessForMarkers	AK	Cl	NSRulerView	im	float
setReservedThicknessForAccessoryView:	AK	Cl	NSRulerView	im	void	float
reservedThicknessForAccessoryView	AK	Cl	NSRulerView	im	float
setMeasurementUnits:	AK	Cl	NSRulerView	im	void	NSString *
measurementUnits	AK	Cl	NSRulerView	im	NSString *
setOriginOffset:	AK	Cl	NSRulerView	im	void	float
originOffset	AK	Cl	NSRulerView	im	float
setClientView:	AK	Cl	NSRulerView	im	void	NSView *
clientView	AK	Cl	NSRulerView	im	NSView *
setMarkers:	AK	Cl	NSRulerView	im	void	NSArray *
addMarker:	AK	Cl	NSRulerView	im	void	NSRulerMarker *
removeMarker:	AK	Cl	NSRulerView	im	void	NSRulerMarker *
markers	AK	Cl	NSRulerView	im	NSArray *
trackMarker:withMouseEvent:	AK	Cl	NSRulerView	im	BOOL	NSRulerMarker *	NSEvent *
setAccessoryView:	AK	Cl	NSRulerView	im	void	NSView *
accessoryView	AK	Cl	NSRulerView	im	NSView *
moveRulerlineFromLocation:toLocation:	AK	Cl	NSRulerView	im	void	float	float
invalidateHashMarks	AK	Cl	NSRulerView	im	void
drawHashMarksAndLabelsInRect:	AK	Cl	NSRulerView	im	void	NSRect
drawMarkersInRect:	AK	Cl	NSRulerView	im	void	NSRect
isFlipped	AK	Cl	NSRulerView	im	BOOL
rulerView:shouldMoveMarker:	AK	Cl	NSView;NSRulerView	im	BOOL	NSRulerView *	NSRulerMarker *
rulerView:willMoveMarker:toLocation:	AK	Cl	NSView;NSRulerView	im	float	NSRulerView *	NSRulerMarker *	float
rulerView:didMoveMarker:	AK	Cl	NSView;NSRulerView	im	void	NSRulerView *	NSRulerMarker *
rulerView:shouldRemoveMarker:	AK	Cl	NSView;NSRulerView	im	BOOL	NSRulerView *	NSRulerMarker *
rulerView:didRemoveMarker:	AK	Cl	NSView;NSRulerView	im	void	NSRulerView *	NSRulerMarker *
rulerView:shouldAddMarker:	AK	Cl	NSView;NSRulerView	im	BOOL	NSRulerView *	NSRulerMarker *
rulerView:willAddMarker:atLocation:	AK	Cl	NSView;NSRulerView	im	float	NSRulerView *	NSRulerMarker *	float
rulerView:didAddMarker:	AK	Cl	NSView;NSRulerView	im	void	NSRulerView *	NSRulerMarker *
rulerView:handleMouseDown:	AK	Cl	NSView;NSRulerView	im	void	NSRulerView *	NSEvent *
rulerView:willSetClientView:	AK	Cl	NSView;NSRulerView	im	void	NSRulerView *	NSView *
savePanel	AK	Cl	NSSavePanel	cm	NSSavePanel *
URL	AK	Cl	NSSavePanel	im	NSURL *
filename	AK	Cl	NSSavePanel	im	NSString *
directory	AK	Cl	NSSavePanel	im	NSString *
setDirectory:	AK	Cl	NSSavePanel	im	void	NSString *
requiredFileType	AK	Cl	NSSavePanel	im	NSString *
setRequiredFileType:	AK	Cl	NSSavePanel	im	void	NSString *
allowedFileTypes	AK	Cl	NSSavePanel	im	NSArray *
setAllowedFileTypes:	AK	Cl	NSSavePanel	im	void	NSArray *
allowsOtherFileTypes	AK	Cl	NSSavePanel	im	BOOL
setAllowsOtherFileTypes:	AK	Cl	NSSavePanel	im	void	BOOL
accessoryView	AK	Cl	NSSavePanel	im	NSView *
setAccessoryView:	AK	Cl	NSSavePanel	im	void	NSView *
delegate	AK	Cl	NSSavePanel	im	id
setDelegate:	AK	Cl	NSSavePanel	im	void	id
isExpanded	AK	Cl	NSSavePanel	im	BOOL
canCreateDirectories	AK	Cl	NSSavePanel	im	BOOL
setCanCreateDirectories:	AK	Cl	NSSavePanel	im	void	BOOL
canSelectHiddenExtension	AK	Cl	NSSavePanel	im	BOOL
setCanSelectHiddenExtension:	AK	Cl	NSSavePanel	im	void	BOOL
isExtensionHidden	AK	Cl	NSSavePanel	im	BOOL
setExtensionHidden:	AK	Cl	NSSavePanel	im	void	BOOL
treatsFilePackagesAsDirectories	AK	Cl	NSSavePanel	im	BOOL
setTreatsFilePackagesAsDirectories:	AK	Cl	NSSavePanel	im	void	BOOL
prompt	AK	Cl	NSSavePanel	im	NSString *
setPrompt:	AK	Cl	NSSavePanel	im	void	NSString *
title	AK	Cl	NSSavePanel	im	NSString *
setTitle:	AK	Cl	NSSavePanel	im	void	NSString *
nameFieldLabel	AK	Cl	NSSavePanel	im	NSString *
setNameFieldLabel:	AK	Cl	NSSavePanel	im	void	NSString *
message	AK	Cl	NSSavePanel	im	NSString *
setMessage:	AK	Cl	NSSavePanel	im	void	NSString *
validateVisibleColumns	AK	Cl	NSSavePanel	im	void
selectText:	AK	Cl	NSSavePanel	im	IBAction	id
ok:	AK	Cl	NSSavePanel	im	IBAction	id
cancel:	AK	Cl	NSSavePanel	im	IBAction	id
beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:	AK	Cl	NSSavePanel	im	void	NSString *	NSString *	NSWindow *	id	SEL	void *
runModalForDirectory:file:	AK	Cl	NSSavePanel	im	int	NSString *	NSString *
runModal	AK	Cl	NSSavePanel	im	int
panel:shouldShowFilename:	AK	Cl	NSObject;NSSavePanel	dm	BOOL	id	NSString *
panel:compareFilename:with:caseSensitive:	AK	Cl	NSObject;NSSavePanel	dm	NSComparisonResult	id	NSString *	NSString *	BOOL
panel:isValidFilename:	AK	Cl	NSObject;NSSavePanel	dm	BOOL	id	NSString *
panel:userEnteredFilename:confirmed:	AK	Cl	NSObject;NSSavePanel	dm	NSString *	id	NSString *	BOOL
panel:willExpand:	AK	Cl	NSObject;NSSavePanel	dm	void	id	BOOL
panel:directoryDidChange:	AK	Cl	NSObject;NSSavePanel	dm	void	id	NSString *
panelSelectionDidChange:	AK	Cl	NSObject;NSSavePanel	dm	void	id
screens	AK	Cl	NSScreen	cm	NSArray *
mainScreen	AK	Cl	NSScreen	cm	NSScreen *
deepestScreen	AK	Cl	NSScreen	cm	NSScreen *
depth	AK	Cl	NSScreen	im	NSWindowDepth
frame	AK	Cl	NSScreen	im	NSRect
visibleFrame	AK	Cl	NSScreen	im	NSRect
deviceDescription	AK	Cl	NSScreen	im	NSDictionary *
supportedWindowDepths	AK	Cl	NSScreen	im	const NSWindowDepth *
userSpaceScaleFactor	AK	Cl	NSScreen	im	float
scrollerWidth	AK	Cl	NSScroller	cm	float
scrollerWidthForControlSize:	AK	Cl	NSScroller	cm	float	NSControlSize
drawParts	AK	Cl	NSScroller	im	void
rectForPart:	AK	Cl	NSScroller	im	NSRect	NSScrollerPart
checkSpaceForParts	AK	Cl	NSScroller	im	void
usableParts	AK	Cl	NSScroller	im	NSUsableScrollerParts
setArrowsPosition:	AK	Cl	NSScroller	im	void	NSScrollArrowPosition
arrowsPosition	AK	Cl	NSScroller	im	NSScrollArrowPosition
setControlTint:	AK	Cl	NSScroller	im	void	NSControlTint
controlTint	AK	Cl	NSScroller	im	NSControlTint
setControlSize:	AK	Cl	NSScroller	im	void	NSControlSize
controlSize	AK	Cl	NSScroller	im	NSControlSize
drawArrow:highlight:	AK	Cl	NSScroller	im	void	NSScrollerArrow	BOOL
drawKnob	AK	Cl	NSScroller	im	void
highlight:	AK	Cl	NSScroller	im	void	BOOL
testPart:	AK	Cl	NSScroller	im	NSScrollerPart	NSPoint
trackKnob:	AK	Cl	NSScroller	im	void	NSEvent *
trackScrollButtons:	AK	Cl	NSScroller	im	void	NSEvent *
hitPart	AK	Cl	NSScroller	im	NSScrollerPart
setFloatValue:knobProportion:	AK	Cl	NSScroller	im	void	float	float
knobProportion	AK	Cl	NSScroller	im	float
frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:	AK	Cl	NSScrollView	cm	NSSize	NSSize	BOOL	BOOL	NSBorderType
contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:	AK	Cl	NSScrollView	cm	NSSize	NSSize	BOOL	BOOL	NSBorderType
documentVisibleRect	AK	Cl	NSScrollView	im	NSRect
contentSize	AK	Cl	NSScrollView	im	NSSize
setDocumentView:	AK	Cl	NSScrollView	im	void	NSView *
documentView	AK	Cl	NSScrollView	im	id
setContentView:	AK	Cl	NSScrollView	im	void	NSClipView *
contentView	AK	Cl	NSScrollView	im	NSClipView *
setDocumentCursor:	AK	Cl	NSScrollView	im	void	NSCursor *
documentCursor	AK	Cl	NSScrollView	im	NSCursor *
setBorderType:	AK	Cl	NSScrollView	im	void	NSBorderType
borderType	AK	Cl	NSScrollView	im	NSBorderType
setBackgroundColor:	AK	Cl	NSScrollView	im	void	NSColor *
backgroundColor	AK	Cl	NSScrollView	im	NSColor *
setDrawsBackground:	AK	Cl	NSScrollView	im	void	BOOL
drawsBackground	AK	Cl	NSScrollView	im	BOOL
setHasVerticalScroller:	AK	Cl	NSScrollView	im	void	BOOL
hasVerticalScroller	AK	Cl	NSScrollView	im	BOOL
setHasHorizontalScroller:	AK	Cl	NSScrollView	im	void	BOOL
hasHorizontalScroller	AK	Cl	NSScrollView	im	BOOL
setVerticalScroller:	AK	Cl	NSScrollView	im	void	NSScroller *
verticalScroller	AK	Cl	NSScrollView	im	NSScroller *
setHorizontalScroller:	AK	Cl	NSScrollView	im	void	NSScroller *
horizontalScroller	AK	Cl	NSScrollView	im	NSScroller *
autohidesScrollers	AK	Cl	NSScrollView	im	BOOL
setAutohidesScrollers:	AK	Cl	NSScrollView	im	void	BOOL
setHorizontalLineScroll:	AK	Cl	NSScrollView	im	void	float
setVerticalLineScroll:	AK	Cl	NSScrollView	im	void	float
setLineScroll:	AK	Cl	NSScrollView	im	void	float
horizontalLineScroll	AK	Cl	NSScrollView	im	float
verticalLineScroll	AK	Cl	NSScrollView	im	float
lineScroll	AK	Cl	NSScrollView	im	float
setHorizontalPageScroll:	AK	Cl	NSScrollView	im	void	float
setVerticalPageScroll:	AK	Cl	NSScrollView	im	void	float
setPageScroll:	AK	Cl	NSScrollView	im	void	float
horizontalPageScroll	AK	Cl	NSScrollView	im	float
verticalPageScroll	AK	Cl	NSScrollView	im	float
pageScroll	AK	Cl	NSScrollView	im	float
setScrollsDynamically:	AK	Cl	NSScrollView	im	void	BOOL
scrollsDynamically	AK	Cl	NSScrollView	im	BOOL
tile	AK	Cl	NSScrollView	im	void
reflectScrolledClipView:	AK	Cl	NSScrollView	im	void	NSClipView *
scrollWheel:	AK	Cl	NSScrollView	im	void	NSEvent *
setRulerViewClass:	AK	Cl	NSScrollView	cm	void	Class
rulerViewClass	AK	Cl	NSScrollView	cm	Class
setRulersVisible:	AK	Cl	NSScrollView	im	void	BOOL
rulersVisible	AK	Cl	NSScrollView	im	BOOL
setHasHorizontalRuler:	AK	Cl	NSScrollView	im	void	BOOL
hasHorizontalRuler	AK	Cl	NSScrollView	im	BOOL
setHasVerticalRuler:	AK	Cl	NSScrollView	im	void	BOOL
hasVerticalRuler	AK	Cl	NSScrollView	im	BOOL
setHorizontalRulerView:	AK	Cl	NSScrollView	im	void	NSRulerView *
horizontalRulerView	AK	Cl	NSScrollView	im	NSRulerView *
setVerticalRulerView:	AK	Cl	NSScrollView	im	void	NSRulerView *
verticalRulerView	AK	Cl	NSScrollView	im	NSRulerView *
setRecentSearches:	AK	Cl	NSSearchField	im	void	NSArray *
recentSearches	AK	Cl	NSSearchField	im	NSArray *
setRecentsAutosaveName:	AK	Cl	NSSearchField	im	void	NSString *
recentsAutosaveName	AK	Cl	NSSearchField	im	NSString *
searchButtonCell	AK	Cl	NSSearchFieldCell	im	NSButtonCell *
setSearchButtonCell:	AK	Cl	NSSearchFieldCell	im	void	NSButtonCell *
cancelButtonCell	AK	Cl	NSSearchFieldCell	im	NSButtonCell *
setCancelButtonCell:	AK	Cl	NSSearchFieldCell	im	void	NSButtonCell *
resetSearchButtonCell	AK	Cl	NSSearchFieldCell	im	void
resetCancelButtonCell	AK	Cl	NSSearchFieldCell	im	void
searchTextRectForBounds:	AK	Cl	NSSearchFieldCell	im	NSRect	NSRect
searchButtonRectForBounds:	AK	Cl	NSSearchFieldCell	im	NSRect	NSRect
cancelButtonRectForBounds:	AK	Cl	NSSearchFieldCell	im	NSRect	NSRect
setSearchMenuTemplate:	AK	Cl	NSSearchFieldCell	im	void	NSMenu *
searchMenuTemplate	AK	Cl	NSSearchFieldCell	im	NSMenu *
setSendsWholeSearchString:	AK	Cl	NSSearchFieldCell	im	void	BOOL
sendsWholeSearchString	AK	Cl	NSSearchFieldCell	im	BOOL
setMaximumRecents:	AK	Cl	NSSearchFieldCell	im	void	int
maximumRecents	AK	Cl	NSSearchFieldCell	im	int
setRecentSearches:	AK	Cl	NSSearchFieldCell	im	void	NSArray *
recentSearches	AK	Cl	NSSearchFieldCell	im	NSArray *
setRecentsAutosaveName:	AK	Cl	NSSearchFieldCell	im	void	NSString *
recentsAutosaveName	AK	Cl	NSSearchFieldCell	im	NSString *
sendsSearchStringImmediately	AK	Cl	NSSearchFieldCell	im	BOOL
setSendsSearchStringImmediately:	AK	Cl	NSSearchFieldCell	im	void	BOOL
setEchosBullets:	AK	Cl	NSSecureTextFieldCell;NSSecureTextField	im	void	BOOL
echosBullets	AK	Cl	NSSecureTextFieldCell;NSSecureTextField	im	BOOL
setSegmentCount:	AK	Cl	NSSegmentedCell	im	void	int
segmentCount	AK	Cl	NSSegmentedCell	im	int
setSelectedSegment:	AK	Cl	NSSegmentedCell	im	void	int
selectedSegment	AK	Cl	NSSegmentedCell	im	int
selectSegmentWithTag:	AK	Cl	NSSegmentedCell	im	BOOL	int
makeNextSegmentKey	AK	Cl	NSSegmentedCell	im	void
makePreviousSegmentKey	AK	Cl	NSSegmentedCell	im	void
setTrackingMode:	AK	Cl	NSSegmentedCell	im	void	NSSegmentSwitchTracking
trackingMode	AK	Cl	NSSegmentedCell	im	NSSegmentSwitchTracking
setWidth:forSegment:	AK	Cl	NSSegmentedCell	im	void	float	int
widthForSegment:	AK	Cl	NSSegmentedCell	im	float	int
setImage:forSegment:	AK	Cl	NSSegmentedCell	im	void	NSImage *	int
imageForSegment:	AK	Cl	NSSegmentedCell	im	NSImage *	int
setLabel:forSegment:	AK	Cl	NSSegmentedCell	im	void	NSString *	int
labelForSegment:	AK	Cl	NSSegmentedCell	im	NSString *	int
setSelected:forSegment:	AK	Cl	NSSegmentedCell	im	void	BOOL	int
isSelectedForSegment:	AK	Cl	NSSegmentedCell	im	BOOL	int
setEnabled:forSegment:	AK	Cl	NSSegmentedCell	im	void	BOOL	int
isEnabledForSegment:	AK	Cl	NSSegmentedCell	im	BOOL	int
setMenu:forSegment:	AK	Cl	NSSegmentedCell	im	void	NSMenu *	int
menuForSegment:	AK	Cl	NSSegmentedCell	im	NSMenu *	int
setToolTip:forSegment:	AK	Cl	NSSegmentedCell	im	void	NSString *	int
toolTipForSegment:	AK	Cl	NSSegmentedCell	im	NSString *	int
setTag:forSegment:	AK	Cl	NSSegmentedCell	im	void	int	int
tagForSegment:	AK	Cl	NSSegmentedCell	im	int	int
drawSegment:inFrame:withView:	AK	Cl	NSSegmentedCell	im	void	int	NSRect	NSView *
setSegmentCount:	AK	Cl	NSSegmentedControl	im	void	int
segmentCount	AK	Cl	NSSegmentedControl	im	int
setSelectedSegment:	AK	Cl	NSSegmentedControl	im	void	int
selectedSegment	AK	Cl	NSSegmentedControl	im	int
selectSegmentWithTag:	AK	Cl	NSSegmentedControl	im	BOOL	int
setWidth:forSegment:	AK	Cl	NSSegmentedControl	im	void	float	int
widthForSegment:	AK	Cl	NSSegmentedControl	im	float	int
setImage:forSegment:	AK	Cl	NSSegmentedControl	im	void	NSImage *	int
imageForSegment:	AK	Cl	NSSegmentedControl	im	NSImage *	int
setLabel:forSegment:	AK	Cl	NSSegmentedControl	im	void	NSString *	int
labelForSegment:	AK	Cl	NSSegmentedControl	im	NSString *	int
setMenu:forSegment:	AK	Cl	NSSegmentedControl	im	void	NSMenu *	int
menuForSegment:	AK	Cl	NSSegmentedControl	im	NSMenu *	int
setSelected:forSegment:	AK	Cl	NSSegmentedControl	im	void	BOOL	int
isSelectedForSegment:	AK	Cl	NSSegmentedControl	im	BOOL	int
setEnabled:forSegment:	AK	Cl	NSSegmentedControl	im	void	BOOL	int
isEnabledForSegment:	AK	Cl	NSSegmentedControl	im	BOOL	int
init	AK	Cl	NSShadow	im	id
shadowOffset	AK	Cl	NSShadow	im	NSSize
setShadowOffset:	AK	Cl	NSShadow	im	void	NSSize
shadowBlurRadius	AK	Cl	NSShadow	im	float
setShadowBlurRadius:	AK	Cl	NSShadow	im	void	float
shadowColor	AK	Cl	NSShadow	im	NSColor *
setShadowColor:	AK	Cl	NSShadow	im	void	NSColor *
set	AK	Cl	NSShadow	im	void
sharedInstance	AK	Cl	NSSimpleHorizontalTypesetter	cm	id
currentLayoutManager	AK	Cl	NSSimpleHorizontalTypesetter	im	NSLayoutManager *
currentContainer	AK	Cl	NSSimpleHorizontalTypesetter	im	NSTextContainer *
currentParagraphStyle	AK	Cl	NSSimpleHorizontalTypesetter	im	NSParagraphStyle *
currentTextStorage	AK	Cl	NSSimpleHorizontalTypesetter	im	NSTextStorage *
baseOfTypesetterGlyphInfo	AK	Cl	NSSimpleHorizontalTypesetter	im	NSTypesetterGlyphInfo *
sizeOfTypesetterGlyphInfo	AK	Cl	NSSimpleHorizontalTypesetter	im	unsigned
capacityOfTypesetterGlyphInfo	AK	Cl	NSSimpleHorizontalTypesetter	im	unsigned
firstGlyphIndexOfCurrentLineFragment	AK	Cl	NSSimpleHorizontalTypesetter	im	unsigned
layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:	AK	Cl	NSSimpleHorizontalTypesetter	im	void	NSLayoutManager *	unsigned	unsigned	unsigned *
layoutGlyphsInHorizontalLineFragment:baseline:	AK	Cl	NSSimpleHorizontalTypesetter	im	NSLayoutStatus	NSRect *	float *
clearGlyphCache	AK	Cl	NSSimpleHorizontalTypesetter	im	void
fillAttributesCache	AK	Cl	NSSimpleHorizontalTypesetter	im	void
clearAttributesCache	AK	Cl	NSSimpleHorizontalTypesetter	im	void
growGlyphCaches:fillGlyphInfo:	AK	Cl	NSSimpleHorizontalTypesetter	im	unsigned	unsigned	BOOL
updateCurGlyphOffset	AK	Cl	NSSimpleHorizontalTypesetter	im	void
insertGlyph:atGlyphIndex:characterIndex:	AK	Cl	NSSimpleHorizontalTypesetter	im	void	NSGlyph	unsigned	unsigned
layoutControlGlyphForLineFragment:	AK	Cl	NSSimpleHorizontalTypesetter	im	NSLayoutStatus	NSRect
layoutTab	AK	Cl	NSSimpleHorizontalTypesetter	im	void
breakLineAtIndex:	AK	Cl	NSSimpleHorizontalTypesetter	im	void	unsigned
glyphIndexToBreakLineByHyphenatingWordAtIndex:	AK	Cl	NSSimpleHorizontalTypesetter	im	unsigned	unsigned
glyphIndexToBreakLineByWordWrappingAtIndex:	AK	Cl	NSSimpleHorizontalTypesetter	im	unsigned	unsigned
layoutTab	AK	Cl	NSSimpleHorizontalTypesetter	im	void
layoutControlGlyphForLineFragment:	AK	Cl	NSSimpleHorizontalTypesetter	im	NSLayoutStatus	NSRect
fullJustifyLineAtGlyphIndex:	AK	Cl	NSSimpleHorizontalTypesetter	im	void	unsigned
typesetterLaidOneGlyph:	AK	Cl	NSSimpleHorizontalTypesetter	im	void	NSTypesetterGlyphInfo *
willSetLineFragmentRect:forGlyphRange:usedRect:	AK	Cl	NSSimpleHorizontalTypesetter	im	void	NSRect *	NSRange	NSRect *
minValue	AK	Cl	NSSlider	im	double
setMinValue:	AK	Cl	NSSlider	im	void	double
maxValue	AK	Cl	NSSlider	im	double
setMaxValue:	AK	Cl	NSSlider	im	void	double
setAltIncrementValue:	AK	Cl	NSSlider	im	void	double
altIncrementValue	AK	Cl	NSSlider	im	double
setTitleCell:	AK	Cl	NSSlider	im	void	NSCell *
titleCell	AK	Cl	NSSlider	im	id
setTitleColor:	AK	Cl	NSSlider	im	void	NSColor *
titleColor	AK	Cl	NSSlider	im	NSColor *
setTitleFont:	AK	Cl	NSSlider	im	void	NSFont *
titleFont	AK	Cl	NSSlider	im	NSFont *
title	AK	Cl	NSSlider	im	NSString *
setTitle:	AK	Cl	NSSlider	im	void	NSString *
setKnobThickness:	AK	Cl	NSSlider	im	void	float
knobThickness	AK	Cl	NSSlider	im	float
setImage:	AK	Cl	NSSlider	im	void	NSImage *
image	AK	Cl	NSSlider	im	NSImage *
isVertical	AK	Cl	NSSlider	im	int
acceptsFirstMouse:	AK	Cl	NSSlider	im	BOOL	NSEvent *
setNumberOfTickMarks:	AK	Cl	NSSlider	im	void	int
numberOfTickMarks	AK	Cl	NSSlider	im	int
setTickMarkPosition:	AK	Cl	NSSlider	im	void	NSTickMarkPosition
tickMarkPosition	AK	Cl	NSSlider	im	NSTickMarkPosition
setAllowsTickMarkValuesOnly:	AK	Cl	NSSlider	im	void	BOOL
allowsTickMarkValuesOnly	AK	Cl	NSSlider	im	BOOL
tickMarkValueAtIndex:	AK	Cl	NSSlider	im	double	int
rectOfTickMarkAtIndex:	AK	Cl	NSSlider	im	NSRect	int
indexOfTickMarkAtPoint:	AK	Cl	NSSlider	im	int	NSPoint
closestTickMarkValueToValue:	AK	Cl	NSSlider	im	double	double
prefersTrackingUntilMouseUp	AK	Cl	NSSliderCell	cm	BOOL
minValue	AK	Cl	NSSliderCell	im	double
setMinValue:	AK	Cl	NSSliderCell	im	void	double
maxValue	AK	Cl	NSSliderCell	im	double
setMaxValue:	AK	Cl	NSSliderCell	im	void	double
setAltIncrementValue:	AK	Cl	NSSliderCell	im	void	double
altIncrementValue	AK	Cl	NSSliderCell	im	double
isVertical	AK	Cl	NSSliderCell	im	int
setTitleColor:	AK	Cl	NSSliderCell	im	void	NSColor *
titleColor	AK	Cl	NSSliderCell	im	NSColor *
setTitleFont:	AK	Cl	NSSliderCell	im	void	NSFont *
titleFont	AK	Cl	NSSliderCell	im	NSFont *
title	AK	Cl	NSSliderCell	im	NSString *
setTitle:	AK	Cl	NSSliderCell	im	void	NSString *
setTitleCell:	AK	Cl	NSSliderCell	im	void	NSCell *
titleCell	AK	Cl	NSSliderCell	im	id
setKnobThickness:	AK	Cl	NSSliderCell	im	void	float
knobThickness	AK	Cl	NSSliderCell	im	float
knobRectFlipped:	AK	Cl	NSSliderCell	im	NSRect	BOOL
drawKnob:	AK	Cl	NSSliderCell	im	void	NSRect
drawKnob	AK	Cl	NSSliderCell	im	void
drawBarInside:flipped:	AK	Cl	NSSliderCell	im	void	NSRect	BOOL
trackRect	AK	Cl	NSSliderCell	im	NSRect
setSliderType:	AK	Cl	NSSliderCell	im	void	NSSliderType
sliderType	AK	Cl	NSSliderCell	im	NSSliderType
setNumberOfTickMarks:	AK	Cl	NSSliderCell	im	void	int
numberOfTickMarks	AK	Cl	NSSliderCell	im	int
setTickMarkPosition:	AK	Cl	NSSliderCell	im	void	NSTickMarkPosition
tickMarkPosition	AK	Cl	NSSliderCell	im	NSTickMarkPosition
setAllowsTickMarkValuesOnly:	AK	Cl	NSSliderCell	im	void	BOOL
allowsTickMarkValuesOnly	AK	Cl	NSSliderCell	im	BOOL
tickMarkValueAtIndex:	AK	Cl	NSSliderCell	im	double	int
rectOfTickMarkAtIndex:	AK	Cl	NSSliderCell	im	NSRect	int
indexOfTickMarkAtPoint:	AK	Cl	NSSliderCell	im	int	NSPoint
closestTickMarkValueToValue:	AK	Cl	NSSliderCell	im	double	double
soundNamed:	AK	Cl	NSSound	cm	id	NSString *
initWithContentsOfURL:byReference:	AK	Cl	NSSound	im	id	NSURL *	BOOL
initWithContentsOfFile:byReference:	AK	Cl	NSSound	im	id	NSString *	BOOL
initWithData:	AK	Cl	NSSound	im	id	NSData *
setName:	AK	Cl	NSSound	im	BOOL	NSString *
name	AK	Cl	NSSound	im	NSString *
canInitWithPasteboard:	AK	Cl	NSSound	cm	BOOL	NSPasteboard *
soundUnfilteredFileTypes	AK	Cl	NSSound	cm	NSArray *
soundUnfilteredPasteboardTypes	AK	Cl	NSSound	cm	NSArray *
initWithPasteboard:	AK	Cl	NSSound	im	id	NSPasteboard *
writeToPasteboard:	AK	Cl	NSSound	im	void	NSPasteboard *
play	AK	Cl	NSSound	im	BOOL
pause	AK	Cl	NSSound	im	BOOL
resume	AK	Cl	NSSound	im	BOOL
stop	AK	Cl	NSSound	im	BOOL
isPlaying	AK	Cl	NSSound	im	BOOL
delegate	AK	Cl	NSSound	im	id
setDelegate:	AK	Cl	NSSound	im	void	id
sound:didFinishPlaying:	AK	Cl	NSObject;NSSound	dm	void	NSSound *	BOOL
pathForSoundResource:	AK	Cl	NSBundle;NSSound	dm	NSString *	NSString *
init	AK	Cl	NSSpeechRecognizer	im	id
startListening	AK	Cl	NSSpeechRecognizer	im	void
stopListening	AK	Cl	NSSpeechRecognizer	im	void
delegate	AK	Cl	NSSpeechRecognizer	im	id
setDelegate:	AK	Cl	NSSpeechRecognizer	im	void	id
commands	AK	Cl	NSSpeechRecognizer	im	NSArray *
setCommands:	AK	Cl	NSSpeechRecognizer	im	void	NSArray *
displayedCommandsTitle	AK	Cl	NSSpeechRecognizer	im	NSString *
setDisplayedCommandsTitle:	AK	Cl	NSSpeechRecognizer	im	void	NSString *
listensInForegroundOnly	AK	Cl	NSSpeechRecognizer	im	BOOL
setListensInForegroundOnly:	AK	Cl	NSSpeechRecognizer	im	void	BOOL
blocksOtherRecognizers	AK	Cl	NSSpeechRecognizer	im	BOOL
setBlocksOtherRecognizers:	AK	Cl	NSSpeechRecognizer	im	void	BOOL
speechRecognizer:didRecognizeCommand:	AK	Cl	NSObject;NSSpeechRecognizer	dm	void	NSSpeechRecognizer *	id
initWithVoice:	AK	Cl	NSSpeechSynthesizer	im	id	NSString *
startSpeakingString:	AK	Cl	NSSpeechSynthesizer	im	BOOL	NSString *
startSpeakingString:toURL:	AK	Cl	NSSpeechSynthesizer	im	BOOL	NSString *	NSURL *
stopSpeaking	AK	Cl	NSSpeechSynthesizer	im	void
isSpeaking	AK	Cl	NSSpeechSynthesizer	im	BOOL
delegate	AK	Cl	NSSpeechSynthesizer	im	id
setDelegate:	AK	Cl	NSSpeechSynthesizer	im	void	id
voice	AK	Cl	NSSpeechSynthesizer	im	NSString *
setVoice:	AK	Cl	NSSpeechSynthesizer	im	BOOL	NSString *
usesFeedbackWindow	AK	Cl	NSSpeechSynthesizer	im	BOOL
setUsesFeedbackWindow:	AK	Cl	NSSpeechSynthesizer	im	void	BOOL
isAnyApplicationSpeaking	AK	Cl	NSSpeechSynthesizer	cm	BOOL
defaultVoice	AK	Cl	NSSpeechSynthesizer	cm	NSString *
availableVoices	AK	Cl	NSSpeechSynthesizer	cm	NSArray *
attributesForVoice:	AK	Cl	NSSpeechSynthesizer	cm	NSDictionary *	NSString *
speechSynthesizer:didFinishSpeaking:	AK	Cl	NSObject;NSSpeechSynthesizer	dm	void	NSSpeechSynthesizer *	BOOL
speechSynthesizer:willSpeakWord:ofString:	AK	Cl	NSObject;NSSpeechSynthesizer	dm	void	NSSpeechSynthesizer *	NSRange	NSString *
speechSynthesizer:willSpeakPhoneme:	AK	Cl	NSObject;NSSpeechSynthesizer	dm	void	NSSpeechSynthesizer *	short
sharedSpellChecker	AK	Cl	NSSpellChecker	cm	NSSpellChecker *
sharedSpellCheckerExists	AK	Cl	NSSpellChecker	cm	BOOL
uniqueSpellDocumentTag	AK	Cl	NSSpellChecker	cm	int
checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:	AK	Cl	NSSpellChecker	im	NSRange	NSString *	int	NSString *	BOOL	int	int *
checkSpellingOfString:startingAt:	AK	Cl	NSSpellChecker	im	NSRange	NSString *	int
countWordsInString:language:	AK	Cl	NSSpellChecker	im	int	NSString *	NSString *
updateSpellingPanelWithMisspelledWord:	AK	Cl	NSSpellChecker	im	void	NSString *
spellingPanel	AK	Cl	NSSpellChecker	im	NSPanel *
accessoryView	AK	Cl	NSSpellChecker	im	NSView *
setAccessoryView:	AK	Cl	NSSpellChecker	im	void	NSView *
ignoreWord:inSpellDocumentWithTag:	AK	Cl	NSSpellChecker	im	void	NSString *	int
ignoredWordsInSpellDocumentWithTag:	AK	Cl	NSSpellChecker	im	NSArray *	int
setIgnoredWords:inSpellDocumentWithTag:	AK	Cl	NSSpellChecker	im	void	NSArray *	int
guessesForWord:	AK	Cl	NSSpellChecker	im	NSArray *	NSString *
completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:	AK	Cl	NSSpellChecker	im	NSArray *	NSRange	NSString *	NSString *	int
closeSpellDocumentWithTag:	AK	Cl	NSSpellChecker	im	void	int
language	AK	Cl	NSSpellChecker	im	NSString *
setLanguage:	AK	Cl	NSSpellChecker	im	BOOL	NSString *
setWordFieldStringValue:	AK	Cl	NSSpellChecker	im	void	NSString *
changeSpelling:	AK	Pr	NSChangeSpelling;NSSpellProtocol	im	void	id
ignoreSpelling:	AK	Pr	NSIgnoreMisspelledWords;NSSpellProtocol	im	void	id
setDelegate:	AK	Cl	NSSplitView	im	void	id
delegate	AK	Cl	NSSplitView	im	id
adjustSubviews	AK	Cl	NSSplitView	im	void
dividerThickness	AK	Cl	NSSplitView	im	float
drawDividerInRect:	AK	Cl	NSSplitView	im	void	NSRect
setVertical:	AK	Cl	NSSplitView	im	void	BOOL
isVertical	AK	Cl	NSSplitView	im	BOOL
setIsPaneSplitter:	AK	Cl	NSSplitView	im	void	BOOL
isPaneSplitter	AK	Cl	NSSplitView	im	BOOL
isSubviewCollapsed:	AK	Cl	NSSplitView	im	BOOL	NSView *
splitView:resizeSubviewsWithOldSize:	AK	Cl	NSObject;NSSplitView	dm	void	NSSplitView *	NSSize
splitView:constrainMinCoordinate:ofSubviewAt:	AK	Cl	NSObject;NSSplitView	dm	float	NSSplitView *	float	int
splitView:constrainMaxCoordinate:ofSubviewAt:	AK	Cl	NSObject;NSSplitView	dm	float	NSSplitView *	float	int
splitViewWillResizeSubviews:	AK	Cl	NSObject;NSSplitView	dm	void	NSNotification *
splitViewDidResizeSubviews:	AK	Cl	NSObject;NSSplitView	dm	void	NSNotification *
splitView:canCollapseSubview:	AK	Cl	NSObject;NSSplitView	dm	BOOL	NSSplitView *	NSView *
splitView:constrainSplitPosition:ofSubviewAt:	AK	Cl	NSObject;NSSplitView	dm	float	NSSplitView *	float	int
systemStatusBar	AK	Cl	NSStatusBar	cm	NSStatusBar *
statusItemWithLength:	AK	Cl	NSStatusBar	im	NSStatusItem *	float
removeStatusItem:	AK	Cl	NSStatusBar	im	void	NSStatusItem *
isVertical	AK	Cl	NSStatusBar	im	BOOL
thickness	AK	Cl	NSStatusBar	im	float
statusBar	AK	Cl	NSStatusItem	im	NSStatusBar *
length	AK	Cl	NSStatusItem	im	float
setLength:	AK	Cl	NSStatusItem	im	void	float
action	AK	Cl	NSStatusItem	im	SEL
setAction:	AK	Cl	NSStatusItem	im	void	SEL
doubleAction	AK	Cl	NSStatusItem	im	SEL
setDoubleAction:	AK	Cl	NSStatusItem	im	void	SEL
target	AK	Cl	NSStatusItem	im	id
setTarget:	AK	Cl	NSStatusItem	im	void	id
title	AK	Cl	NSStatusItem	im	NSString *
setTitle:	AK	Cl	NSStatusItem	im	void	NSString *
attributedTitle	AK	Cl	NSStatusItem	im	NSAttributedString *
setAttributedTitle:	AK	Cl	NSStatusItem	im	void	NSAttributedString *
image	AK	Cl	NSStatusItem	im	NSImage *
setImage:	AK	Cl	NSStatusItem	im	void	NSImage *
alternateImage	AK	Cl	NSStatusItem	im	NSImage *
setAlternateImage:	AK	Cl	NSStatusItem	im	void	NSImage *
menu	AK	Cl	NSStatusItem	im	NSMenu *
setMenu:	AK	Cl	NSStatusItem	im	void	NSMenu *
isEnabled	AK	Cl	NSStatusItem	im	BOOL
setEnabled:	AK	Cl	NSStatusItem	im	void	BOOL
toolTip	AK	Cl	NSStatusItem	im	NSString *
setToolTip:	AK	Cl	NSStatusItem	im	void	NSString *
setHighlightMode:	AK	Cl	NSStatusItem	im	void	BOOL
highlightMode	AK	Cl	NSStatusItem	im	BOOL
sendActionOn:	AK	Cl	NSStatusItem	im	void	int
popUpStatusItemMenu:	AK	Cl	NSStatusItem	im	void	NSMenu *
drawStatusBarBackgroundInRect:withHighlight:	AK	Cl	NSStatusItem	im	void	NSRect	BOOL
view	AK	Cl	NSStatusItem	im	NSView *
setView:	AK	Cl	NSStatusItem	im	void	NSView *
minValue	AK	Cl	NSStepper	im	double
setMinValue:	AK	Cl	NSStepper	im	void	double
maxValue	AK	Cl	NSStepper	im	double
setMaxValue:	AK	Cl	NSStepper	im	void	double
increment	AK	Cl	NSStepper	im	double
setIncrement:	AK	Cl	NSStepper	im	void	double
valueWraps	AK	Cl	NSStepper	im	BOOL
setValueWraps:	AK	Cl	NSStepper	im	void	BOOL
autorepeat	AK	Cl	NSStepper	im	BOOL
setAutorepeat:	AK	Cl	NSStepper	im	void	BOOL
minValue	AK	Cl	NSStepperCell	im	double
setMinValue:	AK	Cl	NSStepperCell	im	void	double
maxValue	AK	Cl	NSStepperCell	im	double
setMaxValue:	AK	Cl	NSStepperCell	im	void	double
increment	AK	Cl	NSStepperCell	im	double
setIncrement:	AK	Cl	NSStepperCell	im	void	double
valueWraps	AK	Cl	NSStepperCell	im	BOOL
setValueWraps:	AK	Cl	NSStepperCell	im	void	BOOL
autorepeat	AK	Cl	NSStepperCell	im	BOOL
setAutorepeat:	AK	Cl	NSStepperCell	im	void	BOOL
sizeWithAttributes:	AK	Cl	NSString;NSStringDrawing	im	NSSize	NSDictionary *
drawAtPoint:withAttributes:	AK	Cl	NSString;NSStringDrawing	im	void	NSPoint	NSDictionary *
drawInRect:withAttributes:	AK	Cl	NSString;NSStringDrawing	im	void	NSRect	NSDictionary *
size	AK	Cl	NSAttributedString;NSStringDrawing	im	NSSize
drawAtPoint:	AK	Cl	NSAttributedString;NSStringDrawing	im	void	NSPoint
drawInRect:	AK	Cl	NSAttributedString;NSStringDrawing	im	void	NSRect
drawWithRect:options:attributes:	AK	Cl	NSString;NSStringDrawing	im	void	NSRect	NSStringDrawingOptions	NSDictionary *
boundingRectWithSize:options:attributes:	AK	Cl	NSString;NSStringDrawing	im	NSRect	NSSize	NSStringDrawingOptions	NSDictionary *
drawWithRect:options:	AK	Cl	NSAttributedString;NSStringDrawing	im	void	NSRect	NSStringDrawingOptions
boundingRectWithSize:options:	AK	Cl	NSAttributedString;NSStringDrawing	im	NSRect	NSSize	NSStringDrawingOptions
initWithIdentifier:	AK	Cl	NSTableColumn	im	id	id
setIdentifier:	AK	Cl	NSTableColumn	im	void	id
identifier	AK	Cl	NSTableColumn	im	id
setTableView:	AK	Cl	NSTableColumn	im	void	NSTableView *
tableView	AK	Cl	NSTableColumn	im	NSTableView *
setWidth:	AK	Cl	NSTableColumn	im	void	float
width	AK	Cl	NSTableColumn	im	float
setMinWidth:	AK	Cl	NSTableColumn	im	void	float
minWidth	AK	Cl	NSTableColumn	im	float
setMaxWidth:	AK	Cl	NSTableColumn	im	void	float
maxWidth	AK	Cl	NSTableColumn	im	float
setHeaderCell:	AK	Cl	NSTableColumn	im	void	NSCell *
headerCell	AK	Cl	NSTableColumn	im	id
setDataCell:	AK	Cl	NSTableColumn	im	void	NSCell *
dataCell	AK	Cl	NSTableColumn	im	id
dataCellForRow:	AK	Cl	NSTableColumn	im	id	int
setEditable:	AK	Cl	NSTableColumn	im	void	BOOL
isEditable	AK	Cl	NSTableColumn	im	BOOL
sizeToFit	AK	Cl	NSTableColumn	im	void
setSortDescriptorPrototype:	AK	Cl	NSTableColumn	im	void	NSSortDescriptor *
sortDescriptorPrototype	AK	Cl	NSTableColumn	im	NSSortDescriptor *
setResizingMask:	AK	Cl	NSTableColumn	im	void	unsigned
resizingMask	AK	Cl	NSTableColumn	im	unsigned
setResizable:	AK	Cl	NSTableColumn	im	void	BOOL
isResizable	AK	Cl	NSTableColumn	im	BOOL
drawSortIndicatorWithFrame:inView:ascending:priority:	AK	Cl	NSTableHeaderCell	im	void	NSRect	NSView *	BOOL	int
sortIndicatorRectForBounds:	AK	Cl	NSTableHeaderCell	im	NSRect	NSRect
setTableView:	AK	Cl	NSTableHeaderView	im	void	NSTableView *
tableView	AK	Cl	NSTableHeaderView	im	NSTableView *
draggedColumn	AK	Cl	NSTableHeaderView	im	int
draggedDistance	AK	Cl	NSTableHeaderView	im	float
resizedColumn	AK	Cl	NSTableHeaderView	im	int
headerRectOfColumn:	AK	Cl	NSTableHeaderView	im	NSRect	int
columnAtPoint:	AK	Cl	NSTableHeaderView	im	int	NSPoint
setDataSource:	AK	Cl	NSTableView	im	void	id
dataSource	AK	Cl	NSTableView	im	id
setDelegate:	AK	Cl	NSTableView	im	void	id
delegate	AK	Cl	NSTableView	im	id
setHeaderView:	AK	Cl	NSTableView	im	void	NSTableHeaderView *
headerView	AK	Cl	NSTableView	im	NSTableHeaderView *
setCornerView:	AK	Cl	NSTableView	im	void	NSView *
cornerView	AK	Cl	NSTableView	im	NSView *
setAllowsColumnReordering:	AK	Cl	NSTableView	im	void	BOOL
allowsColumnReordering	AK	Cl	NSTableView	im	BOOL
setAllowsColumnResizing:	AK	Cl	NSTableView	im	void	BOOL
allowsColumnResizing	AK	Cl	NSTableView	im	BOOL
setColumnAutoresizingStyle:	AK	Cl	NSTableView	im	void	NSTableViewColumnAutoresizingStyle
columnAutoresizingStyle	AK	Cl	NSTableView	im	NSTableViewColumnAutoresizingStyle
setGridStyleMask:	AK	Cl	NSTableView	im	void	unsigned int
gridStyleMask	AK	Cl	NSTableView	im	unsigned int
setIntercellSpacing:	AK	Cl	NSTableView	im	void	NSSize
intercellSpacing	AK	Cl	NSTableView	im	NSSize
setUsesAlternatingRowBackgroundColors:	AK	Cl	NSTableView	im	void	BOOL
usesAlternatingRowBackgroundColors	AK	Cl	NSTableView	im	BOOL
setBackgroundColor:	AK	Cl	NSTableView	im	void	NSColor *
backgroundColor	AK	Cl	NSTableView	im	NSColor *
setGridColor:	AK	Cl	NSTableView	im	void	NSColor *
gridColor	AK	Cl	NSTableView	im	NSColor *
setRowHeight:	AK	Cl	NSTableView	im	void	float
rowHeight	AK	Cl	NSTableView	im	float
noteHeightOfRowsWithIndexesChanged:	AK	Cl	NSTableView	im	void	NSIndexSet *
tableColumns	AK	Cl	NSTableView	im	NSArray *
numberOfColumns	AK	Cl	NSTableView	im	int
numberOfRows	AK	Cl	NSTableView	im	int
addTableColumn:	AK	Cl	NSTableView	im	void	NSTableColumn *
removeTableColumn:	AK	Cl	NSTableView	im	void	NSTableColumn *
columnWithIdentifier:	AK	Cl	NSTableView	im	int	id
tableColumnWithIdentifier:	AK	Cl	NSTableView	im	NSTableColumn *	id
tile	AK	Cl	NSTableView	im	void
sizeToFit	AK	Cl	NSTableView	im	void
sizeLastColumnToFit	AK	Cl	NSTableView	im	void
scrollRowToVisible:	AK	Cl	NSTableView	im	void	int
scrollColumnToVisible:	AK	Cl	NSTableView	im	void	int
moveColumn:toColumn:	AK	Cl	NSTableView	im	void	int	int
reloadData	AK	Cl	NSTableView	im	void
noteNumberOfRowsChanged	AK	Cl	NSTableView	im	void
editedColumn	AK	Cl	NSTableView	im	int
editedRow	AK	Cl	NSTableView	im	int
clickedColumn	AK	Cl	NSTableView	im	int
clickedRow	AK	Cl	NSTableView	im	int
setDoubleAction:	AK	Cl	NSTableView	im	void	SEL
doubleAction	AK	Cl	NSTableView	im	SEL
setSortDescriptors:	AK	Cl	NSTableView	im	void	NSArray *
sortDescriptors	AK	Cl	NSTableView	im	NSArray *
setIndicatorImage:inTableColumn:	AK	Cl	NSTableView	im	void	NSImage *	NSTableColumn *
indicatorImageInTableColumn:	AK	Cl	NSTableView	im	NSImage *	NSTableColumn *
setHighlightedTableColumn:	AK	Cl	NSTableView	im	void	NSTableColumn *
highlightedTableColumn	AK	Cl	NSTableView	im	NSTableColumn *
setVerticalMotionCanBeginDrag:	AK	Cl	NSTableView	im	void	BOOL
verticalMotionCanBeginDrag	AK	Cl	NSTableView	im	BOOL
canDragRowsWithIndexes:atPoint:	AK	Cl	NSTableView	im	BOOL	NSIndexSet *	NSPoint
dragImageForRowsWithIndexes:tableColumns:event:offset:	AK	Cl	NSTableView	im	NSImage *	NSIndexSet *	NSArray *	NSEvent *	NSPointPointer
setDraggingSourceOperationMask:forLocal:	AK	Cl	NSTableView	im	void	unsigned int	BOOL
setDropRow:dropOperation:	AK	Cl	NSTableView	im	void	int	NSTableViewDropOperation
setAllowsMultipleSelection:	AK	Cl	NSTableView	im	void	BOOL
allowsMultipleSelection	AK	Cl	NSTableView	im	BOOL
setAllowsEmptySelection:	AK	Cl	NSTableView	im	void	BOOL
allowsEmptySelection	AK	Cl	NSTableView	im	BOOL
setAllowsColumnSelection:	AK	Cl	NSTableView	im	void	BOOL
allowsColumnSelection	AK	Cl	NSTableView	im	BOOL
selectAll:	AK	Cl	NSTableView	im	void	id
deselectAll:	AK	Cl	NSTableView	im	void	id
selectColumnIndexes:byExtendingSelection:	AK	Cl	NSTableView	im	void	NSIndexSet *	BOOL
selectRowIndexes:byExtendingSelection:	AK	Cl	NSTableView	im	void	NSIndexSet *	BOOL
selectedColumnIndexes	AK	Cl	NSTableView	im	NSIndexSet *
selectedRowIndexes	AK	Cl	NSTableView	im	NSIndexSet *
deselectColumn:	AK	Cl	NSTableView	im	void	int
deselectRow:	AK	Cl	NSTableView	im	void	int
selectedColumn	AK	Cl	NSTableView	im	int
selectedRow	AK	Cl	NSTableView	im	int
isColumnSelected:	AK	Cl	NSTableView	im	BOOL	int
isRowSelected:	AK	Cl	NSTableView	im	BOOL	int
numberOfSelectedColumns	AK	Cl	NSTableView	im	int
numberOfSelectedRows	AK	Cl	NSTableView	im	int
rectOfColumn:	AK	Cl	NSTableView	im	NSRect	int
rectOfRow:	AK	Cl	NSTableView	im	NSRect	int
columnsInRect:	AK	Cl	NSTableView	im	NSRange	NSRect
rowsInRect:	AK	Cl	NSTableView	im	NSRange	NSRect
columnAtPoint:	AK	Cl	NSTableView	im	int	NSPoint
rowAtPoint:	AK	Cl	NSTableView	im	int	NSPoint
frameOfCellAtColumn:row:	AK	Cl	NSTableView	im	NSRect	int	int
textShouldBeginEditing:	AK	Cl	NSTableView	im	BOOL	NSText *
textShouldEndEditing:	AK	Cl	NSTableView	im	BOOL	NSText *
textDidBeginEditing:	AK	Cl	NSTableView	im	void	NSNotification *
textDidEndEditing:	AK	Cl	NSTableView	im	void	NSNotification *
textDidChange:	AK	Cl	NSTableView	im	void	NSNotification *
setAutosaveName:	AK	Cl	NSTableView	im	void	NSString *
autosaveName	AK	Cl	NSTableView	im	NSString *
setAutosaveTableColumns:	AK	Cl	NSTableView	im	void	BOOL
autosaveTableColumns	AK	Cl	NSTableView	im	BOOL
editColumn:row:withEvent:select:	AK	Cl	NSTableView	im	void	int	int	NSEvent *	BOOL
drawRow:clipRect:	AK	Cl	NSTableView	im	void	int	NSRect
highlightSelectionInClipRect:	AK	Cl	NSTableView	im	void	NSRect
drawGridInClipRect:	AK	Cl	NSTableView	im	void	NSRect
drawBackgroundInClipRect:	AK	Cl	NSTableView	im	void	NSRect
setDrawsGrid:	AK	Cl	NSTableView	im	void	BOOL
drawsGrid	AK	Cl	NSTableView	im	BOOL
selectColumn:byExtendingSelection:	AK	Cl	NSTableView	im	void	int	BOOL
selectRow:byExtendingSelection:	AK	Cl	NSTableView	im	void	int	BOOL
selectedColumnEnumerator	AK	Cl	NSTableView	im	NSEnumerator *
selectedRowEnumerator	AK	Cl	NSTableView	im	NSEnumerator *
dragImageForRows:event:dragImageOffset:	AK	Cl	NSTableView	im	NSImage *	NSArray *	NSEvent *	NSPointPointer
setAutoresizesAllColumnsToFit:	AK	Cl	NSTableView	im	void	BOOL
autoresizesAllColumnsToFit	AK	Cl	NSTableView	im	BOOL
tableView:willDisplayCell:forTableColumn:row:	AK	Cl	NSObject;NSTableView	dm	void	NSTableView *	id	NSTableColumn *	int
tableView:shouldEditTableColumn:row:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *	NSTableColumn *	int
selectionShouldChangeInTableView:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *
tableView:shouldSelectRow:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *	int
tableView:shouldSelectTableColumn:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *	NSTableColumn *
tableView:mouseDownInHeaderOfTableColumn:	AK	Cl	NSObject;NSTableView	dm	void	NSTableView *	NSTableColumn *
tableView:didClickTableColumn:	AK	Cl	NSObject;NSTableView	dm	void	NSTableView *	NSTableColumn *
tableView:didDragTableColumn:	AK	Cl	NSObject;NSTableView	dm	void	NSTableView *	NSTableColumn *
tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:	AK	Cl	NSObject;NSTableView	dm	NSString *	NSTableView *	NSCell *	NSRectPointer	NSTableColumn *	int	NSPoint
tableView:heightOfRow:	AK	Cl	NSObject;NSTableView	dm	float	NSTableView *	int
tableViewSelectionDidChange:	AK	Cl	NSObject;NSTableView	dm	void	NSNotification *
tableViewColumnDidMove:	AK	Cl	NSObject;NSTableView	dm	void	NSNotification *
tableViewColumnDidResize:	AK	Cl	NSObject;NSTableView	dm	void	NSNotification *
tableViewSelectionIsChanging:	AK	Cl	NSObject;NSTableView	dm	void	NSNotification *
numberOfRowsInTableView:	AK	Cl	NSObject;NSTableView	dm	int	NSTableView *
tableView:objectValueForTableColumn:row:	AK	Cl	NSObject;NSTableView	dm	id	NSTableView *	NSTableColumn *	int
tableView:setObjectValue:forTableColumn:row:	AK	Cl	NSObject;NSTableView	dm	void	NSTableView *	id	NSTableColumn *	int
tableView:sortDescriptorsDidChange:	AK	Cl	NSObject;NSTableView	dm	void	NSTableView *	NSArray *
tableView:writeRowsWithIndexes:toPasteboard:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *	NSIndexSet *	NSPasteboard *
tableView:validateDrop:proposedRow:proposedDropOperation:	AK	Cl	NSObject;NSTableView	dm	NSDragOperation	NSTableView *	id <NSDraggingInfo>	int	NSTableViewDropOperation
tableView:acceptDrop:row:dropOperation:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *	id <NSDraggingInfo>	int	NSTableViewDropOperation
tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:	AK	Cl	NSObject;NSTableView	dm	NSArray *	NSTableView *	NSURL *	NSIndexSet *
tableView:writeRows:toPasteboard:	AK	Cl	NSObject;NSTableView	dm	BOOL	NSTableView *	NSArray *	NSPasteboard *
selectTabViewItem:	AK	Cl	NSTabView	im	void	NSTabViewItem *
selectTabViewItemAtIndex:	AK	Cl	NSTabView	im	void	int
selectTabViewItemWithIdentifier:	AK	Cl	NSTabView	im	void	id
takeSelectedTabViewItemFromSender:	AK	Cl	NSTabView	im	void	id
selectFirstTabViewItem:	AK	Cl	NSTabView	im	void	id
selectLastTabViewItem:	AK	Cl	NSTabView	im	void	id
selectNextTabViewItem:	AK	Cl	NSTabView	im	void	id
selectPreviousTabViewItem:	AK	Cl	NSTabView	im	void	id
selectedTabViewItem	AK	Cl	NSTabView	im	NSTabViewItem *
font	AK	Cl	NSTabView	im	NSFont *
tabViewType	AK	Cl	NSTabView	im	NSTabViewType
tabViewItems	AK	Cl	NSTabView	im	NSArray *
allowsTruncatedLabels	AK	Cl	NSTabView	im	BOOL
minimumSize	AK	Cl	NSTabView	im	NSSize
drawsBackground	AK	Cl	NSTabView	im	BOOL
controlTint	AK	Cl	NSTabView	im	NSControlTint
controlSize	AK	Cl	NSTabView	im	NSControlSize
setFont:	AK	Cl	NSTabView	im	void	NSFont *
setTabViewType:	AK	Cl	NSTabView	im	void	NSTabViewType
setAllowsTruncatedLabels:	AK	Cl	NSTabView	im	void	BOOL
setDrawsBackground:	AK	Cl	NSTabView	im	void	BOOL
setControlTint:	AK	Cl	NSTabView	im	void	NSControlTint
setControlSize:	AK	Cl	NSTabView	im	void	NSControlSize
addTabViewItem:	AK	Cl	NSTabView	im	void	NSTabViewItem *
insertTabViewItem:atIndex:	AK	Cl	NSTabView	im	void	NSTabViewItem *	int
removeTabViewItem:	AK	Cl	NSTabView	im	void	NSTabViewItem *
setDelegate:	AK	Cl	NSTabView	im	void	id
delegate	AK	Cl	NSTabView	im	id
tabViewItemAtPoint:	AK	Cl	NSTabView	im	NSTabViewItem *	NSPoint
contentRect	AK	Cl	NSTabView	im	NSRect
numberOfTabViewItems	AK	Cl	NSTabView	im	int
indexOfTabViewItem:	AK	Cl	NSTabView	im	int	NSTabViewItem *
tabViewItemAtIndex:	AK	Cl	NSTabView	im	NSTabViewItem *	int
indexOfTabViewItemWithIdentifier:	AK	Cl	NSTabView	im	int	id
tabView:shouldSelectTabViewItem:	AK	Cl	NSObject;NSTabView	dm	BOOL	NSTabView *	NSTabViewItem *
tabView:willSelectTabViewItem:	AK	Cl	NSObject;NSTabView	dm	void	NSTabView *	NSTabViewItem *
tabView:didSelectTabViewItem:	AK	Cl	NSObject;NSTabView	dm	void	NSTabView *	NSTabViewItem *
tabViewDidChangeNumberOfTabViewItems:	AK	Cl	NSObject;NSTabView	dm	void	NSTabView *
initWithIdentifier:	AK	Cl	NSTabViewItem	im	id	id
identifier	AK	Cl	NSTabViewItem	im	id
view	AK	Cl	NSTabViewItem	im	id
initialFirstResponder	AK	Cl	NSTabViewItem	im	id
label	AK	Cl	NSTabViewItem	im	NSString *
color	AK	Cl	NSTabViewItem	im	NSColor *
tabState	AK	Cl	NSTabViewItem	im	NSTabState
tabView	AK	Cl	NSTabViewItem	im	NSTabView *
setIdentifier:	AK	Cl	NSTabViewItem	im	void	id
setLabel:	AK	Cl	NSTabViewItem	im	void	NSString *
setColor:	AK	Cl	NSTabViewItem	im	void	NSColor *
setView:	AK	Cl	NSTabViewItem	im	void	NSView *
setInitialFirstResponder:	AK	Cl	NSTabViewItem	im	void	NSView *
drawLabel:inRect:	AK	Cl	NSTabViewItem	im	void	BOOL	NSRect
sizeOfLabel:	AK	Cl	NSTabViewItem	im	NSSize	BOOL
string	AK	Cl	NSText	im	NSString *
setString:	AK	Cl	NSText	im	void	NSString *
replaceCharactersInRange:withString:	AK	Cl	NSText	im	void	NSRange	NSString *
replaceCharactersInRange:withRTF:	AK	Cl	NSText	im	void	NSRange	NSData *
replaceCharactersInRange:withRTFD:	AK	Cl	NSText	im	void	NSRange	NSData *
RTFFromRange:	AK	Cl	NSText	im	NSData *	NSRange
RTFDFromRange:	AK	Cl	NSText	im	NSData *	NSRange
writeRTFDToFile:atomically:	AK	Cl	NSText	im	BOOL	NSString *	BOOL
readRTFDFromFile:	AK	Cl	NSText	im	BOOL	NSString *
delegate	AK	Cl	NSText	im	id
setDelegate:	AK	Cl	NSText	im	void	id
isEditable	AK	Cl	NSText	im	BOOL
setEditable:	AK	Cl	NSText	im	void	BOOL
isSelectable	AK	Cl	NSText	im	BOOL
setSelectable:	AK	Cl	NSText	im	void	BOOL
isRichText	AK	Cl	NSText	im	BOOL
setRichText:	AK	Cl	NSText	im	void	BOOL
importsGraphics	AK	Cl	NSText	im	BOOL
setImportsGraphics:	AK	Cl	NSText	im	void	BOOL
setBackgroundColor:	AK	Cl	NSText	im	void	NSColor *
backgroundColor	AK	Cl	NSText	im	NSColor *
setDrawsBackground:	AK	Cl	NSText	im	void	BOOL
drawsBackground	AK	Cl	NSText	im	BOOL
setFont:	AK	Cl	NSText	im	void	NSFont *
font	AK	Cl	NSText	im	NSFont *
setTextColor:	AK	Cl	NSText	im	void	NSColor *
textColor	AK	Cl	NSText	im	NSColor *
alignment	AK	Cl	NSText	im	NSTextAlignment
setAlignment:	AK	Cl	NSText	im	void	NSTextAlignment
baseWritingDirection	AK	Cl	NSText	im	NSWritingDirection
setBaseWritingDirection:	AK	Cl	NSText	im	void	NSWritingDirection
setFieldEditor:	AK	Cl	NSText	im	void	BOOL
isFieldEditor	AK	Cl	NSText	im	BOOL
setTextColor:range:	AK	Cl	NSText	im	void	NSColor *	NSRange
setFont:range:	AK	Cl	NSText	im	void	NSFont *	NSRange
usesFontPanel	AK	Cl	NSText	im	BOOL
setUsesFontPanel:	AK	Cl	NSText	im	void	BOOL
maxSize	AK	Cl	NSText	im	NSSize
setMaxSize:	AK	Cl	NSText	im	void	NSSize
minSize	AK	Cl	NSText	im	NSSize
setMinSize:	AK	Cl	NSText	im	void	NSSize
isHorizontallyResizable	AK	Cl	NSText	im	BOOL
setHorizontallyResizable:	AK	Cl	NSText	im	void	BOOL
isVerticallyResizable	AK	Cl	NSText	im	BOOL
setVerticallyResizable:	AK	Cl	NSText	im	void	BOOL
sizeToFit	AK	Cl	NSText	im	void
copy:	AK	Cl	NSText	im	void	id
copyFont:	AK	Cl	NSText	im	void	id
copyRuler:	AK	Cl	NSText	im	void	id
cut:	AK	Cl	NSText	im	void	id
delete:	AK	Cl	NSText	im	void	id
paste:	AK	Cl	NSText	im	void	id
pasteFont:	AK	Cl	NSText	im	void	id
pasteRuler:	AK	Cl	NSText	im	void	id
selectAll:	AK	Cl	NSText	im	void	id
changeFont:	AK	Cl	NSText	im	void	id
alignLeft:	AK	Cl	NSText	im	void	id
alignRight:	AK	Cl	NSText	im	void	id
alignCenter:	AK	Cl	NSText	im	void	id
subscript:	AK	Cl	NSText	im	void	id
superscript:	AK	Cl	NSText	im	void	id
underline:	AK	Cl	NSText	im	void	id
unscript:	AK	Cl	NSText	im	void	id
showGuessPanel:	AK	Cl	NSText	im	void	id
checkSpelling:	AK	Cl	NSText	im	void	id
toggleRuler:	AK	Cl	NSText	im	void	id
isRulerVisible	AK	Cl	NSText	im	BOOL
selectedRange	AK	Cl	NSText	im	NSRange
setSelectedRange:	AK	Cl	NSText	im	void	NSRange
scrollRangeToVisible:	AK	Cl	NSText	im	void	NSRange
textShouldBeginEditing:	AK	Cl	NSObject;NSText	dm	BOOL	NSText *
textShouldEndEditing:	AK	Cl	NSObject;NSText	dm	BOOL	NSText *
textDidBeginEditing:	AK	Cl	NSObject;NSText	dm	void	NSNotification *
textDidEndEditing:	AK	Cl	NSObject;NSText	dm	void	NSNotification *
textDidChange:	AK	Cl	NSObject;NSText	dm	void	NSNotification *
drawWithFrame:inView:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	void	NSRect	NSView *
wantsToTrackMouse	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	BOOL
highlight:withFrame:inView:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	void	BOOL	NSRect	NSView *
trackMouse:inRect:ofView:untilMouseUp:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	BOOL	NSEvent *	NSRect	NSView *	BOOL
cellSize	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	NSSize
cellBaselineOffset	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	NSPoint
setAttachment:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	void	NSTextAttachment *
attachment	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	NSTextAttachment *
drawWithFrame:inView:characterIndex:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	void	NSRect	NSView *	unsigned
drawWithFrame:inView:characterIndex:layoutManager:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	void	NSRect	NSView *	unsigned	NSLayoutManager *
wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	BOOL	NSEvent *	NSRect	NSView *	unsigned
trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	BOOL	NSEvent *	NSRect	NSView *	unsigned	BOOL
cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:	AK	Pr	NSTextAttachmentCell;NSTextAttachment	im	NSRect	NSTextContainer *	NSRect	NSPoint	unsigned
initWithFileWrapper:	AK	Cl	NSTextAttachment	im	id	NSFileWrapper *
setFileWrapper:	AK	Cl	NSTextAttachment	im	void	NSFileWrapper *
fileWrapper	AK	Cl	NSTextAttachment	im	NSFileWrapper *
attachmentCell	AK	Cl	NSTextAttachment	im	id <NSTextAttachmentCell>
setAttachmentCell:	AK	Cl	NSTextAttachment	im	void	id <NSTextAttachmentCell>
attributedStringWithAttachment:	AK	Cl	NSAttributedString;NSTextAttachment	cm	NSAttributedString *	NSTextAttachment *
updateAttachmentsFromPath:	AK	Cl	NSMutableAttributedString;NSTextAttachment	im	void	NSString *
initWithContainerSize:	AK	Cl	NSTextContainer	im	id	NSSize
layoutManager	AK	Cl	NSTextContainer	im	NSLayoutManager *
setLayoutManager:	AK	Cl	NSTextContainer	im	void	NSLayoutManager *
replaceLayoutManager:	AK	Cl	NSTextContainer	im	void	NSLayoutManager *
textView	AK	Cl	NSTextContainer	im	NSTextView *
setTextView:	AK	Cl	NSTextContainer	im	void	NSTextView *
setWidthTracksTextView:	AK	Cl	NSTextContainer	im	void	BOOL
widthTracksTextView	AK	Cl	NSTextContainer	im	BOOL
setHeightTracksTextView:	AK	Cl	NSTextContainer	im	void	BOOL
heightTracksTextView	AK	Cl	NSTextContainer	im	BOOL
setContainerSize:	AK	Cl	NSTextContainer	im	void	NSSize
containerSize	AK	Cl	NSTextContainer	im	NSSize
setLineFragmentPadding:	AK	Cl	NSTextContainer	im	void	float
lineFragmentPadding	AK	Cl	NSTextContainer	im	float
lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:	AK	Cl	NSTextContainer	im	NSRect	NSRect	NSLineSweepDirection	NSLineMovementDirection	NSRectPointer
isSimpleRectangularTextContainer	AK	Cl	NSTextContainer	im	BOOL
containsPoint:	AK	Cl	NSTextContainer	im	BOOL	NSPoint
setBackgroundColor:	AK	Cl	NSTextField	im	void	NSColor *
backgroundColor	AK	Cl	NSTextField	im	NSColor *
setDrawsBackground:	AK	Cl	NSTextField	im	void	BOOL
drawsBackground	AK	Cl	NSTextField	im	BOOL
setTextColor:	AK	Cl	NSTextField	im	void	NSColor *
textColor	AK	Cl	NSTextField	im	NSColor *
isBordered	AK	Cl	NSTextField	im	BOOL
setBordered:	AK	Cl	NSTextField	im	void	BOOL
isBezeled	AK	Cl	NSTextField	im	BOOL
setBezeled:	AK	Cl	NSTextField	im	void	BOOL
isEditable	AK	Cl	NSTextField	im	BOOL
setEditable:	AK	Cl	NSTextField	im	void	BOOL
isSelectable	AK	Cl	NSTextField	im	BOOL
setSelectable:	AK	Cl	NSTextField	im	void	BOOL
selectText:	AK	Cl	NSTextField	im	void	id
delegate	AK	Cl	NSTextField	im	id
setDelegate:	AK	Cl	NSTextField	im	void	id
textShouldBeginEditing:	AK	Cl	NSTextField	im	BOOL	NSText *
textShouldEndEditing:	AK	Cl	NSTextField	im	BOOL	NSText *
textDidBeginEditing:	AK	Cl	NSTextField	im	void	NSNotification *
textDidEndEditing:	AK	Cl	NSTextField	im	void	NSNotification *
textDidChange:	AK	Cl	NSTextField	im	void	NSNotification *
acceptsFirstResponder	AK	Cl	NSTextField	im	BOOL
setBezelStyle:	AK	Cl	NSTextField	im	void	NSTextFieldBezelStyle
bezelStyle	AK	Cl	NSTextField	im	NSTextFieldBezelStyle
setTitleWithMnemonic:	AK	Cl	NSTextField	im	void	NSString *
allowsEditingTextAttributes	AK	Cl	NSTextField	im	BOOL
setAllowsEditingTextAttributes:	AK	Cl	NSTextField	im	void	BOOL
importsGraphics	AK	Cl	NSTextField	im	BOOL
setImportsGraphics:	AK	Cl	NSTextField	im	void	BOOL
setBackgroundColor:	AK	Cl	NSTextFieldCell	im	void	NSColor *
backgroundColor	AK	Cl	NSTextFieldCell	im	NSColor *
setDrawsBackground:	AK	Cl	NSTextFieldCell	im	void	BOOL
drawsBackground	AK	Cl	NSTextFieldCell	im	BOOL
setTextColor:	AK	Cl	NSTextFieldCell	im	void	NSColor *
textColor	AK	Cl	NSTextFieldCell	im	NSColor *
setUpFieldEditorAttributes:	AK	Cl	NSTextFieldCell	im	NSText *	NSText *
setBezelStyle:	AK	Cl	NSTextFieldCell	im	void	NSTextFieldBezelStyle
bezelStyle	AK	Cl	NSTextFieldCell	im	NSTextFieldBezelStyle
setPlaceholderString:	AK	Cl	NSTextFieldCell	im	void	NSString *
placeholderString	AK	Cl	NSTextFieldCell	im	NSString *
setPlaceholderAttributedString:	AK	Cl	NSTextFieldCell	im	void	NSAttributedString *
placeholderAttributedString	AK	Cl	NSTextFieldCell	im	NSAttributedString *
initWithMarkerFormat:options:	AK	Cl	NSTextList	im	id	NSString *	unsigned
markerFormat	AK	Cl	NSTextList	im	NSString *
listOptions	AK	Cl	NSTextList	im	unsigned
markerForItemNumber:	AK	Cl	NSTextList	im	NSString *	int
addLayoutManager:	AK	Cl	NSTextStorage	im	void	NSLayoutManager *
removeLayoutManager:	AK	Cl	NSTextStorage	im	void	NSLayoutManager *
layoutManagers	AK	Cl	NSTextStorage	im	NSArray *
edited:range:changeInLength:	AK	Cl	NSTextStorage	im	void	unsigned	NSRange	int
processEditing	AK	Cl	NSTextStorage	im	void
invalidateAttributesInRange:	AK	Cl	NSTextStorage	im	void	NSRange
ensureAttributesAreFixedInRange:	AK	Cl	NSTextStorage	im	void	NSRange
fixesAttributesLazily	AK	Cl	NSTextStorage	im	BOOL
editedMask	AK	Cl	NSTextStorage	im	unsigned
editedRange	AK	Cl	NSTextStorage	im	NSRange
changeInLength	AK	Cl	NSTextStorage	im	int
setDelegate:	AK	Cl	NSTextStorage	im	void	id
delegate	AK	Cl	NSTextStorage	im	id
textStorageWillProcessEditing:	AK	Cl	NSObject;NSTextStorage	dm	void	NSNotification *
textStorageDidProcessEditing:	AK	Cl	NSObject;NSTextStorage	dm	void	NSNotification *
attributeRuns	AK	Cl	NSTextStorage;NSTextStorageScripting	im	NSArray *
setAttributeRuns:	AK	Cl	NSTextStorage;NSTextStorageScripting	im	void	NSArray *
paragraphs	AK	Cl	NSTextStorage;NSTextStorageScripting	im	NSArray *
setParagraphs:	AK	Cl	NSTextStorage;NSTextStorageScripting	im	void	NSArray *
words	AK	Cl	NSTextStorage;NSTextStorageScripting	im	NSArray *
setWords:	AK	Cl	NSTextStorage;NSTextStorageScripting	im	void	NSArray *
characters	AK	Cl	NSTextStorage;NSTextStorageScripting	im	NSArray *
setCharacters:	AK	Cl	NSTextStorage;NSTextStorageScripting	im	void	NSArray *
font	AK	Cl	NSTextStorage;NSTextStorageScripting	im	NSFont *
setFont:	AK	Cl	NSTextStorage;NSTextStorageScripting	im	void	NSFont *
foregroundColor	AK	Cl	NSTextStorage;NSTextStorageScripting	im	NSColor *
setForegroundColor:	AK	Cl	NSTextStorage;NSTextStorageScripting	im	void	NSColor *
init	AK	Cl	NSTextBlock;NSTextTable	im	id
setValue:type:forDimension:	AK	Cl	NSTextBlock;NSTextTable	im	void	float	NSTextBlockValueType	NSTextBlockDimension
valueForDimension:	AK	Cl	NSTextBlock;NSTextTable	im	float	NSTextBlockDimension
valueTypeForDimension:	AK	Cl	NSTextBlock;NSTextTable	im	NSTextBlockValueType	NSTextBlockDimension
setContentWidth:type:	AK	Cl	NSTextBlock;NSTextTable	im	void	float	NSTextBlockValueType
contentWidth	AK	Cl	NSTextBlock;NSTextTable	im	float
contentWidthValueType	AK	Cl	NSTextBlock;NSTextTable	im	NSTextBlockValueType
setWidth:type:forLayer:edge:	AK	Cl	NSTextBlock;NSTextTable	im	void	float	NSTextBlockValueType	NSTextBlockLayer	NSRectEdge
setWidth:type:forLayer:	AK	Cl	NSTextBlock;NSTextTable	im	void	float	NSTextBlockValueType	NSTextBlockLayer
widthForLayer:edge:	AK	Cl	NSTextBlock;NSTextTable	im	float	NSTextBlockLayer	NSRectEdge
widthValueTypeForLayer:edge:	AK	Cl	NSTextBlock;NSTextTable	im	NSTextBlockValueType	NSTextBlockLayer	NSRectEdge
setVerticalAlignment:	AK	Cl	NSTextBlock;NSTextTable	im	void	NSTextBlockVerticalAlignment
verticalAlignment	AK	Cl	NSTextBlock;NSTextTable	im	NSTextBlockVerticalAlignment
setBackgroundColor:	AK	Cl	NSTextBlock;NSTextTable	im	void	NSColor *
backgroundColor	AK	Cl	NSTextBlock;NSTextTable	im	NSColor *
setBorderColor:forEdge:	AK	Cl	NSTextBlock;NSTextTable	im	void	NSColor *	NSRectEdge
setBorderColor:	AK	Cl	NSTextBlock;NSTextTable	im	void	NSColor *
borderColorForEdge:	AK	Cl	NSTextBlock;NSTextTable	im	NSColor *	NSRectEdge
rectForLayoutAtPoint:inRect:textContainer:characterRange:	AK	Cl	NSTextBlock;NSTextTable	im	NSRect	NSPoint	NSRect	NSTextContainer *	NSRange
boundsRectForContentRect:inRect:textContainer:characterRange:	AK	Cl	NSTextBlock;NSTextTable	im	NSRect	NSRect	NSRect	NSTextContainer *	NSRange
drawBackgroundWithFrame:inView:characterRange:layoutManager:	AK	Cl	NSTextBlock;NSTextTable	im	void	NSRect	NSView *	NSRange	NSLayoutManager *
initWithTable:startingRow:rowSpan:startingColumn:columnSpan:	AK	Cl	NSTextTableBlock;NSTextTable	im	id	NSTextTable *	int	int	int	int
table	AK	Cl	NSTextTableBlock;NSTextTable	im	NSTextTable *
startingRow	AK	Cl	NSTextTableBlock;NSTextTable	im	int
rowSpan	AK	Cl	NSTextTableBlock;NSTextTable	im	int
startingColumn	AK	Cl	NSTextTableBlock;NSTextTable	im	int
columnSpan	AK	Cl	NSTextTableBlock;NSTextTable	im	int
numberOfColumns	AK	Cl	NSTextTable	im	unsigned
setNumberOfColumns:	AK	Cl	NSTextTable	im	void	unsigned
layoutAlgorithm	AK	Cl	NSTextTable	im	NSTextTableLayoutAlgorithm
setLayoutAlgorithm:	AK	Cl	NSTextTable	im	void	NSTextTableLayoutAlgorithm
collapsesBorders	AK	Cl	NSTextTable	im	BOOL
setCollapsesBorders:	AK	Cl	NSTextTable	im	void	BOOL
hidesEmptyCells	AK	Cl	NSTextTable	im	BOOL
setHidesEmptyCells:	AK	Cl	NSTextTable	im	void	BOOL
rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:	AK	Cl	NSTextTable	im	NSRect	NSTextTableBlock *	NSPoint	NSRect	NSTextContainer *	NSRange
boundsRectForBlock:contentRect:inRect:textContainer:characterRange:	AK	Cl	NSTextTable	im	NSRect	NSTextTableBlock *	NSRect	NSRect	NSTextContainer *	NSRange
drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:	AK	Cl	NSTextTable	im	void	NSTextTableBlock *	NSRect	NSView *	NSRange	NSLayoutManager *
initWithFrame:textContainer:	AK	Cl	NSTextView	im	id	NSRect	NSTextContainer *
initWithFrame:	AK	Cl	NSTextView	im	id	NSRect
textContainer	AK	Cl	NSTextView	im	NSTextContainer *
setTextContainer:	AK	Cl	NSTextView	im	void	NSTextContainer *
replaceTextContainer:	AK	Cl	NSTextView	im	void	NSTextContainer *
setTextContainerInset:	AK	Cl	NSTextView	im	void	NSSize
textContainerInset	AK	Cl	NSTextView	im	NSSize
textContainerOrigin	AK	Cl	NSTextView	im	NSPoint
invalidateTextContainerOrigin	AK	Cl	NSTextView	im	void
layoutManager	AK	Cl	NSTextView	im	NSLayoutManager *
textStorage	AK	Cl	NSTextView	im	NSTextStorage *
insertText:	AK	Cl	NSTextView	im	void	id
setConstrainedFrameSize:	AK	Cl	NSTextView	im	void	NSSize
setAlignment:range:	AK	Cl	NSTextView	im	void	NSTextAlignment	NSRange
setBaseWritingDirection:range:	AK	Cl	NSTextView	im	void	NSWritingDirection	NSRange
turnOffKerning:	AK	Cl	NSTextView	im	void	id
tightenKerning:	AK	Cl	NSTextView	im	void	id
loosenKerning:	AK	Cl	NSTextView	im	void	id
useStandardKerning:	AK	Cl	NSTextView	im	void	id
turnOffLigatures:	AK	Cl	NSTextView	im	void	id
useStandardLigatures:	AK	Cl	NSTextView	im	void	id
useAllLigatures:	AK	Cl	NSTextView	im	void	id
raiseBaseline:	AK	Cl	NSTextView	im	void	id
lowerBaseline:	AK	Cl	NSTextView	im	void	id
toggleTraditionalCharacterShape:	AK	Cl	NSTextView	im	void	id
outline:	AK	Cl	NSTextView	im	void	id
performFindPanelAction:	AK	Cl	NSTextView	im	void	id
alignJustified:	AK	Cl	NSTextView	im	void	id
changeColor:	AK	Cl	NSTextView	im	void	id
changeAttributes:	AK	Cl	NSTextView	im	void	id
changeDocumentBackgroundColor:	AK	Cl	NSTextView	im	void	id
toggleBaseWritingDirection:	AK	Cl	NSTextView	im	void	id
orderFrontSpacingPanel:	AK	Cl	NSTextView	im	void	id
orderFrontLinkPanel:	AK	Cl	NSTextView	im	void	id
orderFrontListPanel:	AK	Cl	NSTextView	im	void	id
orderFrontTablePanel:	AK	Cl	NSTextView	im	void	id
rulerView:didMoveMarker:	AK	Cl	NSTextView	im	void	NSRulerView *	NSRulerMarker *
rulerView:didRemoveMarker:	AK	Cl	NSTextView	im	void	NSRulerView *	NSRulerMarker *
rulerView:didAddMarker:	AK	Cl	NSTextView	im	void	NSRulerView *	NSRulerMarker *
rulerView:shouldMoveMarker:	AK	Cl	NSTextView	im	BOOL	NSRulerView *	NSRulerMarker *
rulerView:shouldAddMarker:	AK	Cl	NSTextView	im	BOOL	NSRulerView *	NSRulerMarker *
rulerView:willMoveMarker:toLocation:	AK	Cl	NSTextView	im	float	NSRulerView *	NSRulerMarker *	float
rulerView:shouldRemoveMarker:	AK	Cl	NSTextView	im	BOOL	NSRulerView *	NSRulerMarker *
rulerView:willAddMarker:atLocation:	AK	Cl	NSTextView	im	float	NSRulerView *	NSRulerMarker *	float
rulerView:handleMouseDown:	AK	Cl	NSTextView	im	void	NSRulerView *	NSEvent *
setNeedsDisplayInRect:avoidAdditionalLayout:	AK	Cl	NSTextView	im	void	NSRect	BOOL
shouldDrawInsertionPoint	AK	Cl	NSTextView	im	BOOL
drawInsertionPointInRect:color:turnedOn:	AK	Cl	NSTextView	im	void	NSRect	NSColor *	BOOL
drawViewBackgroundInRect:	AK	Cl	NSTextView	im	void	NSRect
updateRuler	AK	Cl	NSTextView	im	void
updateFontPanel	AK	Cl	NSTextView	im	void
updateDragTypeRegistration	AK	Cl	NSTextView	im	void
selectionRangeForProposedRange:granularity:	AK	Cl	NSTextView	im	NSRange	NSRange	NSSelectionGranularity
clickedOnLink:atIndex:	AK	Cl	NSTextView	im	void	id	unsigned
startSpeaking:	AK	Cl	NSTextView	im	void	id
stopSpeaking:	AK	Cl	NSTextView	im	void	id
complete:	AK	Cl	NSTextView	im	void	id
rangeForUserCompletion	AK	Cl	NSTextView	im	NSRange
completionsForPartialWordRange:indexOfSelectedItem:	AK	Cl	NSTextView	im	NSArray *	NSRange	int *
insertCompletion:forPartialWordRange:movement:isFinal:	AK	Cl	NSTextView	im	void	NSString *	NSRange	int	BOOL
writablePasteboardTypes	AK	Cl	NSTextView	im	NSArray *
writeSelectionToPasteboard:type:	AK	Cl	NSTextView	im	BOOL	NSPasteboard *	NSString *
writeSelectionToPasteboard:types:	AK	Cl	NSTextView	im	BOOL	NSPasteboard *	NSArray *
readablePasteboardTypes	AK	Cl	NSTextView	im	NSArray *
preferredPasteboardTypeFromArray:restrictedToTypesFromArray:	AK	Cl	NSTextView	im	NSString *	NSArray *	NSArray *
readSelectionFromPasteboard:type:	AK	Cl	NSTextView	im	BOOL	NSPasteboard *	NSString *
readSelectionFromPasteboard:	AK	Cl	NSTextView	im	BOOL	NSPasteboard *
registerForServices	AK	Cl	NSTextView	cm	void
validRequestorForSendType:returnType:	AK	Cl	NSTextView	im	id	NSString *	NSString *
pasteAsPlainText:	AK	Cl	NSTextView	im	void	id
pasteAsRichText:	AK	Cl	NSTextView	im	void	id
dragSelectionWithEvent:offset:slideBack:	AK	Cl	NSTextView	im	BOOL	NSEvent *	NSSize	BOOL
dragImageForSelectionWithEvent:origin:	AK	Cl	NSTextView	im	NSImage *	NSEvent *	NSPointPointer
acceptableDragTypes	AK	Cl	NSTextView	im	NSArray *
dragOperationForDraggingInfo:type:	AK	Cl	NSTextView	im	unsigned int	id <NSDraggingInfo>	NSString *
cleanUpAfterDragOperation	AK	Cl	NSTextView	im	void
acceptsGlyphInfo	AK	Cl	NSTextView	im	BOOL
setAcceptsGlyphInfo:	AK	Cl	NSTextView	im	void	BOOL
selectedRanges	AK	Cl	NSTextView	im	NSArray *
setSelectedRanges:affinity:stillSelecting:	AK	Cl	NSTextView	im	void	NSArray *	NSSelectionAffinity	BOOL
setSelectedRanges:	AK	Cl	NSTextView	im	void	NSArray *
setSelectedRange:affinity:stillSelecting:	AK	Cl	NSTextView	im	void	NSRange	NSSelectionAffinity	BOOL
selectionAffinity	AK	Cl	NSTextView	im	NSSelectionAffinity
selectionGranularity	AK	Cl	NSTextView	im	NSSelectionGranularity
setSelectionGranularity:	AK	Cl	NSTextView	im	void	NSSelectionGranularity
setSelectedTextAttributes:	AK	Cl	NSTextView	im	void	NSDictionary *
selectedTextAttributes	AK	Cl	NSTextView	im	NSDictionary *
setInsertionPointColor:	AK	Cl	NSTextView	im	void	NSColor *
insertionPointColor	AK	Cl	NSTextView	im	NSColor *
updateInsertionPointStateAndRestartTimer:	AK	Cl	NSTextView	im	void	BOOL
setMarkedTextAttributes:	AK	Cl	NSTextView	im	void	NSDictionary *
markedTextAttributes	AK	Cl	NSTextView	im	NSDictionary *
setLinkTextAttributes:	AK	Cl	NSTextView	im	void	NSDictionary *
linkTextAttributes	AK	Cl	NSTextView	im	NSDictionary *
setRulerVisible:	AK	Cl	NSTextView	im	void	BOOL
usesRuler	AK	Cl	NSTextView	im	BOOL
setUsesRuler:	AK	Cl	NSTextView	im	void	BOOL
setContinuousSpellCheckingEnabled:	AK	Cl	NSTextView	im	void	BOOL
isContinuousSpellCheckingEnabled	AK	Cl	NSTextView	im	BOOL
toggleContinuousSpellChecking:	AK	Cl	NSTextView	im	void	id
spellCheckerDocumentTag	AK	Cl	NSTextView	im	int
typingAttributes	AK	Cl	NSTextView	im	NSDictionary *
setTypingAttributes:	AK	Cl	NSTextView	im	void	NSDictionary *
shouldChangeTextInRanges:replacementStrings:	AK	Cl	NSTextView	im	BOOL	NSArray *	NSArray *
rangesForUserTextChange	AK	Cl	NSTextView	im	NSArray *
rangesForUserCharacterAttributeChange	AK	Cl	NSTextView	im	NSArray *
rangesForUserParagraphAttributeChange	AK	Cl	NSTextView	im	NSArray *
shouldChangeTextInRange:replacementString:	AK	Cl	NSTextView	im	BOOL	NSRange	NSString *
didChangeText	AK	Cl	NSTextView	im	void
rangeForUserTextChange	AK	Cl	NSTextView	im	NSRange
rangeForUserCharacterAttributeChange	AK	Cl	NSTextView	im	NSRange
rangeForUserParagraphAttributeChange	AK	Cl	NSTextView	im	NSRange
setUsesFindPanel:	AK	Cl	NSTextView	im	void	BOOL
usesFindPanel	AK	Cl	NSTextView	im	BOOL
setAllowsDocumentBackgroundColorChange:	AK	Cl	NSTextView	im	void	BOOL
allowsDocumentBackgroundColorChange	AK	Cl	NSTextView	im	BOOL
setDefaultParagraphStyle:	AK	Cl	NSTextView	im	void	NSParagraphStyle *
defaultParagraphStyle	AK	Cl	NSTextView	im	NSParagraphStyle *
breakUndoCoalescing	AK	Cl	NSTextView	im	void
isSelectable	AK	Cl	NSTextView	im	BOOL
setSelectable:	AK	Cl	NSTextView	im	void	BOOL
isEditable	AK	Cl	NSTextView	im	BOOL
setEditable:	AK	Cl	NSTextView	im	void	BOOL
isRichText	AK	Cl	NSTextView	im	BOOL
setRichText:	AK	Cl	NSTextView	im	void	BOOL
importsGraphics	AK	Cl	NSTextView	im	BOOL
setImportsGraphics:	AK	Cl	NSTextView	im	void	BOOL
delegate	AK	Cl	NSTextView	im	id
setDelegate:	AK	Cl	NSTextView	im	void	id
isFieldEditor	AK	Cl	NSTextView	im	BOOL
setFieldEditor:	AK	Cl	NSTextView	im	void	BOOL
usesFontPanel	AK	Cl	NSTextView	im	BOOL
setUsesFontPanel:	AK	Cl	NSTextView	im	void	BOOL
isRulerVisible	AK	Cl	NSTextView	im	BOOL
setBackgroundColor:	AK	Cl	NSTextView	im	void	NSColor *
backgroundColor	AK	Cl	NSTextView	im	NSColor *
setDrawsBackground:	AK	Cl	NSTextView	im	void	BOOL
drawsBackground	AK	Cl	NSTextView	im	BOOL
setSelectedRange:	AK	Cl	NSTextView	im	void	NSRange
allowsUndo	AK	Cl	NSTextView	im	BOOL
setAllowsUndo:	AK	Cl	NSTextView	im	void	BOOL
resignFirstResponder	AK	Cl	NSTextView	im	BOOL
becomeFirstResponder	AK	Cl	NSTextView	im	BOOL
smartInsertDeleteEnabled	AK	Cl	NSTextView	im	BOOL
setSmartInsertDeleteEnabled:	AK	Cl	NSTextView	im	void	BOOL
smartDeleteRangeForProposedRange:	AK	Cl	NSTextView	im	NSRange	NSRange
smartInsertForString:replacingRange:beforeString:afterString:	AK	Cl	NSTextView	im	void	NSString *	NSRange	NSString **	NSString **
smartInsertBeforeStringForString:replacingRange:	AK	Cl	NSTextView	im	NSString *	NSString *	NSRange
smartInsertAfterStringForString:replacingRange:	AK	Cl	NSTextView	im	NSString *	NSString *	NSRange
textView:clickedOnLink:atIndex:	AK	Cl	NSObject;NSTextView	dm	BOOL	NSTextView *	id	unsigned
textView:clickedOnCell:inRect:atIndex:	AK	Cl	NSObject;NSTextView	dm	void	NSTextView *	id <NSTextAttachmentCell>	NSRect	unsigned
textView:doubleClickedOnCell:inRect:atIndex:	AK	Cl	NSObject;NSTextView	dm	void	NSTextView *	id <NSTextAttachmentCell>	NSRect	unsigned
textView:draggedCell:inRect:event:atIndex:	AK	Cl	NSObject;NSTextView	dm	void	NSTextView *	id <NSTextAttachmentCell>	NSRect	NSEvent *	unsigned
textView:writablePasteboardTypesForCell:atIndex:	AK	Cl	NSObject;NSTextView	dm	NSArray *	NSTextView *	id <NSTextAttachmentCell>	unsigned
textView:writeCell:atIndex:toPasteboard:type:	AK	Cl	NSObject;NSTextView	dm	BOOL	NSTextView *	id <NSTextAttachmentCell>	unsigned	NSPasteboard *	NSString *
textView:willChangeSelectionFromCharacterRange:toCharacterRange:	AK	Cl	NSObject;NSTextView	dm	NSRange	NSTextView *	NSRange	NSRange
textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:	AK	Cl	NSObject;NSTextView	dm	NSArray *	NSTextView *	NSArray *	NSArray *
textView:shouldChangeTextInRanges:replacementStrings:	AK	Cl	NSObject;NSTextView	dm	BOOL	NSTextView *	NSArray *	NSArray *
textView:shouldChangeTypingAttributes:toAttributes:	AK	Cl	NSObject;NSTextView	dm	NSDictionary *	NSTextView *	NSDictionary *	NSDictionary *
textViewDidChangeSelection:	AK	Cl	NSObject;NSTextView	dm	void	NSNotification *
textViewDidChangeTypingAttributes:	AK	Cl	NSObject;NSTextView	dm	void	NSNotification *
textView:willDisplayToolTip:forCharacterAtIndex:	AK	Cl	NSObject;NSTextView	dm	NSString *	NSTextView *	NSString *	unsigned
textView:completions:forPartialWordRange:indexOfSelectedItem:	AK	Cl	NSObject;NSTextView	dm	NSArray *	NSTextView *	NSArray *	NSRange	int *
textView:shouldChangeTextInRange:replacementString:	AK	Cl	NSObject;NSTextView	dm	BOOL	NSTextView *	NSRange	NSString *
textView:doCommandBySelector:	AK	Cl	NSObject;NSTextView	dm	BOOL	NSTextView *	SEL
textView:clickedOnLink:	AK	Cl	NSObject;NSTextView	dm	BOOL	NSTextView *	id
textView:clickedOnCell:inRect:	AK	Cl	NSObject;NSTextView	dm	void	NSTextView *	id <NSTextAttachmentCell>	NSRect
textView:doubleClickedOnCell:inRect:	AK	Cl	NSObject;NSTextView	dm	void	NSTextView *	id <NSTextAttachmentCell>	NSRect
textView:draggedCell:inRect:event:	AK	Cl	NSObject;NSTextView	dm	void	NSTextView *	id <NSTextAttachmentCell>	NSRect	NSEvent *
undoManagerForTextView:	AK	Cl	NSObject;NSTextView	dm	NSUndoManager *	NSTextView *
setTokenStyle:	AK	Cl	NSTokenField	im	void	NSTokenStyle
tokenStyle	AK	Cl	NSTokenField	im	NSTokenStyle
setCompletionDelay:	AK	Cl	NSTokenField	im	void	NSTimeInterval
completionDelay	AK	Cl	NSTokenField	im	NSTimeInterval
defaultCompletionDelay	AK	Cl	NSTokenField	cm	NSTimeInterval
setTokenizingCharacterSet:	AK	Cl	NSTokenField	im	void	NSCharacterSet *
tokenizingCharacterSet	AK	Cl	NSTokenField	im	NSCharacterSet *
defaultTokenizingCharacterSet	AK	Cl	NSTokenField	cm	NSCharacterSet *
tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:	AK	Cl	NSObject;NSTokenField	dm	NSArray *	NSTokenField *	NSString *	int	int *
tokenField:shouldAddObjects:atIndex:	AK	Cl	NSObject;NSTokenField	dm	NSArray *	NSTokenField *	NSArray *	unsigned
tokenField:displayStringForRepresentedObject:	AK	Cl	NSObject;NSTokenField	dm	NSString *	NSTokenField *	id
tokenField:editingStringForRepresentedObject:	AK	Cl	NSObject;NSTokenField	dm	NSString *	NSTokenField *	id
tokenField:representedObjectForEditingString:	AK	Cl	NSObject;NSTokenField	dm	id	NSTokenField *	NSString *
tokenField:writeRepresentedObjects:toPasteboard:	AK	Cl	NSObject;NSTokenField	dm	BOOL	NSTokenField *	NSArray *	NSPasteboard *
tokenField:readFromPasteboard:	AK	Cl	NSObject;NSTokenField	dm	NSArray *	NSTokenField *	NSPasteboard *
tokenField:menuForRepresentedObject:	AK	Cl	NSObject;NSTokenField	dm	NSMenu *	NSTokenField *	id
tokenField:hasMenuForRepresentedObject:	AK	Cl	NSObject;NSTokenField	dm	BOOL	NSTokenField *	id
tokenField:styleForRepresentedObject:	AK	Cl	NSObject;NSTokenField	dm	NSTokenStyle	NSTokenField *	id
setTokenStyle:	AK	Cl	NSTokenFieldCell	im	void	NSTokenStyle
tokenStyle	AK	Cl	NSTokenFieldCell	im	NSTokenStyle
setCompletionDelay:	AK	Cl	NSTokenFieldCell	im	void	NSTimeInterval
completionDelay	AK	Cl	NSTokenFieldCell	im	NSTimeInterval
defaultCompletionDelay	AK	Cl	NSTokenFieldCell	cm	NSTimeInterval
setTokenizingCharacterSet:	AK	Cl	NSTokenFieldCell	im	void	NSCharacterSet *
tokenizingCharacterSet	AK	Cl	NSTokenFieldCell	im	NSCharacterSet *
defaultTokenizingCharacterSet	AK	Cl	NSTokenFieldCell	cm	NSCharacterSet *
setDelegate:	AK	Cl	NSTokenFieldCell	im	void	id
delegate	AK	Cl	NSTokenFieldCell	im	id
tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSArray *	NSTokenFieldCell *	NSString *	int	int *
tokenFieldCell:shouldAddObjects:atIndex:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSArray *	NSTokenFieldCell *	NSArray *	unsigned
tokenFieldCell:displayStringForRepresentedObject:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSString *	NSTokenFieldCell *	id
tokenFieldCell:editingStringForRepresentedObject:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSString *	NSTokenFieldCell *	id
tokenFieldCell:representedObjectForEditingString:	AK	Cl	NSObject;NSTokenFieldCell	dm	id	NSTokenFieldCell *	NSString *
tokenFieldCell:writeRepresentedObjects:toPasteboard:	AK	Cl	NSObject;NSTokenFieldCell	dm	BOOL	NSTokenFieldCell *	NSArray *	NSPasteboard *
tokenFieldCell:readFromPasteboard:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSArray *	NSTokenFieldCell *	NSPasteboard *
tokenFieldCell:menuForRepresentedObject:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSMenu *	NSTokenFieldCell *	id
tokenFieldCell:hasMenuForRepresentedObject:	AK	Cl	NSObject;NSTokenFieldCell	dm	BOOL	NSTokenFieldCell *	id
tokenFieldCell:styleForRepresentedObject:	AK	Cl	NSObject;NSTokenFieldCell	dm	NSTokenStyle	NSTokenFieldCell *	id
initWithIdentifier:	AK	Cl	NSToolbar	im	id	NSString *
insertItemWithItemIdentifier:atIndex:	AK	Cl	NSToolbar	im	void	NSString *	int
removeItemAtIndex:	AK	Cl	NSToolbar	im	void	int
setDelegate:	AK	Cl	NSToolbar	im	void	id
delegate	AK	Cl	NSToolbar	im	id
setVisible:	AK	Cl	NSToolbar	im	void	BOOL
isVisible	AK	Cl	NSToolbar	im	BOOL
runCustomizationPalette:	AK	Cl	NSToolbar	im	void	id
customizationPaletteIsRunning	AK	Cl	NSToolbar	im	BOOL
setDisplayMode:	AK	Cl	NSToolbar	im	void	NSToolbarDisplayMode
displayMode	AK	Cl	NSToolbar	im	NSToolbarDisplayMode
setSelectedItemIdentifier:	AK	Cl	NSToolbar	im	void	NSString *
selectedItemIdentifier	AK	Cl	NSToolbar	im	NSString *
setSizeMode:	AK	Cl	NSToolbar	im	void	NSToolbarSizeMode
sizeMode	AK	Cl	NSToolbar	im	NSToolbarSizeMode
setShowsBaselineSeparator:	AK	Cl	NSToolbar	im	void	BOOL
showsBaselineSeparator	AK	Cl	NSToolbar	im	BOOL
setAllowsUserCustomization:	AK	Cl	NSToolbar	im	void	BOOL
allowsUserCustomization	AK	Cl	NSToolbar	im	BOOL
identifier	AK	Cl	NSToolbar	im	NSString *
items	AK	Cl	NSToolbar	im	NSArray *
visibleItems	AK	Cl	NSToolbar	im	NSArray *
setAutosavesConfiguration:	AK	Cl	NSToolbar	im	void	BOOL
autosavesConfiguration	AK	Cl	NSToolbar	im	BOOL
setConfigurationFromDictionary:	AK	Cl	NSToolbar	im	void	NSDictionary *
configurationDictionary	AK	Cl	NSToolbar	im	NSDictionary *
validateVisibleItems	AK	Cl	NSToolbar	im	void
toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:	AK	Cl	NSObject;NSToolbar	dm	NSToolbarItem *	NSToolbar *	NSString *	BOOL
toolbarDefaultItemIdentifiers:	AK	Cl	NSObject;NSToolbar	dm	NSArray *	NSToolbar *
toolbarAllowedItemIdentifiers:	AK	Cl	NSObject;NSToolbar	dm	NSArray *	NSToolbar *
toolbarSelectableItemIdentifiers:	AK	Cl	NSObject;NSToolbar	dm	NSArray *	NSToolbar *
toolbarWillAddItem:	AK	Cl	NSObject;NSToolbar	dm	void	NSNotification *
toolbarDidRemoveItem:	AK	Cl	NSObject;NSToolbar	dm	void	NSNotification *
initWithItemIdentifier:	AK	Cl	NSToolbarItem	im	id	NSString *
itemIdentifier	AK	Cl	NSToolbarItem	im	NSString *
toolbar	AK	Cl	NSToolbarItem	im	NSToolbar *
setLabel:	AK	Cl	NSToolbarItem	im	void	NSString *
label	AK	Cl	NSToolbarItem	im	NSString *
setPaletteLabel:	AK	Cl	NSToolbarItem	im	void	NSString *
paletteLabel	AK	Cl	NSToolbarItem	im	NSString *
setToolTip:	AK	Cl	NSToolbarItem	im	void	NSString *
toolTip	AK	Cl	NSToolbarItem	im	NSString *
setMenuFormRepresentation:	AK	Cl	NSToolbarItem	im	void	NSMenuItem *
menuFormRepresentation	AK	Cl	NSToolbarItem	im	NSMenuItem *
setTag:	AK	Cl	NSToolbarItem	im	void	int
tag	AK	Cl	NSToolbarItem	im	int
setTarget:	AK	Cl	NSToolbarItem	im	void	id
target	AK	Cl	NSToolbarItem	im	id
setAction:	AK	Cl	NSToolbarItem	im	void	SEL
action	AK	Cl	NSToolbarItem	im	SEL
setEnabled:	AK	Cl	NSToolbarItem	im	void	BOOL
isEnabled	AK	Cl	NSToolbarItem	im	BOOL
setImage:	AK	Cl	NSToolbarItem	im	void	NSImage *
image	AK	Cl	NSToolbarItem	im	NSImage *
setView:	AK	Cl	NSToolbarItem	im	void	NSView *
view	AK	Cl	NSToolbarItem	im	NSView *
setMinSize:	AK	Cl	NSToolbarItem	im	void	NSSize
minSize	AK	Cl	NSToolbarItem	im	NSSize
setMaxSize:	AK	Cl	NSToolbarItem	im	void	NSSize
maxSize	AK	Cl	NSToolbarItem	im	NSSize
setVisibilityPriority:	AK	Cl	NSToolbarItem	im	void	int
visibilityPriority	AK	Cl	NSToolbarItem	im	int
validate	AK	Cl	NSToolbarItem	im	void
setAutovalidates:	AK	Cl	NSToolbarItem	im	void	BOOL
autovalidates	AK	Cl	NSToolbarItem	im	BOOL
allowsDuplicatesInToolbar	AK	Cl	NSToolbarItem	im	BOOL
validateToolbarItem:	AK	Cl	NSObject;NSToolbarItem	im	BOOL	NSToolbarItem *
rearrangeObjects	AK	Cl	NSTreeController	im	void
arrangedObjects	AK	Cl	NSTreeController	im	id
setChildrenKeyPath:	AK	Cl	NSTreeController	im	void	NSString *
childrenKeyPath	AK	Cl	NSTreeController	im	NSString *
setCountKeyPath:	AK	Cl	NSTreeController	im	void	NSString *
countKeyPath	AK	Cl	NSTreeController	im	NSString *
setLeafKeyPath:	AK	Cl	NSTreeController	im	void	NSString *
leafKeyPath	AK	Cl	NSTreeController	im	NSString *
setSortDescriptors:	AK	Cl	NSTreeController	im	void	NSArray *
sortDescriptors	AK	Cl	NSTreeController	im	NSArray *
content	AK	Cl	NSTreeController	im	id
setContent:	AK	Cl	NSTreeController	im	void	id
add:	AK	Cl	NSTreeController	im	void	id
remove:	AK	Cl	NSTreeController	im	void	id
addChild:	AK	Cl	NSTreeController	im	void	id
insert:	AK	Cl	NSTreeController	im	void	id
insertChild:	AK	Cl	NSTreeController	im	void	id
canInsert	AK	Cl	NSTreeController	im	BOOL
canInsertChild	AK	Cl	NSTreeController	im	BOOL
canAddChild	AK	Cl	NSTreeController	im	BOOL
insertObject:atArrangedObjectIndexPath:	AK	Cl	NSTreeController	im	void	id	NSIndexPath *
insertObjects:atArrangedObjectIndexPaths:	AK	Cl	NSTreeController	im	void	NSArray *	NSArray *
removeObjectAtArrangedObjectIndexPath:	AK	Cl	NSTreeController	im	void	NSIndexPath *
removeObjectsAtArrangedObjectIndexPaths:	AK	Cl	NSTreeController	im	void	NSArray *
setAvoidsEmptySelection:	AK	Cl	NSTreeController	im	void	BOOL
avoidsEmptySelection	AK	Cl	NSTreeController	im	BOOL
setPreservesSelection:	AK	Cl	NSTreeController	im	void	BOOL
preservesSelection	AK	Cl	NSTreeController	im	BOOL
setSelectsInsertedObjects:	AK	Cl	NSTreeController	im	void	BOOL
selectsInsertedObjects	AK	Cl	NSTreeController	im	BOOL
setAlwaysUsesMultipleValuesMarker:	AK	Cl	NSTreeController	im	void	BOOL
alwaysUsesMultipleValuesMarker	AK	Cl	NSTreeController	im	BOOL
selectedObjects	AK	Cl	NSTreeController	im	NSArray *
setSelectionIndexPaths:	AK	Cl	NSTreeController	im	BOOL	NSArray *
selectionIndexPaths	AK	Cl	NSTreeController	im	NSArray *
setSelectionIndexPath:	AK	Cl	NSTreeController	im	BOOL	NSIndexPath *
selectionIndexPath	AK	Cl	NSTreeController	im	NSIndexPath *
addSelectionIndexPaths:	AK	Cl	NSTreeController	im	BOOL	NSArray *
removeSelectionIndexPaths:	AK	Cl	NSTreeController	im	BOOL	NSArray *
usesFontLeading	AK	Cl	NSTypesetter	im	BOOL
setUsesFontLeading:	AK	Cl	NSTypesetter	im	void	BOOL
typesetterBehavior	AK	Cl	NSTypesetter	im	NSTypesetterBehavior
setTypesetterBehavior:	AK	Cl	NSTypesetter	im	void	NSTypesetterBehavior
hyphenationFactor	AK	Cl	NSTypesetter	im	float
setHyphenationFactor:	AK	Cl	NSTypesetter	im	void	float
lineFragmentPadding	AK	Cl	NSTypesetter	im	float
setLineFragmentPadding:	AK	Cl	NSTypesetter	im	void	float
substituteFontForFont:	AK	Cl	NSTypesetter	im	NSFont *	NSFont *
textTabForGlyphLocation:writingDirection:maxLocation:	AK	Cl	NSTypesetter	im	NSTextTab *	float	NSWritingDirection	float
bidiProcessingEnabled	AK	Cl	NSTypesetter	im	BOOL
setBidiProcessingEnabled:	AK	Cl	NSTypesetter	im	void	BOOL
setAttributedString:	AK	Cl	NSTypesetter	im	void	NSAttributedString *
attributedString	AK	Cl	NSTypesetter	im	NSAttributedString *
setParagraphGlyphRange:separatorGlyphRange:	AK	Cl	NSTypesetter	im	void	NSRange	NSRange
paragraphGlyphRange	AK	Cl	NSTypesetter	im	NSRange
paragraphSeparatorGlyphRange	AK	Cl	NSTypesetter	im	NSRange
paragraphCharacterRange	AK	Cl	NSTypesetter	im	NSRange
paragraphSeparatorCharacterRange	AK	Cl	NSTypesetter	im	NSRange
layoutParagraphAtPoint:	AK	Cl	NSTypesetter	im	unsigned int	NSPointPointer
beginParagraph	AK	Cl	NSTypesetter	im	void
endParagraph	AK	Cl	NSTypesetter	im	void
beginLineWithGlyphAtIndex:	AK	Cl	NSTypesetter	im	void	unsigned
endLineWithGlyphRange:	AK	Cl	NSTypesetter	im	void	NSRange
lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:	AK	Cl	NSTypesetter	im	float	unsigned	NSRect
paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:	AK	Cl	NSTypesetter	im	float	unsigned	NSRect
paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:	AK	Cl	NSTypesetter	im	float	unsigned	NSRect
getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:	AK	Cl	NSTypesetter	im	void	NSRectPointer	NSRectPointer	NSRange	NSPoint
attributesForExtraLineFragment	AK	Cl	NSTypesetter	im	NSDictionary *
actionForControlCharacterAtIndex:	AK	Cl	NSTypesetter	im	NSTypesetterControlCharacterAction	unsigned
layoutManager	AK	Cl	NSTypesetter	im	NSLayoutManager *
textContainers	AK	Cl	NSTypesetter	im	NSArray *
currentTextContainer	AK	Cl	NSTypesetter	im	NSTextContainer *
currentParagraphStyle	AK	Cl	NSTypesetter	im	NSParagraphStyle *
setHardInvalidation:forGlyphRange:	AK	Cl	NSTypesetter	im	void	BOOL	NSRange
layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:	AK	Cl	NSTypesetter	im	void	NSLayoutManager *	unsigned	unsigned	unsigned *
printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:	AK	Cl	NSTypesetter	cm	NSSize	NSLayoutManager *	NSRange	const unsigned char *	unsigned
baselineOffsetInLayoutManager:glyphIndex:	AK	Cl	NSTypesetter	im	float	NSLayoutManager *	unsigned
sharedSystemTypesetter	AK	Cl	NSTypesetter	cm	id
sharedSystemTypesetterForBehavior:	AK	Cl	NSTypesetter	cm	id	NSTypesetterBehavior
defaultTypesetterBehavior	AK	Cl	NSTypesetter	cm	NSTypesetterBehavior
willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:	AK	Cl	NSTypesetter	im	void	NSRectPointer	NSRange	NSRectPointer	float *
shouldBreakLineByWordBeforeCharacterAtIndex:	AK	Cl	NSTypesetter	im	BOOL	unsigned
shouldBreakLineByHyphenatingBeforeCharacterAtIndex:	AK	Cl	NSTypesetter	im	BOOL	unsigned
hyphenationFactorForGlyphAtIndex:	AK	Cl	NSTypesetter	im	float	unsigned
hyphenCharacterForGlyphAtIndex:	AK	Cl	NSTypesetter	im	UTF32Char	unsigned
boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:	AK	Cl	NSTypesetter	im	NSRect	unsigned	NSTextContainer *	NSRect	NSPoint	unsigned
characterRangeForGlyphRange:actualGlyphRange:	AK	Cl	NSTypesetter	im	NSRange	NSRange	NSRangePointer
glyphRangeForCharacterRange:actualCharacterRange:	AK	Cl	NSTypesetter	im	NSRange	NSRange	NSRangePointer
getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:	AK	Cl	NSTypesetter	im	unsigned	NSRange	NSGlyph *	unsigned *	NSGlyphInscription *	BOOL *	unsigned char *
getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:	AK	Cl	NSTypesetter	im	void	NSRectPointer	NSRectPointer	NSRectPointer	unsigned	NSRect	float	float	float
setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:	AK	Cl	NSTypesetter	im	void	NSRect	NSRange	NSRect	float
substituteGlyphsInRange:withGlyphs:	AK	Cl	NSTypesetter	im	void	NSRange	NSGlyph *
insertGlyph:atGlyphIndex:characterIndex:	AK	Cl	NSTypesetter	im	void	NSGlyph	unsigned	unsigned
deleteGlyphsInRange:	AK	Cl	NSTypesetter	im	void	NSRange
setNotShownAttribute:forGlyphRange:	AK	Cl	NSTypesetter	im	void	BOOL	NSRange
setDrawsOutsideLineFragment:forGlyphRange:	AK	Cl	NSTypesetter	im	void	BOOL	NSRange
setLocation:withAdvancements:forStartOfGlyphRange:	AK	Cl	NSTypesetter	im	void	NSPoint	const float *	NSRange
setAttachmentSize:forGlyphRange:	AK	Cl	NSTypesetter	im	void	NSSize	NSRange
setBidiLevels:forGlyphRange:	AK	Cl	NSTypesetter	im	void	const uint8_t *	NSRange
sharedUserDefaultsController	AK	Cl	NSUserDefaultsController	cm	id
initWithDefaults:initialValues:	AK	Cl	NSUserDefaultsController	im	id	NSUserDefaults *	NSDictionary *
defaults	AK	Cl	NSUserDefaultsController	im	NSUserDefaults *
setInitialValues:	AK	Cl	NSUserDefaultsController	im	void	NSDictionary *
initialValues	AK	Cl	NSUserDefaultsController	im	NSDictionary *
setAppliesImmediately:	AK	Cl	NSUserDefaultsController	im	void	BOOL
appliesImmediately	AK	Cl	NSUserDefaultsController	im	BOOL
hasUnappliedChanges	AK	Cl	NSUserDefaultsController	im	BOOL
values	AK	Cl	NSUserDefaultsController	im	id
revert:	AK	Cl	NSUserDefaultsController	im	void	id
save:	AK	Cl	NSUserDefaultsController	im	void	id
revertToInitialValues:	AK	Cl	NSUserDefaultsController	im	void	id
action	AK	Pr	NSValidatedUserInterfaceItem;NSUserInterfaceValidation	im	SEL
tag	AK	Pr	NSValidatedUserInterfaceItem;NSUserInterfaceValidation	im	int
validateUserInterfaceItem:	AK	Pr	NSUserInterfaceValidations;NSUserInterfaceValidation	im	BOOL	id <NSValidatedUserInterfaceItem>
initWithFrame:	AK	Cl	NSView	im	id	NSRect
window	AK	Cl	NSView	im	NSWindow *
superview	AK	Cl	NSView	im	NSView *
subviews	AK	Cl	NSView	im	NSArray *
isDescendantOf:	AK	Cl	NSView	im	BOOL	NSView *
ancestorSharedWithView:	AK	Cl	NSView	im	NSView *	NSView *
opaqueAncestor	AK	Cl	NSView	im	NSView *
setHidden:	AK	Cl	NSView	im	void	BOOL
isHidden	AK	Cl	NSView	im	BOOL
isHiddenOrHasHiddenAncestor	AK	Cl	NSView	im	BOOL
getRectsBeingDrawn:count:	AK	Cl	NSView	im	void	const NSRect **	int *
needsToDrawRect:	AK	Cl	NSView	im	BOOL	NSRect
wantsDefaultClipping	AK	Cl	NSView	im	BOOL
addSubview:	AK	Cl	NSView	im	void	NSView *
addSubview:positioned:relativeTo:	AK	Cl	NSView	im	void	NSView *	NSWindowOrderingMode	NSView *
sortSubviewsUsingFunction:context:	AK	Cl	NSView	im	void	int (*)(id, id, void *)	void *
viewWillMoveToWindow:	AK	Cl	NSView	im	void	NSWindow *
viewDidMoveToWindow	AK	Cl	NSView	im	void
viewWillMoveToSuperview:	AK	Cl	NSView	im	void	NSView *
viewDidMoveToSuperview	AK	Cl	NSView	im	void
didAddSubview:	AK	Cl	NSView	im	void	NSView *
willRemoveSubview:	AK	Cl	NSView	im	void	NSView *
removeFromSuperview	AK	Cl	NSView	im	void
replaceSubview:with:	AK	Cl	NSView	im	void	NSView *	NSView *
removeFromSuperviewWithoutNeedingDisplay	AK	Cl	NSView	im	void
setPostsFrameChangedNotifications:	AK	Cl	NSView	im	void	BOOL
postsFrameChangedNotifications	AK	Cl	NSView	im	BOOL
resizeSubviewsWithOldSize:	AK	Cl	NSView	im	void	NSSize
resizeWithOldSuperviewSize:	AK	Cl	NSView	im	void	NSSize
setAutoresizesSubviews:	AK	Cl	NSView	im	void	BOOL
autoresizesSubviews	AK	Cl	NSView	im	BOOL
setAutoresizingMask:	AK	Cl	NSView	im	void	unsigned int
autoresizingMask	AK	Cl	NSView	im	unsigned int
setFrameOrigin:	AK	Cl	NSView	im	void	NSPoint
setFrameSize:	AK	Cl	NSView	im	void	NSSize
setFrame:	AK	Cl	NSView	im	void	NSRect
frame	AK	Cl	NSView	im	NSRect
setFrameRotation:	AK	Cl	NSView	im	void	float
frameRotation	AK	Cl	NSView	im	float
setBoundsOrigin:	AK	Cl	NSView	im	void	NSPoint
setBoundsSize:	AK	Cl	NSView	im	void	NSSize
setBoundsRotation:	AK	Cl	NSView	im	void	float
boundsRotation	AK	Cl	NSView	im	float
translateOriginToPoint:	AK	Cl	NSView	im	void	NSPoint
scaleUnitSquareToSize:	AK	Cl	NSView	im	void	NSSize
rotateByAngle:	AK	Cl	NSView	im	void	float
setBounds:	AK	Cl	NSView	im	void	NSRect
bounds	AK	Cl	NSView	im	NSRect
isFlipped	AK	Cl	NSView	im	BOOL
isRotatedFromBase	AK	Cl	NSView	im	BOOL
isRotatedOrScaledFromBase	AK	Cl	NSView	im	BOOL
isOpaque	AK	Cl	NSView	im	BOOL
convertPoint:fromView:	AK	Cl	NSView	im	NSPoint	NSPoint	NSView *
convertPoint:toView:	AK	Cl	NSView	im	NSPoint	NSPoint	NSView *
convertSize:fromView:	AK	Cl	NSView	im	NSSize	NSSize	NSView *
convertSize:toView:	AK	Cl	NSView	im	NSSize	NSSize	NSView *
convertRect:fromView:	AK	Cl	NSView	im	NSRect	NSRect	NSView *
convertRect:toView:	AK	Cl	NSView	im	NSRect	NSRect	NSView *
centerScanRect:	AK	Cl	NSView	im	NSRect	NSRect
canDraw	AK	Cl	NSView	im	BOOL
setNeedsDisplay:	AK	Cl	NSView	im	void	BOOL
setNeedsDisplayInRect:	AK	Cl	NSView	im	void	NSRect
needsDisplay	AK	Cl	NSView	im	BOOL
lockFocus	AK	Cl	NSView	im	void
unlockFocus	AK	Cl	NSView	im	void
lockFocusIfCanDraw	AK	Cl	NSView	im	BOOL
lockFocusIfCanDrawInContext:	AK	Cl	NSView	im	BOOL	NSGraphicsContext *
focusView	AK	Cl	NSView	cm	NSView *
visibleRect	AK	Cl	NSView	im	NSRect
display	AK	Cl	NSView	im	void
displayIfNeeded	AK	Cl	NSView	im	void
displayIfNeededIgnoringOpacity	AK	Cl	NSView	im	void
displayRect:	AK	Cl	NSView	im	void	NSRect
displayIfNeededInRect:	AK	Cl	NSView	im	void	NSRect
displayRectIgnoringOpacity:	AK	Cl	NSView	im	void	NSRect
displayIfNeededInRectIgnoringOpacity:	AK	Cl	NSView	im	void	NSRect
drawRect:	AK	Cl	NSView	im	void	NSRect
displayRectIgnoringOpacity:inContext:	AK	Cl	NSView	im	void	NSRect	NSGraphicsContext *
bitmapImageRepForCachingDisplayInRect:	AK	Cl	NSView	im	NSBitmapImageRep *	NSRect
cacheDisplayInRect:toBitmapImageRep:	AK	Cl	NSView	im	void	NSRect	NSBitmapImageRep *
gState	AK	Cl	NSView	im	int
allocateGState	AK	Cl	NSView	im	void
releaseGState	AK	Cl	NSView	im	void
setUpGState	AK	Cl	NSView	im	void
renewGState	AK	Cl	NSView	im	void
scrollPoint:	AK	Cl	NSView	im	void	NSPoint
scrollRectToVisible:	AK	Cl	NSView	im	BOOL	NSRect
autoscroll:	AK	Cl	NSView	im	BOOL	NSEvent *
adjustScroll:	AK	Cl	NSView	im	NSRect	NSRect
scrollRect:by:	AK	Cl	NSView	im	void	NSRect	NSSize
hitTest:	AK	Cl	NSView	im	NSView *	NSPoint
mouse:inRect:	AK	Cl	NSView	im	BOOL	NSPoint	NSRect
viewWithTag:	AK	Cl	NSView	im	id	int
tag	AK	Cl	NSView	im	int
performKeyEquivalent:	AK	Cl	NSView	im	BOOL	NSEvent *
acceptsFirstMouse:	AK	Cl	NSView	im	BOOL	NSEvent *
shouldDelayWindowOrderingForEvent:	AK	Cl	NSView	im	BOOL	NSEvent *
needsPanelToBecomeKey	AK	Cl	NSView	im	BOOL
mouseDownCanMoveWindow	AK	Cl	NSView	im	BOOL
addCursorRect:cursor:	AK	Cl	NSView	im	void	NSRect	NSCursor *
removeCursorRect:cursor:	AK	Cl	NSView	im	void	NSRect	NSCursor *
discardCursorRects	AK	Cl	NSView	im	void
resetCursorRects	AK	Cl	NSView	im	void
addTrackingRect:owner:userData:assumeInside:	AK	Cl	NSView	im	NSTrackingRectTag	NSRect	id	void *	BOOL
removeTrackingRect:	AK	Cl	NSView	im	void	NSTrackingRectTag
shouldDrawColor	AK	Cl	NSView	im	BOOL
setPostsBoundsChangedNotifications:	AK	Cl	NSView	im	void	BOOL
postsBoundsChangedNotifications	AK	Cl	NSView	im	BOOL
enclosingScrollView	AK	Cl	NSView	im	NSScrollView *
menuForEvent:	AK	Cl	NSView	im	NSMenu *	NSEvent *
defaultMenu	AK	Cl	NSView	cm	NSMenu *
setToolTip:	AK	Cl	NSView	im	void	NSString *
toolTip	AK	Cl	NSView	im	NSString *
addToolTipRect:owner:userData:	AK	Cl	NSView	im	NSToolTipTag	NSRect	id	void *
removeToolTip:	AK	Cl	NSView	im	void	NSToolTipTag
removeAllToolTips	AK	Cl	NSView	im	void
viewWillStartLiveResize	AK	Cl	NSView	im	void
viewDidEndLiveResize	AK	Cl	NSView	im	void
inLiveResize	AK	Cl	NSView	im	BOOL
preservesContentDuringLiveResize	AK	Cl	NSView	im	BOOL
rectPreservedDuringLiveResize	AK	Cl	NSView	im	NSRect
getRectsExposedDuringLiveResize:count:	AK	Cl	NSView	im	void	NSRect[4]	int *
view:stringForToolTip:point:userData:	AK	Cl	NSObject;NSView	im	NSString *	NSView *	NSToolTipTag	NSPoint	void *
performMnemonic:	AK	Cl	NSView	im	BOOL	NSString *
setNextKeyView:	AK	Cl	NSView	im	void	NSView *
nextKeyView	AK	Cl	NSView	im	NSView *
previousKeyView	AK	Cl	NSView	im	NSView *
nextValidKeyView	AK	Cl	NSView	im	NSView *
previousValidKeyView	AK	Cl	NSView	im	NSView *
canBecomeKeyView	AK	Cl	NSView	im	BOOL
setKeyboardFocusRingNeedsDisplayInRect:	AK	Cl	NSView	im	void	NSRect
setFocusRingType:	AK	Cl	NSView	im	void	NSFocusRingType
focusRingType	AK	Cl	NSView	im	NSFocusRingType
defaultFocusRingType	AK	Cl	NSView	cm	NSFocusRingType
writeEPSInsideRect:toPasteboard:	AK	Cl	NSView	im	void	NSRect	NSPasteboard *
dataWithEPSInsideRect:	AK	Cl	NSView	im	NSData *	NSRect
writePDFInsideRect:toPasteboard:	AK	Cl	NSView	im	void	NSRect	NSPasteboard *
dataWithPDFInsideRect:	AK	Cl	NSView	im	NSData *	NSRect
print:	AK	Cl	NSView	im	void	id
knowsPageRange:	AK	Cl	NSView	im	BOOL	NSRangePointer
heightAdjustLimit	AK	Cl	NSView	im	float
widthAdjustLimit	AK	Cl	NSView	im	float
adjustPageWidthNew:left:right:limit:	AK	Cl	NSView	im	void	float *	float	float	float
adjustPageHeightNew:top:bottom:limit:	AK	Cl	NSView	im	void	float *	float	float	float
rectForPage:	AK	Cl	NSView	im	NSRect	int
locationOfPrintRect:	AK	Cl	NSView	im	NSPoint	NSRect
drawPageBorderWithSize:	AK	Cl	NSView	im	void	NSSize
pageHeader	AK	Cl	NSView	im	NSAttributedString *
pageFooter	AK	Cl	NSView	im	NSAttributedString *
drawSheetBorderWithSize:	AK	Cl	NSView	im	void	NSSize
printJobTitle	AK	Cl	NSView	im	NSString *
beginDocument	AK	Cl	NSView	im	void
endDocument	AK	Cl	NSView	im	void
beginPageInRect:atPlacement:	AK	Cl	NSView	im	void	NSRect	NSPoint
endPage	AK	Cl	NSView	im	void
dragImage:at:offset:event:pasteboard:source:slideBack:	AK	Cl	NSView	im	void	NSImage *	NSPoint	NSSize	NSEvent *	NSPasteboard *	id	BOOL
registeredDraggedTypes	AK	Cl	NSView	im	NSArray *
registerForDraggedTypes:	AK	Cl	NSView	im	void	NSArray *
unregisterDraggedTypes	AK	Cl	NSView	im	void
dragFile:fromRect:slideBack:event:	AK	Cl	NSView	im	BOOL	NSString *	NSRect	BOOL	NSEvent *
dragPromisedFilesOfTypes:fromRect:source:slideBack:event:	AK	Cl	NSView	im	BOOL	NSArray *	NSRect	id	BOOL	NSEvent *
frameRectForContentRect:styleMask:	AK	Cl	NSWindow	cm	NSRect	NSRect	unsigned int
contentRectForFrameRect:styleMask:	AK	Cl	NSWindow	cm	NSRect	NSRect	unsigned int
minFrameWidthWithTitle:styleMask:	AK	Cl	NSWindow	cm	float	NSString *	unsigned int
defaultDepthLimit	AK	Cl	NSWindow	cm	NSWindowDepth
frameRectForContentRect:	AK	Cl	NSWindow	im	NSRect	NSRect
contentRectForFrameRect:	AK	Cl	NSWindow	im	NSRect	NSRect
initWithContentRect:styleMask:backing:defer:	AK	Cl	NSWindow	im	id	NSRect	unsigned int	NSBackingStoreType	BOOL
initWithContentRect:styleMask:backing:defer:screen:	AK	Cl	NSWindow	im	id	NSRect	unsigned int	NSBackingStoreType	BOOL	NSScreen *
title	AK	Cl	NSWindow	im	NSString *
setTitle:	AK	Cl	NSWindow	im	void	NSString *
representedFilename	AK	Cl	NSWindow	im	NSString *
setRepresentedFilename:	AK	Cl	NSWindow	im	void	NSString *
setTitleWithRepresentedFilename:	AK	Cl	NSWindow	im	void	NSString *
setExcludedFromWindowsMenu:	AK	Cl	NSWindow	im	void	BOOL
isExcludedFromWindowsMenu	AK	Cl	NSWindow	im	BOOL
setContentView:	AK	Cl	NSWindow	im	void	NSView *
contentView	AK	Cl	NSWindow	im	id
setDelegate:	AK	Cl	NSWindow	im	void	id
delegate	AK	Cl	NSWindow	im	id
windowNumber	AK	Cl	NSWindow	im	int
styleMask	AK	Cl	NSWindow	im	unsigned int
fieldEditor:forObject:	AK	Cl	NSWindow	im	NSText *	BOOL	id
endEditingFor:	AK	Cl	NSWindow	im	void	id
constrainFrameRect:toScreen:	AK	Cl	NSWindow	im	NSRect	NSRect	NSScreen *
setFrame:display:	AK	Cl	NSWindow	im	void	NSRect	BOOL
setContentSize:	AK	Cl	NSWindow	im	void	NSSize
setFrameOrigin:	AK	Cl	NSWindow	im	void	NSPoint
setFrameTopLeftPoint:	AK	Cl	NSWindow	im	void	NSPoint
cascadeTopLeftFromPoint:	AK	Cl	NSWindow	im	NSPoint	NSPoint
frame	AK	Cl	NSWindow	im	NSRect
animationResizeTime:	AK	Cl	NSWindow	im	NSTimeInterval	NSRect
setFrame:display:animate:	AK	Cl	NSWindow	im	void	NSRect	BOOL	BOOL
setShowsResizeIndicator:	AK	Cl	NSWindow	im	void	BOOL
showsResizeIndicator	AK	Cl	NSWindow	im	BOOL
setResizeIncrements:	AK	Cl	NSWindow	im	void	NSSize
resizeIncrements	AK	Cl	NSWindow	im	NSSize
setAspectRatio:	AK	Cl	NSWindow	im	void	NSSize
aspectRatio	AK	Cl	NSWindow	im	NSSize
setContentResizeIncrements:	AK	Cl	NSWindow	im	void	NSSize
contentResizeIncrements	AK	Cl	NSWindow	im	NSSize
setContentAspectRatio:	AK	Cl	NSWindow	im	void	NSSize
contentAspectRatio	AK	Cl	NSWindow	im	NSSize
useOptimizedDrawing:	AK	Cl	NSWindow	im	void	BOOL
disableFlushWindow	AK	Cl	NSWindow	im	void
enableFlushWindow	AK	Cl	NSWindow	im	void
isFlushWindowDisabled	AK	Cl	NSWindow	im	BOOL
flushWindow	AK	Cl	NSWindow	im	void
flushWindowIfNeeded	AK	Cl	NSWindow	im	void
setViewsNeedDisplay:	AK	Cl	NSWindow	im	void	BOOL
viewsNeedDisplay	AK	Cl	NSWindow	im	BOOL
displayIfNeeded	AK	Cl	NSWindow	im	void
display	AK	Cl	NSWindow	im	void
setAutodisplay:	AK	Cl	NSWindow	im	void	BOOL
isAutodisplay	AK	Cl	NSWindow	im	BOOL
preservesContentDuringLiveResize	AK	Cl	NSWindow	im	BOOL
setPreservesContentDuringLiveResize:	AK	Cl	NSWindow	im	void	BOOL
update	AK	Cl	NSWindow	im	void
makeFirstResponder:	AK	Cl	NSWindow	im	BOOL	NSResponder *
firstResponder	AK	Cl	NSWindow	im	NSResponder *
resizeFlags	AK	Cl	NSWindow	im	int
keyDown:	AK	Cl	NSWindow	im	void	NSEvent *
close	AK	Cl	NSWindow	im	void
setReleasedWhenClosed:	AK	Cl	NSWindow	im	void	BOOL
isReleasedWhenClosed	AK	Cl	NSWindow	im	BOOL
miniaturize:	AK	Cl	NSWindow	im	void	id
deminiaturize:	AK	Cl	NSWindow	im	void	id
isZoomed	AK	Cl	NSWindow	im	BOOL
zoom:	AK	Cl	NSWindow	im	void	id
isMiniaturized	AK	Cl	NSWindow	im	BOOL
tryToPerform:with:	AK	Cl	NSWindow	im	BOOL	SEL	id
validRequestorForSendType:returnType:	AK	Cl	NSWindow	im	id	NSString *	NSString *
setBackgroundColor:	AK	Cl	NSWindow	im	void	NSColor *
backgroundColor	AK	Cl	NSWindow	im	NSColor *
setMovableByWindowBackground:	AK	Cl	NSWindow	im	void	BOOL
isMovableByWindowBackground	AK	Cl	NSWindow	im	BOOL
setHidesOnDeactivate:	AK	Cl	NSWindow	im	void	BOOL
hidesOnDeactivate	AK	Cl	NSWindow	im	BOOL
setCanHide:	AK	Cl	NSWindow	im	void	BOOL
canHide	AK	Cl	NSWindow	im	BOOL
center	AK	Cl	NSWindow	im	void
makeKeyAndOrderFront:	AK	Cl	NSWindow	im	void	id
orderFront:	AK	Cl	NSWindow	im	void	id
orderBack:	AK	Cl	NSWindow	im	void	id
orderOut:	AK	Cl	NSWindow	im	void	id
orderWindow:relativeTo:	AK	Cl	NSWindow	im	void	NSWindowOrderingMode	int
orderFrontRegardless	AK	Cl	NSWindow	im	void
setMiniwindowImage:	AK	Cl	NSWindow	im	void	NSImage *
setMiniwindowTitle:	AK	Cl	NSWindow	im	void	NSString *
miniwindowImage	AK	Cl	NSWindow	im	NSImage *
miniwindowTitle	AK	Cl	NSWindow	im	NSString *
setDocumentEdited:	AK	Cl	NSWindow	im	void	BOOL
isDocumentEdited	AK	Cl	NSWindow	im	BOOL
isVisible	AK	Cl	NSWindow	im	BOOL
isKeyWindow	AK	Cl	NSWindow	im	BOOL
isMainWindow	AK	Cl	NSWindow	im	BOOL
canBecomeKeyWindow	AK	Cl	NSWindow	im	BOOL
canBecomeMainWindow	AK	Cl	NSWindow	im	BOOL
makeKeyWindow	AK	Cl	NSWindow	im	void
makeMainWindow	AK	Cl	NSWindow	im	void
becomeKeyWindow	AK	Cl	NSWindow	im	void
resignKeyWindow	AK	Cl	NSWindow	im	void
becomeMainWindow	AK	Cl	NSWindow	im	void
resignMainWindow	AK	Cl	NSWindow	im	void
worksWhenModal	AK	Cl	NSWindow	im	BOOL
convertBaseToScreen:	AK	Cl	NSWindow	im	NSPoint	NSPoint
convertScreenToBase:	AK	Cl	NSWindow	im	NSPoint	NSPoint
performClose:	AK	Cl	NSWindow	im	void	id
performMiniaturize:	AK	Cl	NSWindow	im	void	id
performZoom:	AK	Cl	NSWindow	im	void	id
gState	AK	Cl	NSWindow	im	int
setOneShot:	AK	Cl	NSWindow	im	void	BOOL
isOneShot	AK	Cl	NSWindow	im	BOOL
dataWithEPSInsideRect:	AK	Cl	NSWindow	im	NSData *	NSRect
dataWithPDFInsideRect:	AK	Cl	NSWindow	im	NSData *	NSRect
print:	AK	Cl	NSWindow	im	void	id
disableCursorRects	AK	Cl	NSWindow	im	void
enableCursorRects	AK	Cl	NSWindow	im	void
discardCursorRects	AK	Cl	NSWindow	im	void
areCursorRectsEnabled	AK	Cl	NSWindow	im	BOOL
invalidateCursorRectsForView:	AK	Cl	NSWindow	im	void	NSView *
resetCursorRects	AK	Cl	NSWindow	im	void
setAllowsToolTipsWhenApplicationIsInactive:	AK	Cl	NSWindow	im	void	BOOL
allowsToolTipsWhenApplicationIsInactive	AK	Cl	NSWindow	im	BOOL
setBackingType:	AK	Cl	NSWindow	im	void	NSBackingStoreType
backingType	AK	Cl	NSWindow	im	NSBackingStoreType
setLevel:	AK	Cl	NSWindow	im	void	int
level	AK	Cl	NSWindow	im	int
setDepthLimit:	AK	Cl	NSWindow	im	void	NSWindowDepth
depthLimit	AK	Cl	NSWindow	im	NSWindowDepth
setDynamicDepthLimit:	AK	Cl	NSWindow	im	void	BOOL
hasDynamicDepthLimit	AK	Cl	NSWindow	im	BOOL
screen	AK	Cl	NSWindow	im	NSScreen *
deepestScreen	AK	Cl	NSWindow	im	NSScreen *
canStoreColor	AK	Cl	NSWindow	im	BOOL
setHasShadow:	AK	Cl	NSWindow	im	void	BOOL
hasShadow	AK	Cl	NSWindow	im	BOOL
invalidateShadow	AK	Cl	NSWindow	im	void
setAlphaValue:	AK	Cl	NSWindow	im	void	float
alphaValue	AK	Cl	NSWindow	im	float
setOpaque:	AK	Cl	NSWindow	im	void	BOOL
isOpaque	AK	Cl	NSWindow	im	BOOL
displaysWhenScreenProfileChanges	AK	Cl	NSWindow	im	BOOL
setDisplaysWhenScreenProfileChanges:	AK	Cl	NSWindow	im	void	BOOL
disableScreenUpdatesUntilFlush	AK	Cl	NSWindow	im	void
stringWithSavedFrame	AK	Cl	NSWindow	im	NSString *
setFrameFromString:	AK	Cl	NSWindow	im	void	NSString *
saveFrameUsingName:	AK	Cl	NSWindow	im	void	NSString *
setFrameUsingName:force:	AK	Cl	NSWindow	im	BOOL	NSString *	BOOL
setFrameUsingName:	AK	Cl	NSWindow	im	BOOL	NSString *
setFrameAutosaveName:	AK	Cl	NSWindow	im	BOOL	NSString *
frameAutosaveName	AK	Cl	NSWindow	im	NSString *
removeFrameUsingName:	AK	Cl	NSWindow	cm	void	NSString *
cacheImageInRect:	AK	Cl	NSWindow	im	void	NSRect
restoreCachedImage	AK	Cl	NSWindow	im	void
discardCachedImage	AK	Cl	NSWindow	im	void
minSize	AK	Cl	NSWindow	im	NSSize
maxSize	AK	Cl	NSWindow	im	NSSize
setMinSize:	AK	Cl	NSWindow	im	void	NSSize
setMaxSize:	AK	Cl	NSWindow	im	void	NSSize
contentMinSize	AK	Cl	NSWindow	im	NSSize
contentMaxSize	AK	Cl	NSWindow	im	NSSize
setContentMinSize:	AK	Cl	NSWindow	im	void	NSSize
setContentMaxSize:	AK	Cl	NSWindow	im	void	NSSize
nextEventMatchingMask:	AK	Cl	NSWindow	im	NSEvent *	unsigned int
nextEventMatchingMask:untilDate:inMode:dequeue:	AK	Cl	NSWindow	im	NSEvent *	unsigned int	NSDate *	NSString *	BOOL
discardEventsMatchingMask:beforeEvent:	AK	Cl	NSWindow	im	void	unsigned int	NSEvent *
postEvent:atStart:	AK	Cl	NSWindow	im	void	NSEvent *	BOOL
currentEvent	AK	Cl	NSWindow	im	NSEvent *
setAcceptsMouseMovedEvents:	AK	Cl	NSWindow	im	void	BOOL
acceptsMouseMovedEvents	AK	Cl	NSWindow	im	BOOL
setIgnoresMouseEvents:	AK	Cl	NSWindow	im	void	BOOL
ignoresMouseEvents	AK	Cl	NSWindow	im	BOOL
deviceDescription	AK	Cl	NSWindow	im	NSDictionary *
sendEvent:	AK	Cl	NSWindow	im	void	NSEvent *
mouseLocationOutsideOfEventStream	AK	Cl	NSWindow	im	NSPoint
menuChanged:	AK	Cl	NSWindow	cm	void	NSMenu *
windowController	AK	Cl	NSWindow	im	id
setWindowController:	AK	Cl	NSWindow	im	void	NSWindowController *
isSheet	AK	Cl	NSWindow	im	BOOL
attachedSheet	AK	Cl	NSWindow	im	NSWindow *
standardWindowButton:forStyleMask:	AK	Cl	NSWindow	cm	NSButton *	NSWindowButton	unsigned int
standardWindowButton:	AK	Cl	NSWindow	im	NSButton *	NSWindowButton
addChildWindow:ordered:	AK	Cl	NSWindow	im	void	NSWindow *	NSWindowOrderingMode
removeChildWindow:	AK	Cl	NSWindow	im	void	NSWindow *
childWindows	AK	Cl	NSWindow	im	NSArray *
parentWindow	AK	Cl	NSWindow	im	NSWindow *
setParentWindow:	AK	Cl	NSWindow	im	void	NSWindow *
graphicsContext	AK	Cl	NSWindow	im	NSGraphicsContext *
userSpaceScaleFactor	AK	Cl	NSWindow	im	float
setInitialFirstResponder:	AK	Cl	NSWindow	im	void	NSView *
initialFirstResponder	AK	Cl	NSWindow	im	NSView *
selectNextKeyView:	AK	Cl	NSWindow	im	void	id
selectPreviousKeyView:	AK	Cl	NSWindow	im	void	id
selectKeyViewFollowingView:	AK	Cl	NSWindow	im	void	NSView *
selectKeyViewPrecedingView:	AK	Cl	NSWindow	im	void	NSView *
keyViewSelectionDirection	AK	Cl	NSWindow	im	NSSelectionDirection
setDefaultButtonCell:	AK	Cl	NSWindow	im	void	NSButtonCell *
defaultButtonCell	AK	Cl	NSWindow	im	NSButtonCell *
disableKeyEquivalentForDefaultButtonCell	AK	Cl	NSWindow	im	void
enableKeyEquivalentForDefaultButtonCell	AK	Cl	NSWindow	im	void
setAutorecalculatesKeyViewLoop:	AK	Cl	NSWindow	im	void	BOOL
autorecalculatesKeyViewLoop	AK	Cl	NSWindow	im	BOOL
recalculateKeyViewLoop	AK	Cl	NSWindow	im	void
setToolbar:	AK	Cl	NSWindow	im	void	NSToolbar *
toolbar	AK	Cl	NSWindow	im	NSToolbar *
toggleToolbarShown:	AK	Cl	NSWindow	im	void	id
runToolbarCustomizationPalette:	AK	Cl	NSWindow	im	void	id
setShowsToolbarButton:	AK	Cl	NSWindow	im	void	BOOL
showsToolbarButton	AK	Cl	NSWindow	im	BOOL
dragImage:at:offset:event:pasteboard:source:slideBack:	AK	Cl	NSWindow	im	void	NSImage *	NSPoint	NSSize	NSEvent *	NSPasteboard *	id	BOOL
registerForDraggedTypes:	AK	Cl	NSWindow	im	void	NSArray *
unregisterDraggedTypes	AK	Cl	NSWindow	im	void
windowHandle	AK	Cl	NSWindow	im	void * /*HWND */
initWithWindowRef:	AK	Cl	NSWindow	im	NSWindow *	void * /* WindowRef */
windowRef	AK	Cl	NSWindow	im	void * /* WindowRef */
windowDidResize:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidExpose:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowWillMove:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidMove:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidBecomeKey:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidResignKey:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidBecomeMain:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidResignMain:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowWillClose:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowWillMiniaturize:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidMiniaturize:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidDeminiaturize:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidUpdate:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidChangeScreen:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidChangeScreenProfile:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowWillBeginSheet:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowDidEndSheet:	AK	Cl	NSObject;NSWindow	im	void	NSNotification *
windowShouldClose:	AK	Cl	NSObject;NSWindow	dm	BOOL	id
windowWillReturnFieldEditor:toObject:	AK	Cl	NSObject;NSWindow	dm	id	NSWindow *	id
windowWillResize:toSize:	AK	Cl	NSObject;NSWindow	dm	NSSize	NSWindow *	NSSize
windowWillUseStandardFrame:defaultFrame:	AK	Cl	NSObject;NSWindow	dm	NSRect	NSWindow *	NSRect
windowShouldZoom:toFrame:	AK	Cl	NSObject;NSWindow	dm	BOOL	NSWindow *	NSRect
windowWillReturnUndoManager:	AK	Cl	NSObject;NSWindow	dm	NSUndoManager *	NSWindow *
window:willPositionSheet:usingRect:	AK	Cl	NSObject;NSWindow	dm	NSRect	NSWindow *	NSWindow *	NSRect
initWithWindow:	AK	Cl	NSWindowController	im	id	NSWindow *
initWithWindowNibName:	AK	Cl	NSWindowController	im	id	NSString *
initWithWindowNibName:owner:	AK	Cl	NSWindowController	im	id	NSString *	id
initWithWindowNibPath:owner:	AK	Cl	NSWindowController	im	id	NSString *	id
windowNibName	AK	Cl	NSWindowController	im	NSString *
windowNibPath	AK	Cl	NSWindowController	im	NSString *
owner	AK	Cl	NSWindowController	im	id
setWindowFrameAutosaveName:	AK	Cl	NSWindowController	im	void	NSString *
windowFrameAutosaveName	AK	Cl	NSWindowController	im	NSString *
setShouldCascadeWindows:	AK	Cl	NSWindowController	im	void	BOOL
shouldCascadeWindows	AK	Cl	NSWindowController	im	BOOL
document	AK	Cl	NSWindowController	im	id
setDocument:	AK	Cl	NSWindowController	im	void	NSDocument *
setDocumentEdited:	AK	Cl	NSWindowController	im	void	BOOL
setShouldCloseDocument:	AK	Cl	NSWindowController	im	void	BOOL
shouldCloseDocument	AK	Cl	NSWindowController	im	BOOL
setWindow:	AK	Cl	NSWindowController	im	void	NSWindow *
window	AK	Cl	NSWindowController	im	NSWindow *
synchronizeWindowTitleWithDocumentName	AK	Cl	NSWindowController	im	void
windowTitleForDocumentDisplayName:	AK	Cl	NSWindowController	im	NSString *	NSString *
close	AK	Cl	NSWindowController	im	void
showWindow:	AK	Cl	NSWindowController	im	IBAction	id
isWindowLoaded	AK	Cl	NSWindowController	im	BOOL
windowDidLoad	AK	Cl	NSWindowController	im	void
windowWillLoad	AK	Cl	NSWindowController	im	void
loadWindow	AK	Cl	NSWindowController	im	void
hasCloseBox	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
hasTitleBar	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
isFloatingPanel	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
isMiniaturizable	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
isModalPanel	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
isResizable	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
isZoomable	AK	Cl	NSWindow;NSWindowScripting	im	BOOL
orderedIndex	AK	Cl	NSWindow;NSWindowScripting	im	int
setIsMiniaturized:	AK	Cl	NSWindow;NSWindowScripting	im	void	BOOL
setIsVisible:	AK	Cl	NSWindow;NSWindowScripting	im	void	BOOL
setIsZoomed:	AK	Cl	NSWindow;NSWindowScripting	im	void	BOOL
setOrderedIndex:	AK	Cl	NSWindow;NSWindowScripting	im	void	int
handleCloseScriptCommand:	AK	Cl	NSWindow;NSWindowScripting	im	id	NSCloseCommand *
handlePrintScriptCommand:	AK	Cl	NSWindow;NSWindowScripting	im	id	NSScriptCommand *
handleSaveScriptCommand:	AK	Cl	NSWindow;NSWindowScripting	im	id	NSScriptCommand *
sharedWorkspace	AK	Cl	NSWorkspace	cm	NSWorkspace *
notificationCenter	AK	Cl	NSWorkspace	im	NSNotificationCenter *
openFile:	AK	Cl	NSWorkspace	im	BOOL	NSString *
openFile:withApplication:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSString *
openFile:withApplication:andDeactivate:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSString *	BOOL
openTempFile:	AK	Cl	NSWorkspace	im	BOOL	NSString *
openFile:fromImage:at:inView:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSImage *	NSPoint	NSView *
openURL:	AK	Cl	NSWorkspace	im	BOOL	NSURL *
launchApplication:	AK	Cl	NSWorkspace	im	BOOL	NSString *
launchApplication:showIcon:autolaunch:	AK	Cl	NSWorkspace	im	BOOL	NSString *	BOOL	BOOL
fullPathForApplication:	AK	Cl	NSWorkspace	im	NSString *	NSString *
selectFile:inFileViewerRootedAtPath:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSString *
findApplications	AK	Cl	NSWorkspace	im	void
noteFileSystemChanged	AK	Cl	NSWorkspace	im	void
noteFileSystemChanged:	AK	Cl	NSWorkspace	im	void	NSString *
fileSystemChanged	AK	Cl	NSWorkspace	im	BOOL
noteUserDefaultsChanged	AK	Cl	NSWorkspace	im	void
userDefaultsChanged	AK	Cl	NSWorkspace	im	BOOL
getInfoForFile:application:type:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSString **	NSString **
isFilePackageAtPath:	AK	Cl	NSWorkspace	im	BOOL	NSString *
iconForFile:	AK	Cl	NSWorkspace	im	NSImage *	NSString *
iconForFiles:	AK	Cl	NSWorkspace	im	NSImage *	NSArray *
iconForFileType:	AK	Cl	NSWorkspace	im	NSImage *	NSString *
setIcon:forFile:options:	AK	Cl	NSWorkspace	im	BOOL	NSImage *	NSString *	unsigned
getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:	AK	Cl	NSWorkspace	im	BOOL	NSString *	BOOL *	BOOL *	BOOL *	NSString **	NSString **
performFileOperation:source:destination:files:tag:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSString *	NSString *	NSArray *	int *
unmountAndEjectDeviceAtPath:	AK	Cl	NSWorkspace	im	BOOL	NSString *
extendPowerOffBy:	AK	Cl	NSWorkspace	im	int	int
slideImage:from:to:	AK	Cl	NSWorkspace	im	void	NSImage *	NSPoint	NSPoint
hideOtherApplications	AK	Cl	NSWorkspace	im	void
mountedLocalVolumePaths	AK	Cl	NSWorkspace	im	NSArray *
mountedRemovableMedia	AK	Cl	NSWorkspace	im	NSArray *
mountNewRemovableMedia	AK	Cl	NSWorkspace	im	NSArray *
checkForRemovableMedia	AK	Cl	NSWorkspace	im	void
absolutePathForAppBundleWithIdentifier:	AK	Cl	NSWorkspace	im	NSString *	NSString *
launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:	AK	Cl	NSWorkspace	im	BOOL	NSString *	NSWorkspaceLaunchOptions	NSAppleEventDescriptor *	NSNumber **
openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:	AK	Cl	NSWorkspace	im	BOOL	NSArray *	NSString *	NSWorkspaceLaunchOptions	NSAppleEventDescriptor *	NSArray **
launchedApplications	AK	Cl	NSWorkspace	im	NSArray *
activeApplication	AK	Cl	NSWorkspace	im	NSDictionary *
pluginDidLoad:	ASK	Cl	ASKPluginObject	cm	void	NSBundle *
interfaceVersion	AU	Pr	AUCocoaUIBase;AUCocoaUIView	im	unsigned
uiViewForAudioUnit:withSize:	AU	Pr	AUCocoaUIBase;AUCocoaUIView	im	NSView *	AudioUnit	NSSize
initWithDefinition:fromArchive:	Au	Cl	AMAction	im	id	NSDictionary *	BOOL
definition	Au	Cl	AMAction	im	NSMutableDictionary *
runWithInput:fromAction:error:	Au	Cl	AMAction	im	id	id	AMAction *	NSDictionary **
stop	Au	Cl	AMAction	im	void
reset	Au	Cl	AMAction	im	void
writeToDictionary:	Au	Cl	AMAction	im	void	NSMutableDictionary *
opened	Au	Cl	AMAction	im	void
activated	Au	Cl	AMAction	im	void
updateParameters	Au	Cl	AMAction	im	void
parametersUpdated	Au	Cl	AMAction	im	void
script	Au	Cl	AMAppleScriptAction	im	OSAScript *
setScript:	Au	Cl	AMAppleScriptAction	im	void	OSAScript *
initWithDefinition:fromArchive:	Au	Cl	AMBundleAction	im	id	NSDictionary *	BOOL
awakeFromBundle	Au	Cl	AMBundleAction	im	void
hasView	Au	Cl	AMBundleAction	im	BOOL
view	Au	Cl	AMBundleAction	im	NSView *
bundle	Au	Cl	AMBundleAction	im	NSBundle *
parameters	Au	Cl	AMBundleAction	im	NSMutableDictionary *
setParameters:	Au	Cl	AMBundleAction	im	void	NSMutableDictionary *
remapLineEndings	Au	Cl	AMShellScriptAction	im	BOOL
inputFieldSeparator	Au	Cl	AMShellScriptAction	im	NSString *
outputFieldSeparator	Au	Cl	AMShellScriptAction	im	NSString *
initWithBundle:	Ca	Cl	NSObject;PDEPluginInterface	im	BOOL	NSBundle *
PDEPanelsForType:withHostInfo:	Ca	Cl	NSObject;PDEPluginInterface	im	NSArray *	NSString *	id
willShow	Ca	Cl	NSObject;PDEPluginInterface	im	void
shouldHide	Ca	Cl	NSObject;PDEPluginInterface	im	BOOL
saveValuesAndReturnError:	Ca	Cl	NSObject;PDEPluginInterface	im	BOOL	NSError **
restoreValuesAndReturnError:	Ca	Cl	NSObject;PDEPluginInterface	im	BOOL	NSError **
supportedPPDOptionKeys	Ca	Cl	NSObject;PDEPluginInterface	im	NSArray *
PPDOptionKeyValueDidChange:ppdChoice:	Ca	Cl	NSObject;PDEPluginInterface	im	void	NSString *	NSString *
panelView	Ca	Cl	NSObject;PDEPluginInterface	im	NSView *
panelName	Ca	Cl	NSObject;PDEPluginInterface	im	NSString *
panelKind	Ca	Cl	NSObject;PDEPluginInterface	im	NSString *
summaryInfo	Ca	Cl	NSObject;PDEPluginInterface	im	NSDictionary *
printSession	Ca	Cl	NSObject;PDEPluginInterface	im	PMPrintSession
printSettings	Ca	Cl	NSObject;PDEPluginInterface	im	PMPrintSettings
pageFormat	Ca	Cl	NSObject;PDEPluginInterface	im	PMPageFormat
PMPrinter	Ca	Cl	NSObject;PDEPluginInterface	im	PMPrinter
jobTemplate	Ca	Cl	NSObject;PDEPluginInterface	im	PMTemplateRef
printerInfoTicket	Ca	Cl	NSObject;PDEPluginInterface	im	PMTicketRef
ppdFile	Ca	Cl	NSObject;PDEPluginInterface	im	ppd_file_t *
willChangePPDOptionKeyValue:ppdChoice:	Ca	Cl	NSObject;PDEPluginInterface	im	BOOL	NSString *	NSString *
panelViewDidResize	Ca	Cl	NSObject;PDEPluginInterface	im	void
initWithAudioUnit:	CAK	Cl	AUGenericView	im	id	AudioUnit
initWithAudioUnit:displayFlags:	CAK	Cl	AUGenericView	im	id	AudioUnit	UInt32
audioUnit	CAK	Cl	AUGenericView	im	AudioUnit
showsExpertParameters	CAK	Cl	AUGenericView	im	BOOL
setShowsExpertParameters:	CAK	Cl	AUGenericView	im	void	BOOL
attributeType	CD	Cl	NSAttributeDescription	im	NSAttributeType
setAttributeType:	CD	Cl	NSAttributeDescription	im	void	NSAttributeType
attributeValueClassName	CD	Cl	NSAttributeDescription	im	NSString *
defaultValue	CD	Cl	NSAttributeDescription	im	id
setDefaultValue:	CD	Cl	NSAttributeDescription	im	void	id
entityForName:inManagedObjectContext:	CD	Cl	NSEntityDescription	cm	NSEntityDescription *	NSString *	NSManagedObjectContext *
insertNewObjectForEntityForName:inManagedObjectContext:	CD	Cl	NSEntityDescription	cm	id	NSString *	NSManagedObjectContext *
managedObjectModel	CD	Cl	NSEntityDescription	im	NSManagedObjectModel *
managedObjectClassName	CD	Cl	NSEntityDescription	im	NSString *
setManagedObjectClassName:	CD	Cl	NSEntityDescription	im	void	NSString *
name	CD	Cl	NSEntityDescription	im	NSString *
setName:	CD	Cl	NSEntityDescription	im	void	NSString *
isAbstract	CD	Cl	NSEntityDescription	im	BOOL
setAbstract:	CD	Cl	NSEntityDescription	im	void	BOOL
subentitiesByName	CD	Cl	NSEntityDescription	im	NSDictionary *
subentities	CD	Cl	NSEntityDescription	im	NSArray *
setSubentities:	CD	Cl	NSEntityDescription	im	void	NSArray *
superentity	CD	Cl	NSEntityDescription	im	NSEntityDescription *
propertiesByName	CD	Cl	NSEntityDescription	im	NSDictionary *
properties	CD	Cl	NSEntityDescription	im	NSArray *
setProperties:	CD	Cl	NSEntityDescription	im	void	NSArray *
userInfo	CD	Cl	NSEntityDescription	im	NSDictionary *
setUserInfo:	CD	Cl	NSEntityDescription	im	void	NSDictionary *
attributesByName	CD	Cl	NSEntityDescription	im	NSDictionary *
relationshipsByName	CD	Cl	NSEntityDescription	im	NSDictionary *
relationshipsWithDestinationEntity:	CD	Cl	NSEntityDescription	im	NSArray *	NSEntityDescription *
fetchRequest	CD	Cl	NSFetchedPropertyDescription	im	NSFetchRequest *
setFetchRequest:	CD	Cl	NSFetchedPropertyDescription	im	void	NSFetchRequest *
entity	CD	Cl	NSFetchRequest	im	NSEntityDescription *
setEntity:	CD	Cl	NSFetchRequest	im	void	NSEntityDescription *
predicate	CD	Cl	NSFetchRequest	im	NSPredicate *
setPredicate:	CD	Cl	NSFetchRequest	im	void	NSPredicate *
sortDescriptors	CD	Cl	NSFetchRequest	im	NSArray *
setSortDescriptors:	CD	Cl	NSFetchRequest	im	void	NSArray *
fetchLimit	CD	Cl	NSFetchRequest	im	unsigned int
setFetchLimit:	CD	Cl	NSFetchRequest	im	void	unsigned int
affectedStores	CD	Cl	NSFetchRequest	im	NSArray *
setAffectedStores:	CD	Cl	NSFetchRequest	im	void	NSArray *
initWithEntity:insertIntoManagedObjectContext:	CD	Cl	NSManagedObject	im	id	NSEntityDescription *	NSManagedObjectContext *
managedObjectContext	CD	Cl	NSManagedObject	im	NSManagedObjectContext *
entity	CD	Cl	NSManagedObject	im	NSEntityDescription *
objectID	CD	Cl	NSManagedObject	im	NSManagedObjectID *
isInserted	CD	Cl	NSManagedObject	im	BOOL
isUpdated	CD	Cl	NSManagedObject	im	BOOL
isDeleted	CD	Cl	NSManagedObject	im	BOOL
isFault	CD	Cl	NSManagedObject	im	BOOL
willAccessValueForKey:	CD	Cl	NSManagedObject	im	void	NSString *
didAccessValueForKey:	CD	Cl	NSManagedObject	im	void	NSString *
willChangeValueForKey:	CD	Cl	NSManagedObject	im	void	NSString *
didChangeValueForKey:	CD	Cl	NSManagedObject	im	void	NSString *
willChangeValueForKey:withSetMutation:usingObjects:	CD	Cl	NSManagedObject	im	void	NSString *	NSKeyValueSetMutationKind	NSSet *
didChangeValueForKey:withSetMutation:usingObjects:	CD	Cl	NSManagedObject	im	void	NSString *	NSKeyValueSetMutationKind	NSSet *
setObservationInfo:	CD	Cl	NSManagedObject	im	void	void *
observationInfo	CD	Cl	NSManagedObject	im	void *
awakeFromFetch	CD	Cl	NSManagedObject	im	void
awakeFromInsert	CD	Cl	NSManagedObject	im	void
willSave	CD	Cl	NSManagedObject	im	void
didSave	CD	Cl	NSManagedObject	im	void
didTurnIntoFault	CD	Cl	NSManagedObject	im	void
valueForKey:	CD	Cl	NSManagedObject	im	id	NSString *
setValue:forKey:	CD	Cl	NSManagedObject	im	void	id	NSString *
primitiveValueForKey:	CD	Cl	NSManagedObject	im	id	NSString *
setPrimitiveValue:forKey:	CD	Cl	NSManagedObject	im	void	id	NSString *
committedValuesForKeys:	CD	Cl	NSManagedObject	im	NSDictionary *	NSArray *
changedValues	CD	Cl	NSManagedObject	im	NSDictionary *
validateValue:forKey:error:	CD	Cl	NSManagedObject	im	BOOL	id *	NSString *	NSError **
validateForDelete:	CD	Cl	NSManagedObject	im	BOOL	NSError **
validateForInsert:	CD	Cl	NSManagedObject	im	BOOL	NSError **
validateForUpdate:	CD	Cl	NSManagedObject	im	BOOL	NSError **
setPersistentStoreCoordinator:	CD	Cl	NSManagedObjectContext	im	void	NSPersistentStoreCoordinator *
persistentStoreCoordinator	CD	Cl	NSManagedObjectContext	im	NSPersistentStoreCoordinator *
setUndoManager:	CD	Cl	NSManagedObjectContext	im	void	NSUndoManager *
undoManager	CD	Cl	NSManagedObjectContext	im	NSUndoManager *
hasChanges	CD	Cl	NSManagedObjectContext	im	BOOL
objectRegisteredForID:	CD	Cl	NSManagedObjectContext	im	NSManagedObject *	NSManagedObjectID *
objectWithID:	CD	Cl	NSManagedObjectContext	im	NSManagedObject *	NSManagedObjectID *
executeFetchRequest:error:	CD	Cl	NSManagedObjectContext	im	NSArray *	NSFetchRequest *	NSError **
insertObject:	CD	Cl	NSManagedObjectContext	im	void	NSManagedObject *
deleteObject:	CD	Cl	NSManagedObjectContext	im	void	NSManagedObject *
refreshObject:mergeChanges:	CD	Cl	NSManagedObjectContext	im	void	NSManagedObject *	BOOL
detectConflictsForObject:	CD	Cl	NSManagedObjectContext	im	void	NSManagedObject *
observeValueForKeyPath:ofObject:change:context:	CD	Cl	NSManagedObjectContext	im	void	NSString *	id	NSDictionary *	void *
processPendingChanges	CD	Cl	NSManagedObjectContext	im	void
assignObject:toPersistentStore:	CD	Cl	NSManagedObjectContext	im	void	id	id
insertedObjects	CD	Cl	NSManagedObjectContext	im	NSSet *
updatedObjects	CD	Cl	NSManagedObjectContext	im	NSSet *
deletedObjects	CD	Cl	NSManagedObjectContext	im	NSSet *
registeredObjects	CD	Cl	NSManagedObjectContext	im	NSSet *
undo	CD	Cl	NSManagedObjectContext	im	void
redo	CD	Cl	NSManagedObjectContext	im	void
reset	CD	Cl	NSManagedObjectContext	im	void
rollback	CD	Cl	NSManagedObjectContext	im	void
save:	CD	Cl	NSManagedObjectContext	im	BOOL	NSError **
lock	CD	Cl	NSManagedObjectContext	im	void
unlock	CD	Cl	NSManagedObjectContext	im	void
tryLock	CD	Cl	NSManagedObjectContext	im	BOOL
propagatesDeletesAtEndOfEvent	CD	Cl	NSManagedObjectContext	im	BOOL
setPropagatesDeletesAtEndOfEvent:	CD	Cl	NSManagedObjectContext	im	void	BOOL
retainsRegisteredObjects	CD	Cl	NSManagedObjectContext	im	BOOL
setRetainsRegisteredObjects:	CD	Cl	NSManagedObjectContext	im	void	BOOL
stalenessInterval	CD	Cl	NSManagedObjectContext	im	NSTimeInterval
setStalenessInterval:	CD	Cl	NSManagedObjectContext	im	void	NSTimeInterval
setMergePolicy:	CD	Cl	NSManagedObjectContext	im	void	id
mergePolicy	CD	Cl	NSManagedObjectContext	im	id
entity	CD	Cl	NSManagedObjectID	im	NSEntityDescription *
persistentStore	CD	Cl	NSManagedObjectID	im	id
isTemporaryID	CD	Cl	NSManagedObjectID	im	BOOL
URIRepresentation	CD	Cl	NSManagedObjectID	im	NSURL *
mergedModelFromBundles:	CD	Cl	NSManagedObjectModel	cm	NSManagedObjectModel *	NSArray *
modelByMergingModels:	CD	Cl	NSManagedObjectModel	cm	NSManagedObjectModel *	NSArray *
init	CD	Cl	NSManagedObjectModel	im	id
initWithContentsOfURL:	CD	Cl	NSManagedObjectModel	im	id	NSURL *
entitiesByName	CD	Cl	NSManagedObjectModel	im	NSDictionary *
entities	CD	Cl	NSManagedObjectModel	im	NSArray *
setEntities:	CD	Cl	NSManagedObjectModel	im	void	NSArray *
configurations	CD	Cl	NSManagedObjectModel	im	NSArray *
entitiesForConfiguration:	CD	Cl	NSManagedObjectModel	im	NSArray *	NSString *
setEntities:forConfiguration:	CD	Cl	NSManagedObjectModel	im	void	NSArray *	NSString *
setFetchRequestTemplate:forName:	CD	Cl	NSManagedObjectModel	im	void	NSFetchRequest *	NSString *
fetchRequestTemplateForName:	CD	Cl	NSManagedObjectModel	im	NSFetchRequest *	NSString *
fetchRequestFromTemplateWithName:substitutionVariables:	CD	Cl	NSManagedObjectModel	im	NSFetchRequest *	NSString *	NSDictionary *
localizationDictionary	CD	Cl	NSManagedObjectModel	im	NSDictionary *
setLocalizationDictionary:	CD	Cl	NSManagedObjectModel	im	void	NSDictionary *
metadataForPersistentStoreWithURL:error:	CD	Cl	NSPersistentStoreCoordinator	cm	NSDictionary *	NSURL *	NSError **
setMetadata:forPersistentStore:	CD	Cl	NSPersistentStoreCoordinator	im	void	NSDictionary *	id
metadataForPersistentStore:	CD	Cl	NSPersistentStoreCoordinator	im	NSDictionary *	id
initWithManagedObjectModel:	CD	Cl	NSPersistentStoreCoordinator	im	id	NSManagedObjectModel *
managedObjectModel	CD	Cl	NSPersistentStoreCoordinator	im	NSManagedObjectModel *
persistentStores	CD	Cl	NSPersistentStoreCoordinator	im	NSArray *
persistentStoreForURL:	CD	Cl	NSPersistentStoreCoordinator	im	id	NSURL *
URLForPersistentStore:	CD	Cl	NSPersistentStoreCoordinator	im	NSURL *	id
addPersistentStoreWithType:configuration:URL:options:error:	CD	Cl	NSPersistentStoreCoordinator	im	id	NSString *	NSString *	NSURL *	NSDictionary *	NSError **
removePersistentStore:error:	CD	Cl	NSPersistentStoreCoordinator	im	BOOL	id	NSError **
migratePersistentStore:toURL:options:withType:error:	CD	Cl	NSPersistentStoreCoordinator	im	id	id	NSURL *	NSDictionary *	NSString *	NSError **
managedObjectIDForURIRepresentation:	CD	Cl	NSPersistentStoreCoordinator	im	NSManagedObjectID *	NSURL *
lock	CD	Cl	NSPersistentStoreCoordinator	im	void
unlock	CD	Cl	NSPersistentStoreCoordinator	im	void
tryLock	CD	Cl	NSPersistentStoreCoordinator	im	BOOL
entity	CD	Cl	NSPropertyDescription	im	NSEntityDescription *
name	CD	Cl	NSPropertyDescription	im	NSString *
setName:	CD	Cl	NSPropertyDescription	im	void	NSString *
isOptional	CD	Cl	NSPropertyDescription	im	BOOL
setOptional:	CD	Cl	NSPropertyDescription	im	void	BOOL
isTransient	CD	Cl	NSPropertyDescription	im	BOOL
setTransient:	CD	Cl	NSPropertyDescription	im	void	BOOL
validationPredicates	CD	Cl	NSPropertyDescription	im	NSArray *
validationWarnings	CD	Cl	NSPropertyDescription	im	NSArray *
setValidationPredicates:withValidationWarnings:	CD	Cl	NSPropertyDescription	im	void	NSArray *	NSArray *
userInfo	CD	Cl	NSPropertyDescription	im	NSDictionary *
setUserInfo:	CD	Cl	NSPropertyDescription	im	void	NSDictionary *
destinationEntity	CD	Cl	NSRelationshipDescription	im	NSEntityDescription *
setDestinationEntity:	CD	Cl	NSRelationshipDescription	im	void	NSEntityDescription *
inverseRelationship	CD	Cl	NSRelationshipDescription	im	NSRelationshipDescription *
setInverseRelationship:	CD	Cl	NSRelationshipDescription	im	void	NSRelationshipDescription *
maxCount	CD	Cl	NSRelationshipDescription	im	unsigned int
setMaxCount:	CD	Cl	NSRelationshipDescription	im	void	unsigned int
minCount	CD	Cl	NSRelationshipDescription	im	unsigned int
setMinCount:	CD	Cl	NSRelationshipDescription	im	void	unsigned int
deleteRule	CD	Cl	NSRelationshipDescription	im	NSDeleteRule
setDeleteRule:	CD	Cl	NSRelationshipDescription	im	void	NSDeleteRule
isToMany	CD	Cl	NSRelationshipDescription	im	BOOL
layoutForImageFile:	DR	Cl	DRBurn;DRBurn_ContentSupport	cm	id	NSString *
fileWithPath:	DR	Cl	DRFile	cm	DRFile *	NSString *
initWithPath:	DR	Cl	DRFile	im	id	NSString *
virtualFileWithName:data:	DR	Cl	DRFile	cm	DRFile *	NSString *	NSData *
virtualFileWithName:dataProducer:	DR	Cl	DRFile	cm	DRFile *	NSString *	id
initWithName:data:	DR	Cl	DRFile	im	id	NSString *	NSData *
initWithName:dataProducer:	DR	Cl	DRFile	im	id	NSString *	id
hardLinkPointingTo:inFilesystem:	DR	Cl	DRFile	cm	DRFile *	DRFile *	NSString *
symLinkPointingTo:inFilesystem:	DR	Cl	DRFile	cm	DRFile *	DRFSObject *	NSString *
finderAliasPointingTo:inFilesystem:	DR	Cl	DRFile	cm	DRFile *	DRFSObject *	NSString *
initWithLinkType:pointingTo:inFilesystem:	DR	Cl	DRFile	im	id	NSString *	DRFSObject *	NSString *
calculateSizeOfFile:fork:estimating:	DR	Pr	DRFileDataProduction;DRFile	im	uint64_t	DRFile *	DRFileFork	BOOL
prepareFileForBurn:	DR	Pr	DRFileDataProduction;DRFile	im	BOOL	DRFile *
produceFile:fork:intoBuffer:length:atAddress:blockSize:	DR	Pr	DRFileDataProduction;DRFile	im	uint32_t	DRFile *	DRFileFork	char *	uint32_t	uint64_t	uint32_t
prepareFileForVerification:	DR	Pr	DRFileDataProduction;DRFile	im	BOOL	DRFile *
cleanupFileAfterBurn:	DR	Pr	DRFileDataProduction;DRFile	im	void	DRFile *
folderWithPath:	DR	Cl	DRFolder	cm	DRFolder *	NSString *
initWithPath:	DR	Cl	DRFolder	im	id	NSString *
virtualFolderWithName:	DR	Cl	DRFolder	cm	DRFolder *	NSString *
initWithName:	DR	Cl	DRFolder	im	id	NSString *
makeVirtual	DR	Cl	DRFolder	im	void
addChild:	DR	Cl	DRFolder	im	void	DRFSObject *
removeChild:	DR	Cl	DRFolder	im	void	DRFSObject *
count	DR	Cl	DRFolder	im	uint32_t
children	DR	Cl	DRFolder	im	NSArray *
isVirtual	DR	Cl	DRFSObject	im	BOOL
sourcePath	DR	Cl	DRFSObject	im	NSString *
parent	DR	Cl	DRFSObject	im	DRFolder *
baseName	DR	Cl	DRFSObject	im	NSString *
setBaseName:	DR	Cl	DRFSObject	im	void	NSString *
specificNameForFilesystem:	DR	Cl	DRFSObject	im	NSString *	NSString *
specificNames	DR	Cl	DRFSObject	im	NSDictionary *
setSpecificName:forFilesystem:	DR	Cl	DRFSObject	im	void	NSString *	NSString *
setSpecificNames:	DR	Cl	DRFSObject	im	void	NSDictionary *
mangledNameForFilesystem:	DR	Cl	DRFSObject	im	NSString *	NSString *
mangledNames	DR	Cl	DRFSObject	im	NSDictionary *
propertyForKey:inFilesystem:mergeWithOtherFilesystems:	DR	Cl	DRFSObject	im	id	NSString *	NSString *	BOOL
propertiesForFilesystem:mergeWithOtherFilesystems:	DR	Cl	DRFSObject	im	NSDictionary *	NSString *	BOOL
setProperty:forKey:inFilesystem:	DR	Cl	DRFSObject	im	void	id	NSString *	NSString *
setProperties:inFilesystem:	DR	Cl	DRFSObject	im	void	NSDictionary *	NSString *
explicitFilesystemMask	DR	Cl	DRFSObject	im	DRFilesystemInclusionMask
setExplicitFilesystemMask:	DR	Cl	DRFSObject	im	void	DRFilesystemInclusionMask
effectiveFilesystemMask	DR	Cl	DRFSObject	im	DRFilesystemInclusionMask
trackForAudioOfLength:producer:	DR	Cl	DRTrack;DRTrack_ContentSupport	cm	DRTrack *	DRMSF *	id
trackForAudioFile:	DR	Cl	DRTrack;DRTrack_ContentSupport	cm	DRTrack *	NSString *
trackForRootFolder:	DR	Cl	DRTrack;DRTrack_ContentSupport	cm	DRTrack *	DRFolder *
burnForDevice:	DR	Cl	DRBurn	cm	DRBurn *	DRDevice *
initWithDevice:	DR	Cl	DRBurn	im	id	DRDevice *
writeLayout:	DR	Cl	DRBurn	im	void	id
status	DR	Cl	DRBurn	im	NSDictionary *
abort	DR	Cl	DRBurn	im	void
properties	DR	Cl	DRBurn	im	NSDictionary *
setProperties:	DR	Cl	DRBurn	im	void	NSDictionary *
device	DR	Cl	DRBurn	im	DRDevice *
requestedBurnSpeed	DR	Cl	DRBurn	im	float
setRequestedBurnSpeed:	DR	Cl	DRBurn	im	void	float
appendable	DR	Cl	DRBurn	im	BOOL
setAppendable:	DR	Cl	DRBurn	im	void	BOOL
verifyDisc	DR	Cl	DRBurn	im	BOOL
setVerifyDisc:	DR	Cl	DRBurn	im	void	BOOL
completionAction	DR	Cl	DRBurn	im	NSString *
setCompletionAction:	DR	Cl	DRBurn	im	void	NSString *
arrayOfCDTextBlocksFromPacks:	DR	Cl	DRCDTextBlock;DRCDText	cm	NSArray *	NSData *
cdTextBlockWithLanguage:encoding:	DR	Cl	DRCDTextBlock;DRCDText	cm	DRCDTextBlock *	NSString *	NSStringEncoding
initWithLanguage:encoding:	DR	Cl	DRCDTextBlock;DRCDText	im	id	NSString *	NSStringEncoding
properties	DR	Cl	DRCDTextBlock;DRCDText	im	NSDictionary *
setProperties:	DR	Cl	DRCDTextBlock;DRCDText	im	void	NSDictionary *
trackDictionaries	DR	Cl	DRCDTextBlock;DRCDText	im	NSArray *
setTrackDictionaries:	DR	Cl	DRCDTextBlock;DRCDText	im	void	NSArray *
objectForKey:ofTrack:	DR	Cl	DRCDTextBlock;DRCDText	im	id	NSString *	unsigned
setObject:forKey:ofTrack:	DR	Cl	DRCDTextBlock;DRCDText	im	void	id	NSString *	unsigned
flatten	DR	Cl	DRCDTextBlock;DRCDText	im	unsigned
language	DR	Cl	DRCDTextBlock;DRCDText	im	NSString *
encoding	DR	Cl	DRCDTextBlock;DRCDText	im	NSStringEncoding
devices	DR	Cl	DRDevice	cm	NSArray *
deviceForBSDName:	DR	Cl	DRDevice	cm	DRDevice *	NSString *
deviceForIORegistryEntryPath:	DR	Cl	DRDevice	cm	DRDevice *	NSString *
isValid	DR	Cl	DRDevice	im	BOOL
info	DR	Cl	DRDevice	im	NSDictionary *
status	DR	Cl	DRDevice	im	NSDictionary *
openTray	DR	Cl	DRDevice	im	BOOL
closeTray	DR	Cl	DRDevice	im	BOOL
ejectMedia	DR	Cl	DRDevice	im	BOOL
acquireExclusiveAccess	DR	Cl	DRDevice	im	BOOL
releaseExclusiveAccess	DR	Cl	DRDevice	im	void
acquireMediaReservation	DR	Cl	DRDevice	im	void
releaseMediaReservation	DR	Cl	DRDevice	im	void
isEqualToDevice:	DR	Cl	DRDevice	im	BOOL	DRDevice *
writesCD	DR	Cl	DRDevice	im	BOOL
writesDVD	DR	Cl	DRDevice	im	BOOL
displayName	DR	Cl	DRDevice	im	NSString *
ioRegistryEntryPath	DR	Cl	DRDevice	im	NSString *
mediaIsPresent	DR	Cl	DRDevice	im	BOOL
mediaIsTransitioning	DR	Cl	DRDevice	im	BOOL
mediaIsBusy	DR	Cl	DRDevice	im	BOOL
mediaType	DR	Cl	DRDevice	im	NSString *
mediaIsBlank	DR	Cl	DRDevice	im	BOOL
mediaIsAppendable	DR	Cl	DRDevice	im	BOOL
mediaIsOverwritable	DR	Cl	DRDevice	im	BOOL
mediaIsErasable	DR	Cl	DRDevice	im	BOOL
mediaIsReserved	DR	Cl	DRDevice	im	BOOL
mediaSpaceOverwritable	DR	Cl	DRDevice	im	DRMSF *
mediaSpaceUsed	DR	Cl	DRDevice	im	DRMSF *
mediaSpaceFree	DR	Cl	DRDevice	im	DRMSF *
trayIsOpen	DR	Cl	DRDevice	im	BOOL
bsdName	DR	Cl	DRDevice	im	NSString *
eraseForDevice:	DR	Cl	DRErase	cm	DRErase *	DRDevice *
initWithDevice:	DR	Cl	DRErase	im	id	DRDevice *
start	DR	Cl	DRErase	im	void
status	DR	Cl	DRErase	im	NSDictionary *
properties	DR	Cl	DRErase	im	NSDictionary *
setProperties:	DR	Cl	DRErase	im	void	NSDictionary *
device	DR	Cl	DRErase	im	DRDevice *
eraseType	DR	Cl	DRErase	im	NSString *
setEraseType:	DR	Cl	DRErase	im	void	NSString *
msf	DR	Cl	DRMSF	cm	DRMSF *
msfWithFrames:	DR	Cl	DRMSF	cm	DRMSF *	unsigned long
msfWithString:	DR	Cl	DRMSF	cm	DRMSF *	NSString *
initWithFrames:	DR	Cl	DRMSF	im	id	unsigned long
initWithString:	DR	Cl	DRMSF	im	id	NSString *
minutes	DR	Cl	DRMSF	im	unsigned long
seconds	DR	Cl	DRMSF	im	unsigned long
frames	DR	Cl	DRMSF	im	unsigned long
sectors	DR	Cl	DRMSF	im	unsigned long
msfByAdding:	DR	Cl	DRMSF	im	DRMSF *	DRMSF *
msfBySubtracting:	DR	Cl	DRMSF	im	DRMSF *	DRMSF *
description	DR	Cl	DRMSF	im	NSString *
descriptionWithFormat:	DR	Cl	DRMSF	im	NSString *	NSString *
isEqualToMSF:	DR	Cl	DRMSF	im	BOOL	DRMSF *
initWithFormat:	DR	Cl	DRMSFFormatter	im	id	NSString *
format	DR	Cl	DRMSFFormatter	im	NSString *
setFormat:	DR	Cl	DRMSFFormatter	im	void	NSString *
currentRunLoopCenter	DR	Cl	DRNotificationCenter	cm	DRNotificationCenter *
addObserver:selector:name:object:	DR	Cl	DRNotificationCenter	im	void	id	SEL	NSString *	id
removeObserver:name:object:	DR	Cl	DRNotificationCenter	im	void	id	NSString *	id
initWithProducer:	DR	Cl	DRTrack	im	id	id
properties	DR	Cl	DRTrack	im	NSDictionary *
setProperties:	DR	Cl	DRTrack	im	void	NSDictionary *
testProductionSpeedForInterval:	DR	Cl	DRTrack	im	float	NSTimeInterval
testProductionSpeedForLength:	DR	Cl	DRTrack	im	float	uint32_t
estimateLength	DR	Cl	DRTrack	im	uint64_t
length	DR	Cl	DRTrack	im	DRMSF *
preGap	DR	Cl	DRTrack	im	DRMSF *
setPreGap:	DR	Cl	DRTrack	im	void	DRMSF *
estimateLengthOfTrack:	DR	Pr	DRTrackDataProduction;DRTrack	im	uint64_t	DRTrack *
prepareTrack:forBurn:toMedia:	DR	Pr	DRTrackDataProduction;DRTrack	im	BOOL	DRTrack *	DRBurn *	NSDictionary *
cleanupTrackAfterBurn:	DR	Pr	DRTrackDataProduction;DRTrack	im	void	DRTrack *
producePreGapForTrack:intoBuffer:length:atAddress:blockSize:ioFlags:	DR	Pr	DRTrackDataProduction;DRTrack	im	uint32_t	DRTrack *	char *	uint32_t	uint64_t	uint32_t	uint32_t *
produceDataForTrack:intoBuffer:length:atAddress:blockSize:ioFlags:	DR	Pr	DRTrackDataProduction;DRTrack	im	uint32_t	DRTrack *	char *	uint32_t	uint64_t	uint32_t	uint32_t *
prepareTrackForVerification:	DR	Pr	DRTrackDataProduction;DRTrack	im	BOOL	DRTrack *
verifyPreGapForTrack:inBuffer:length:atAddress:blockSize:ioFlags:	DR	Pr	DRTrackDataProduction;DRTrack	im	BOOL	DRTrack *	const char *	uint32_t	uint64_t	uint32_t	uint32_t *
verifyDataForTrack:inBuffer:length:atAddress:blockSize:ioFlags:	DR	Pr	DRTrackDataProduction;DRTrack	im	BOOL	DRTrack *	const char *	uint32_t	uint64_t	uint32_t	uint32_t *
cleanupTrackAfterVerification:	DR	Pr	DRTrackDataProduction;DRTrack	im	BOOL	DRTrack *
devices	DR	Cl	DRDevice	cm	NSArray *
deviceForBSDName:	DR	Cl	DRDevice	cm	DRDevice *	NSString *
deviceForIORegistryEntryPath:	DR	Cl	DRDevice	cm	DRDevice *	NSString *
isValid	DR	Cl	DRDevice	im	BOOL
info	DR	Cl	DRDevice	im	NSDictionary *
status	DR	Cl	DRDevice	im	NSDictionary *
openTray	DR	Cl	DRDevice	im	BOOL
closeTray	DR	Cl	DRDevice	im	BOOL
ejectMedia	DR	Cl	DRDevice	im	BOOL
acquireExclusiveAccess	DR	Cl	DRDevice	im	BOOL
releaseExclusiveAccess	DR	Cl	DRDevice	im	void
acquireMediaReservation	DR	Cl	DRDevice	im	void
releaseMediaReservation	DR	Cl	DRDevice	im	void
isEqualToDevice:	DR	Cl	DRDevice	im	BOOL	DRDevice *
writesCD	DR	Cl	DRDevice	im	BOOL
writesDVD	DR	Cl	DRDevice	im	BOOL
displayName	DR	Cl	DRDevice	im	NSString *
ioRegistryEntryPath	DR	Cl	DRDevice	im	NSString *
mediaIsPresent	DR	Cl	DRDevice	im	BOOL
mediaIsTransitioning	DR	Cl	DRDevice	im	BOOL
mediaIsBusy	DR	Cl	DRDevice	im	BOOL
mediaType	DR	Cl	DRDevice	im	NSString *
mediaIsBlank	DR	Cl	DRDevice	im	BOOL
mediaIsAppendable	DR	Cl	DRDevice	im	BOOL
mediaIsOverwritable	DR	Cl	DRDevice	im	BOOL
mediaIsErasable	DR	Cl	DRDevice	im	BOOL
mediaIsReserved	DR	Cl	DRDevice	im	BOOL
mediaSpaceOverwritable	DR	Cl	DRDevice	im	DRMSF *
mediaSpaceUsed	DR	Cl	DRDevice	im	DRMSF *
mediaSpaceFree	DR	Cl	DRDevice	im	DRMSF *
trayIsOpen	DR	Cl	DRDevice	im	BOOL
bsdName	DR	Cl	DRDevice	im	NSString *
progressPanel	DRui	Cl	DRBurnProgressPanel	cm	DRBurnProgressPanel *
beginProgressSheetForBurn:layout:modalForWindow:	DRui	Cl	DRBurnProgressPanel	im	void	DRBurn *	id	NSWindow *
beginProgressPanelForBurn:layout:	DRui	Cl	DRBurnProgressPanel	im	void	DRBurn *	id
setDescription:	DRui	Cl	DRBurnProgressPanel	im	void	NSString *
description	DRui	Cl	DRBurnProgressPanel	im	NSString *
setVerboseProgressStatus:	DRui	Cl	DRBurnProgressPanel	im	void	BOOL
verboseProgressStatus	DRui	Cl	DRBurnProgressPanel	im	BOOL
stopBurn:	DRui	Cl	DRBurnProgressPanel	im	IBAction	id
burnProgressPanelWillBegin:	DRui	Cl	NSObject;DRBurnProgressPanel	dm	void	NSNotification *
burnProgressPanelDidFinish:	DRui	Cl	NSObject;DRBurnProgressPanel	dm	void	NSNotification *
burnProgressPanel:burnDidFinish:	DRui	Cl	NSObject;DRBurnProgressPanel	dm	BOOL	DRBurnProgressPanel *	DRBurn *
setupPanel	DRui	Cl	DRBurnSetupPanel	cm	DRBurnSetupPanel *
setDefaultButtonTitle:	DRui	Cl	DRBurnSetupPanel	im	void	NSString *
setCanSelectTestBurn:	DRui	Cl	DRBurnSetupPanel	im	void	BOOL
setCanSelectAppendableMedia:	DRui	Cl	DRBurnSetupPanel	im	void	BOOL
burnObject	DRui	Cl	DRBurnSetupPanel	im	DRBurn *
expand:	DRui	Cl	DRBurnSetupPanel	im	IBAction	id
burnSpeed:	DRui	Cl	DRBurnSetupPanel	im	IBAction	id
appendable:	DRui	Cl	DRBurnSetupPanel	im	IBAction	id
completionAction:	DRui	Cl	DRBurnSetupPanel	im	IBAction	id
testBurn:	DRui	Cl	DRBurnSetupPanel	im	IBAction	id
verifyBurn:	DRui	Cl	DRBurnSetupPanel	im	IBAction	id
progressPanel	DRui	Cl	DREraseProgressPanel	cm	DREraseProgressPanel *
beginProgressSheetForErase:modalForWindow:	DRui	Cl	DREraseProgressPanel	im	void	DRErase *	NSWindow *
beginProgressPanelForErase:	DRui	Cl	DREraseProgressPanel	im	void	DRErase *
setDescription:	DRui	Cl	DREraseProgressPanel	im	void	NSString *
description	DRui	Cl	DREraseProgressPanel	im	NSString *
eraseProgressPanelWillBegin:	DRui	Cl	NSObject;DREraseProgressPanel	dm	void	NSNotification *
eraseProgressPanelDidFinish:	DRui	Cl	NSObject;DREraseProgressPanel	dm	void	NSNotification *
eraseProgressPanel:eraseDidFinish:	DRui	Cl	NSObject;DREraseProgressPanel	dm	BOOL	DREraseProgressPanel *	DRErase *
setupPanel	DRui	Cl	DREraseSetupPanel	cm	DREraseSetupPanel *
eraseObject	DRui	Cl	DREraseSetupPanel	im	DRErase *
eraseType:	DRui	Cl	DREraseSetupPanel	im	IBAction	id
initWithNibName:	DRui	Cl	DRSetupPanel	im	id	NSString *
runSetupPanel	DRui	Cl	DRSetupPanel	im	int
beginSetupSheetForWindow:modalDelegate:didEndSelector:contextInfo:	DRui	Cl	DRSetupPanel	im	void	NSWindow *	id	SEL	void *
ok:	DRui	Cl	DRSetupPanel	im	IBAction	id
cancel:	DRui	Cl	DRSetupPanel	im	IBAction	id
eject:	DRui	Cl	DRSetupPanel	im	IBAction	id
open:	DRui	Cl	DRSetupPanel	im	IBAction	id
close:	DRui	Cl	DRSetupPanel	im	IBAction	id
deviceSelectionChanged:	DRui	Cl	DRSetupPanel	im	void	DRDevice *
mediaStateChanged:	DRui	Cl	DRSetupPanel	im	BOOL	NSDictionary *
setupForDisplay	DRui	Cl	DRSetupPanel	im	void
setupPanel:deviceCouldBeTarget:	DRui	Cl	NSObject;DRSetupPanel	dm	BOOL	DRSetupPanel *	DRDevice *
setupPanelDeviceSelectionChanged:	DRui	Cl	NSObject;DRSetupPanel	dm	void	NSNotification *
setupPanelShouldHandleMediaReservations:	DRui	Cl	NSObject;DRSetupPanel	dm	BOOL	DRSetupPanel *
setupPanel:deviceContainsSuitableMedia:promptString:	DRui	Cl	NSObject;DRSetupPanel	dm	BOOL	DRSetupPanel *	DRDevice *	NSString **
defaultExceptionHandler	Exc	Cl	NSExceptionHandler	cm	NSExceptionHandler *
setExceptionHandlingMask:	Exc	Cl	NSExceptionHandler	im	void	unsigned int
exceptionHandlingMask	Exc	Cl	NSExceptionHandler	im	unsigned int
setExceptionHangingMask:	Exc	Cl	NSExceptionHandler	im	void	unsigned int
exceptionHangingMask	Exc	Cl	NSExceptionHandler	im	unsigned int
setDelegate:	Exc	Cl	NSExceptionHandler	im	void	id
delegate	Exc	Cl	NSExceptionHandler	im	id
exceptionHandler:shouldLogException:mask:	Exc	Cl	NSObject;NSExceptionHandler	dm	BOOL	NSExceptionHandler *	NSException *	unsigned int
exceptionHandler:shouldHandleException:mask:	Exc	Cl	NSObject;NSExceptionHandler	dm	BOOL	NSExceptionHandler *	NSException *	unsigned int
transform	F	Cl	NSAffineTransform	cm	NSAffineTransform *
initWithTransform:	F	Cl	NSAffineTransform	im	id	NSAffineTransform *
translateXBy:yBy:	F	Cl	NSAffineTransform	im	void	float	float
rotateByDegrees:	F	Cl	NSAffineTransform	im	void	float
rotateByRadians:	F	Cl	NSAffineTransform	im	void	float
scaleBy:	F	Cl	NSAffineTransform	im	void	float
scaleXBy:yBy:	F	Cl	NSAffineTransform	im	void	float	float
invert	F	Cl	NSAffineTransform	im	void
appendTransform:	F	Cl	NSAffineTransform	im	void	NSAffineTransform *
prependTransform:	F	Cl	NSAffineTransform	im	void	NSAffineTransform *
transformPoint:	F	Cl	NSAffineTransform	im	NSPoint	NSPoint
transformSize:	F	Cl	NSAffineTransform	im	NSSize	NSSize
transformStruct	F	Cl	NSAffineTransform	im	NSAffineTransformStruct
setTransformStruct:	F	Cl	NSAffineTransform	im	void	NSAffineTransformStruct
nullDescriptor	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *
descriptorWithDescriptorType:bytes:length:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	DescType	const void *	unsigned int
descriptorWithDescriptorType:data:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	DescType	NSData *
descriptorWithBoolean:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	Boolean
descriptorWithEnumCode:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	OSType
descriptorWithInt32:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	SInt32
descriptorWithTypeCode:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	OSType
descriptorWithString:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	NSString *
appleEventWithEventClass:eventID:targetDescriptor:returnID:transactionID:	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *	AEEventClass	AEEventID	NSAppleEventDescriptor *	AEReturnID	AETransactionID
listDescriptor	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *
recordDescriptor	F	Cl	NSAppleEventDescriptor	cm	NSAppleEventDescriptor *
initWithAEDescNoCopy:	F	Cl	NSAppleEventDescriptor	im	id	const AEDesc *
initWithDescriptorType:bytes:length:	F	Cl	NSAppleEventDescriptor	im	id	DescType	const void *	unsigned int
initWithDescriptorType:data:	F	Cl	NSAppleEventDescriptor	im	id	DescType	NSData *
initWithEventClass:eventID:targetDescriptor:returnID:transactionID:	F	Cl	NSAppleEventDescriptor	im	id	AEEventClass	AEEventID	NSAppleEventDescriptor *	AEReturnID	AETransactionID
initListDescriptor	F	Cl	NSAppleEventDescriptor	im	id
initRecordDescriptor	F	Cl	NSAppleEventDescriptor	im	id
aeDesc	F	Cl	NSAppleEventDescriptor	im	const AEDesc *
descriptorType	F	Cl	NSAppleEventDescriptor	im	DescType
data	F	Cl	NSAppleEventDescriptor	im	NSData *
booleanValue	F	Cl	NSAppleEventDescriptor	im	Boolean
enumCodeValue	F	Cl	NSAppleEventDescriptor	im	OSType
int32Value	F	Cl	NSAppleEventDescriptor	im	SInt32
typeCodeValue	F	Cl	NSAppleEventDescriptor	im	OSType
stringValue	F	Cl	NSAppleEventDescriptor	im	NSString *
eventClass	F	Cl	NSAppleEventDescriptor	im	AEEventClass
eventID	F	Cl	NSAppleEventDescriptor	im	AEEventID
returnID	F	Cl	NSAppleEventDescriptor	im	AEReturnID
transactionID	F	Cl	NSAppleEventDescriptor	im	AETransactionID
setParamDescriptor:forKeyword:	F	Cl	NSAppleEventDescriptor	im	void	NSAppleEventDescriptor *	AEKeyword
paramDescriptorForKeyword:	F	Cl	NSAppleEventDescriptor	im	NSAppleEventDescriptor *	AEKeyword
removeParamDescriptorWithKeyword:	F	Cl	NSAppleEventDescriptor	im	void	AEKeyword
setAttributeDescriptor:forKeyword:	F	Cl	NSAppleEventDescriptor	im	void	NSAppleEventDescriptor *	AEKeyword
attributeDescriptorForKeyword:	F	Cl	NSAppleEventDescriptor	im	NSAppleEventDescriptor *	AEKeyword
numberOfItems	F	Cl	NSAppleEventDescriptor	im	int
insertDescriptor:atIndex:	F	Cl	NSAppleEventDescriptor	im	void	NSAppleEventDescriptor *	long int
descriptorAtIndex:	F	Cl	NSAppleEventDescriptor	im	NSAppleEventDescriptor *	long int
removeDescriptorAtIndex:	F	Cl	NSAppleEventDescriptor	im	void	long int
removeDecriptorAtIndex:	F	Cl	NSAppleEventDescriptor	im	void	long int
setDescriptor:forKeyword:	F	Cl	NSAppleEventDescriptor	im	void	NSAppleEventDescriptor *	AEKeyword
descriptorForKeyword:	F	Cl	NSAppleEventDescriptor	im	NSAppleEventDescriptor *	AEKeyword
removeDescriptorWithKeyword:	F	Cl	NSAppleEventDescriptor	im	void	AEKeyword
keywordForDescriptorAtIndex:	F	Cl	NSAppleEventDescriptor	im	AEKeyword	long int
coerceToDescriptorType:	F	Cl	NSAppleEventDescriptor	im	NSAppleEventDescriptor *	DescType
sharedAppleEventManager	F	Cl	NSAppleEventManager	cm	NSAppleEventManager *
setEventHandler:andSelector:forEventClass:andEventID:	F	Cl	NSAppleEventManager	im	void	id	SEL	AEEventClass	AEEventID
removeEventHandlerForEventClass:andEventID:	F	Cl	NSAppleEventManager	im	void	AEEventClass	AEEventID
dispatchRawAppleEvent:withRawReply:handlerRefCon:	F	Cl	NSAppleEventManager	im	OSErr	const AppleEvent *	AppleEvent *	UInt32
currentAppleEvent	F	Cl	NSAppleEventManager	im	NSAppleEventDescriptor *
currentReplyAppleEvent	F	Cl	NSAppleEventManager	im	NSAppleEventDescriptor *
suspendCurrentAppleEvent	F	Cl	NSAppleEventManager	im	NSAppleEventManagerSuspensionID
appleEventForSuspensionID:	F	Cl	NSAppleEventManager	im	NSAppleEventDescriptor *	NSAppleEventManagerSuspensionID
replyAppleEventForSuspensionID:	F	Cl	NSAppleEventManager	im	NSAppleEventDescriptor *	NSAppleEventManagerSuspensionID
setCurrentAppleEventAndReplyEventWithSuspensionID:	F	Cl	NSAppleEventManager	im	void	NSAppleEventManagerSuspensionID
resumeWithSuspensionID:	F	Cl	NSAppleEventManager	im	void	NSAppleEventManagerSuspensionID
initWithContentsOfURL:error:	F	Cl	NSAppleScript	im	id	NSURL *	NSDictionary **
initWithSource:	F	Cl	NSAppleScript	im	id	NSString *
source	F	Cl	NSAppleScript	im	NSString *
isCompiled	F	Cl	NSAppleScript	im	BOOL
compileAndReturnError:	F	Cl	NSAppleScript	im	BOOL	NSDictionary **
executeAndReturnError:	F	Cl	NSAppleScript	im	NSAppleEventDescriptor *	NSDictionary **
executeAppleEvent:error:	F	Cl	NSAppleScript	im	NSAppleEventDescriptor *	NSAppleEventDescriptor *	NSDictionary **
initForWritingWithMutableData:	F	Cl	NSArchiver	im	id	NSMutableData *
archiverData	F	Cl	NSArchiver	im	NSMutableData *
encodeRootObject:	F	Cl	NSArchiver	im	void	id
encodeConditionalObject:	F	Cl	NSArchiver	im	void	id
archivedDataWithRootObject:	F	Cl	NSArchiver	cm	NSData *	id
archiveRootObject:toFile:	F	Cl	NSArchiver	cm	BOOL	id	NSString *
encodeClassName:intoClassName:	F	Cl	NSArchiver	im	void	NSString *	NSString *
classNameEncodedForTrueClassName:	F	Cl	NSArchiver	im	NSString *	NSString *
replaceObject:withObject:	F	Cl	NSArchiver	im	void	id	id
initForReadingWithData:	F	Cl	NSUnarchiver;NSArchiver	im	id	NSData *
setObjectZone:	F	Cl	NSUnarchiver;NSArchiver	im	void	NSZone *
objectZone	F	Cl	NSUnarchiver;NSArchiver	im	NSZone *
isAtEnd	F	Cl	NSUnarchiver;NSArchiver	im	BOOL
systemVersion	F	Cl	NSUnarchiver;NSArchiver	im	unsigned
unarchiveObjectWithData:	F	Cl	NSUnarchiver;NSArchiver	cm	id	NSData *
unarchiveObjectWithFile:	F	Cl	NSUnarchiver;NSArchiver	cm	id	NSString *
decodeClassName:asClassName:	F	Cl	NSUnarchiver;NSArchiver	cm	void	NSString *	NSString *
decodeClassName:asClassName:	F	Cl	NSUnarchiver;NSArchiver	im	void	NSString *	NSString *
classNameDecodedForArchiveClassName:	F	Cl	NSUnarchiver;NSArchiver	cm	NSString *	NSString *
classNameDecodedForArchiveClassName:	F	Cl	NSUnarchiver;NSArchiver	im	NSString *	NSString *
replaceObject:withObject:	F	Cl	NSUnarchiver;NSArchiver	im	void	id	id
classForArchiver	F	Cl	NSObject;NSArchiver	im	Class
replacementObjectForArchiver:	F	Cl	NSObject;NSArchiver	im	id	NSArchiver *
count	F	Cl	NSArray	im	unsigned
objectAtIndex:	F	Cl	NSArray	im	id	unsigned
arrayByAddingObject:	F	Cl	NSArray	im	NSArray *	id
arrayByAddingObjectsFromArray:	F	Cl	NSArray	im	NSArray *	NSArray *
componentsJoinedByString:	F	Cl	NSArray	im	NSString *	NSString *
containsObject:	F	Cl	NSArray	im	BOOL	id
description	F	Cl	NSArray	im	NSString *
descriptionWithLocale:	F	Cl	NSArray	im	NSString *	NSDictionary *
descriptionWithLocale:indent:	F	Cl	NSArray	im	NSString *	NSDictionary *	unsigned
firstObjectCommonWithArray:	F	Cl	NSArray	im	id	NSArray *
getObjects:	F	Cl	NSArray	im	void	id *
getObjects:range:	F	Cl	NSArray	im	void	id *	NSRange
indexOfObject:	F	Cl	NSArray	im	unsigned	id
indexOfObject:inRange:	F	Cl	NSArray	im	unsigned	id	NSRange
indexOfObjectIdenticalTo:	F	Cl	NSArray	im	unsigned	id
indexOfObjectIdenticalTo:inRange:	F	Cl	NSArray	im	unsigned	id	NSRange
isEqualToArray:	F	Cl	NSArray	im	BOOL	NSArray *
lastObject	F	Cl	NSArray	im	id
objectEnumerator	F	Cl	NSArray	im	NSEnumerator *
reverseObjectEnumerator	F	Cl	NSArray	im	NSEnumerator *
sortedArrayHint	F	Cl	NSArray	im	NSData *
sortedArrayUsingFunction:context:	F	Cl	NSArray	im	NSArray *	int (*)(id, id, void *)	void *
sortedArrayUsingFunction:context:hint:	F	Cl	NSArray	im	NSArray *	int (*)(id, id, void *)	void *	NSData *
sortedArrayUsingSelector:	F	Cl	NSArray	im	NSArray *	SEL
subarrayWithRange:	F	Cl	NSArray	im	NSArray *	NSRange
writeToFile:atomically:	F	Cl	NSArray	im	BOOL	NSString *	BOOL
writeToURL:atomically:	F	Cl	NSArray	im	BOOL	NSURL *	BOOL
makeObjectsPerformSelector:	F	Cl	NSArray	im	void	SEL
makeObjectsPerformSelector:withObject:	F	Cl	NSArray	im	void	SEL	id
objectsAtIndexes:	F	Cl	NSArray	im	NSArray *	NSIndexSet *
array	F	Cl	NSArray	cm	id
arrayWithContentsOfFile:	F	Cl	NSArray	cm	id	NSString *
arrayWithContentsOfURL:	F	Cl	NSArray	cm	id	NSURL *
arrayWithObject:	F	Cl	NSArray	cm	id	id
arrayWithObjects:	F	Cl	NSArray	cm	id	id
initWithArray:	F	Cl	NSArray	im	id	NSArray *
initWithArray:copyItems:	F	Cl	NSArray	im	id	NSArray *	BOOL
initWithContentsOfFile:	F	Cl	NSArray	im	id	NSString *
initWithContentsOfURL:	F	Cl	NSArray	im	id	NSURL *
initWithObjects:count:	F	Cl	NSArray	im	id	id *	unsigned
initWithObjects:	F	Cl	NSArray	im	id	id
arrayWithArray:	F	Cl	NSArray	cm	id	NSArray *
arrayWithObjects:count:	F	Cl	NSArray	cm	id	id *	unsigned
addObject:	F	Cl	NSMutableArray;NSArray	im	void	id
insertObject:atIndex:	F	Cl	NSMutableArray;NSArray	im	void	id	unsigned
removeLastObject	F	Cl	NSMutableArray;NSArray	im	void
removeObjectAtIndex:	F	Cl	NSMutableArray;NSArray	im	void	unsigned
replaceObjectAtIndex:withObject:	F	Cl	NSMutableArray;NSArray	im	void	unsigned	id
addObjectsFromArray:	F	Cl	NSMutableArray;NSArray	im	void	NSArray *
exchangeObjectAtIndex:withObjectAtIndex:	F	Cl	NSMutableArray;NSArray	im	void	unsigned	unsigned
removeAllObjects	F	Cl	NSMutableArray;NSArray	im	void
removeObject:inRange:	F	Cl	NSMutableArray;NSArray	im	void	id	NSRange
removeObject:	F	Cl	NSMutableArray;NSArray	im	void	id
removeObjectIdenticalTo:inRange:	F	Cl	NSMutableArray;NSArray	im	void	id	NSRange
removeObjectIdenticalTo:	F	Cl	NSMutableArray;NSArray	im	void	id
removeObjectsFromIndices:numIndices:	F	Cl	NSMutableArray;NSArray	im	void	unsigned *	unsigned
removeObjectsInArray:	F	Cl	NSMutableArray;NSArray	im	void	NSArray *
removeObjectsInRange:	F	Cl	NSMutableArray;NSArray	im	void	NSRange
replaceObjectsInRange:withObjectsFromArray:range:	F	Cl	NSMutableArray;NSArray	im	void	NSRange	NSArray *	NSRange
replaceObjectsInRange:withObjectsFromArray:	F	Cl	NSMutableArray;NSArray	im	void	NSRange	NSArray *
setArray:	F	Cl	NSMutableArray;NSArray	im	void	NSArray *
sortUsingFunction:context:	F	Cl	NSMutableArray;NSArray	im	void	int (*)(id, id, void *)	void *
sortUsingSelector:	F	Cl	NSMutableArray;NSArray	im	void	SEL
insertObjects:atIndexes:	F	Cl	NSMutableArray;NSArray	im	void	NSArray *	NSIndexSet *
removeObjectsAtIndexes:	F	Cl	NSMutableArray;NSArray	im	void	NSIndexSet *
replaceObjectsAtIndexes:withObjects:	F	Cl	NSMutableArray;NSArray	im	void	NSIndexSet *	NSArray *
arrayWithCapacity:	F	Cl	NSMutableArray;NSArray	cm	id	unsigned
initWithCapacity:	F	Cl	NSMutableArray;NSArray	im	id	unsigned
string	F	Cl	NSAttributedString	im	NSString *
attributesAtIndex:effectiveRange:	F	Cl	NSAttributedString	im	NSDictionary *	unsigned	NSRangePointer
length	F	Cl	NSAttributedString	im	unsigned
attribute:atIndex:effectiveRange:	F	Cl	NSAttributedString	im	id	NSString *	unsigned int	NSRangePointer
attributedSubstringFromRange:	F	Cl	NSAttributedString	im	NSAttributedString *	NSRange
attributesAtIndex:longestEffectiveRange:inRange:	F	Cl	NSAttributedString	im	NSDictionary *	unsigned	NSRangePointer	NSRange
attribute:atIndex:longestEffectiveRange:inRange:	F	Cl	NSAttributedString	im	id	NSString *	unsigned int	NSRangePointer	NSRange
isEqualToAttributedString:	F	Cl	NSAttributedString	im	BOOL	NSAttributedString *
initWithString:	F	Cl	NSAttributedString	im	id	NSString *
initWithString:attributes:	F	Cl	NSAttributedString	im	id	NSString *	NSDictionary *
initWithAttributedString:	F	Cl	NSAttributedString	im	id	NSAttributedString *
replaceCharactersInRange:withString:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange	NSString *
setAttributes:range:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSDictionary *	NSRange
mutableString	F	Cl	NSMutableAttributedString;NSAttributedString	im	NSMutableString *
addAttribute:value:range:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSString *	id	NSRange
addAttributes:range:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSDictionary *	NSRange
removeAttribute:range:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSString *	NSRange
replaceCharactersInRange:withAttributedString:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange	NSAttributedString *
insertAttributedString:atIndex:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSAttributedString *	unsigned
appendAttributedString:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSAttributedString *
deleteCharactersInRange:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSRange
setAttributedString:	F	Cl	NSMutableAttributedString;NSAttributedString	im	void	NSAttributedString *
beginEditing	F	Cl	NSMutableAttributedString;NSAttributedString	im	void
endEditing	F	Cl	NSMutableAttributedString;NSAttributedString	im	void
addObject:	F	Cl	NSAutoreleasePool	cm	void	id
addObject:	F	Cl	NSAutoreleasePool	im	void	id
drain	F	Cl	NSAutoreleasePool	im	void
mainBundle	F	Cl	NSBundle	cm	NSBundle *
bundleWithPath:	F	Cl	NSBundle	cm	NSBundle *	NSString *
initWithPath:	F	Cl	NSBundle	im	id	NSString *
bundleForClass:	F	Cl	NSBundle	cm	NSBundle *	Class
bundleWithIdentifier:	F	Cl	NSBundle	cm	NSBundle *	NSString *
allBundles	F	Cl	NSBundle	cm	NSArray *
allFrameworks	F	Cl	NSBundle	cm	NSArray *
load	F	Cl	NSBundle	im	BOOL
isLoaded	F	Cl	NSBundle	im	BOOL
bundlePath	F	Cl	NSBundle	im	NSString *
resourcePath	F	Cl	NSBundle	im	NSString *
executablePath	F	Cl	NSBundle	im	NSString *
pathForAuxiliaryExecutable:	F	Cl	NSBundle	im	NSString *	NSString *
privateFrameworksPath	F	Cl	NSBundle	im	NSString *
sharedFrameworksPath	F	Cl	NSBundle	im	NSString *
sharedSupportPath	F	Cl	NSBundle	im	NSString *
builtInPlugInsPath	F	Cl	NSBundle	im	NSString *
bundleIdentifier	F	Cl	NSBundle	im	NSString *
classNamed:	F	Cl	NSBundle	im	Class	NSString *
principalClass	F	Cl	NSBundle	im	Class
pathForResource:ofType:inDirectory:	F	Cl	NSBundle	cm	NSString *	NSString *	NSString *	NSString *
pathForResource:ofType:	F	Cl	NSBundle	im	NSString *	NSString *	NSString *
pathForResource:ofType:inDirectory:	F	Cl	NSBundle	im	NSString *	NSString *	NSString *	NSString *
pathForResource:ofType:inDirectory:forLocalization:	F	Cl	NSBundle	im	NSString *	NSString *	NSString *	NSString *	NSString *
pathsForResourcesOfType:inDirectory:	F	Cl	NSBundle	cm	NSArray *	NSString *	NSString *
pathsForResourcesOfType:inDirectory:	F	Cl	NSBundle	im	NSArray *	NSString *	NSString *
pathsForResourcesOfType:inDirectory:forLocalization:	F	Cl	NSBundle	im	NSArray *	NSString *	NSString *	NSString *
localizedStringForKey:value:table:	F	Cl	NSBundle	im	NSString *	NSString *	NSString *	NSString *
infoDictionary	F	Cl	NSBundle	im	NSDictionary *
localizedInfoDictionary	F	Cl	NSBundle	im	NSDictionary *
objectForInfoDictionaryKey:	F	Cl	NSBundle	im	id	NSString *
localizations	F	Cl	NSBundle	im	NSArray *
preferredLocalizations	F	Cl	NSBundle	im	NSArray *
developmentLocalization	F	Cl	NSBundle	im	NSString *
preferredLocalizationsFromArray:	F	Cl	NSBundle	cm	NSArray *	NSArray *
preferredLocalizationsFromArray:forPreferences:	F	Cl	NSBundle	cm	NSArray *	NSArray *	NSArray *
currentCalendar	F	Cl	NSCalendar	cm	id
initWithCalendarIdentifier:	F	Cl	NSCalendar	im	id	NSString *
calendarIdentifier	F	Cl	NSCalendar	im	NSString *
setLocale:	F	Cl	NSCalendar	im	void	NSLocale *
locale	F	Cl	NSCalendar	im	NSLocale *
setTimeZone:	F	Cl	NSCalendar	im	void	NSTimeZone *
timeZone	F	Cl	NSCalendar	im	NSTimeZone *
setFirstWeekday:	F	Cl	NSCalendar	im	void	unsigned
firstWeekday	F	Cl	NSCalendar	im	unsigned
setMinimumDaysInFirstWeek:	F	Cl	NSCalendar	im	void	unsigned
minimumDaysInFirstWeek	F	Cl	NSCalendar	im	unsigned
minimumRangeOfUnit:	F	Cl	NSCalendar	im	NSRange	NSCalendarUnit
maximumRangeOfUnit:	F	Cl	NSCalendar	im	NSRange	NSCalendarUnit
rangeOfUnit:inUnit:forDate:	F	Cl	NSCalendar	im	NSRange	NSCalendarUnit	NSCalendarUnit	NSDate *
ordinalityOfUnit:inUnit:forDate:	F	Cl	NSCalendar	im	unsigned	NSCalendarUnit	NSCalendarUnit	NSDate *
dateFromComponents:	F	Cl	NSCalendar	im	NSDate *	NSDateComponents *
components:fromDate:	F	Cl	NSCalendar	im	NSDateComponents *	unsigned	NSDate *
dateByAddingComponents:toDate:options:	F	Cl	NSCalendar	im	NSDate *	NSDateComponents *	NSDate *	unsigned
components:fromDate:toDate:options:	F	Cl	NSCalendar	im	NSDateComponents *	unsigned	NSDate *	NSDate *	unsigned
era	F	Cl	NSDateComponents;NSCalendar	im	int
year	F	Cl	NSDateComponents;NSCalendar	im	int
month	F	Cl	NSDateComponents;NSCalendar	im	int
day	F	Cl	NSDateComponents;NSCalendar	im	int
hour	F	Cl	NSDateComponents;NSCalendar	im	int
minute	F	Cl	NSDateComponents;NSCalendar	im	int
second	F	Cl	NSDateComponents;NSCalendar	im	int
week	F	Cl	NSDateComponents;NSCalendar	im	int
weekday	F	Cl	NSDateComponents;NSCalendar	im	int
weekdayOrdinal	F	Cl	NSDateComponents;NSCalendar	im	int
setEra:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setYear:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setMonth:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setDay:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setHour:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setMinute:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setSecond:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setWeek:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setWeekday:	F	Cl	NSDateComponents;NSCalendar	im	void	int
setWeekdayOrdinal:	F	Cl	NSDateComponents;NSCalendar	im	void	int
dateWithYear:month:day:hour:minute:second:timeZone:	F	Cl	NSCalendarDate	cm	id	int	unsigned	unsigned	unsigned	unsigned	unsigned	NSTimeZone *
dateWithString:calendarFormat:	F	Cl	NSCalendarDate	cm	id	NSString *	NSString *
dateWithString:calendarFormat:locale:	F	Cl	NSCalendarDate	cm	id	NSString *	NSString *	NSDictionary *
calendarDate	F	Cl	NSCalendarDate	cm	id
initWithYear:month:day:hour:minute:second:timeZone:	F	Cl	NSCalendarDate	im	id	int	unsigned	unsigned	unsigned	unsigned	unsigned	NSTimeZone *
initWithString:	F	Cl	NSCalendarDate	im	id	NSString *
initWithString:calendarFormat:	F	Cl	NSCalendarDate	im	id	NSString *	NSString *
initWithString:calendarFormat:locale:	F	Cl	NSCalendarDate	im	id	NSString *	NSString *	NSDictionary *
timeZone	F	Cl	NSCalendarDate	im	NSTimeZone *
setTimeZone:	F	Cl	NSCalendarDate	im	void	NSTimeZone *
calendarFormat	F	Cl	NSCalendarDate	im	NSString *
setCalendarFormat:	F	Cl	NSCalendarDate	im	void	NSString *
yearOfCommonEra	F	Cl	NSCalendarDate	im	int
monthOfYear	F	Cl	NSCalendarDate	im	int
dayOfMonth	F	Cl	NSCalendarDate	im	int
dayOfWeek	F	Cl	NSCalendarDate	im	int
dayOfYear	F	Cl	NSCalendarDate	im	int
dayOfCommonEra	F	Cl	NSCalendarDate	im	int
hourOfDay	F	Cl	NSCalendarDate	im	int
minuteOfHour	F	Cl	NSCalendarDate	im	int
secondOfMinute	F	Cl	NSCalendarDate	im	int
dateByAddingYears:months:days:hours:minutes:seconds:	F	Cl	NSCalendarDate	im	NSCalendarDate *	int	int	int	int	int	int
years:months:days:hours:minutes:seconds:sinceDate:	F	Cl	NSCalendarDate	im	void	int *	int *	int *	int *	int *	int *	NSCalendarDate *
description	F	Cl	NSCalendarDate	im	NSString *
descriptionWithLocale:	F	Cl	NSCalendarDate	im	NSString *	NSDictionary *
descriptionWithCalendarFormat:	F	Cl	NSCalendarDate	im	NSString *	NSString *
descriptionWithCalendarFormat:locale:	F	Cl	NSCalendarDate	im	NSString *	NSString *	NSDictionary *
dateWithString:	F	Cl	NSDate;NSCalendarDate	cm	id	NSString *
initWithString:	F	Cl	NSDate;NSCalendarDate	im	id	NSString *
dateWithCalendarFormat:timeZone:	F	Cl	NSDate;NSCalendarDate	im	NSCalendarDate *	NSString *	NSTimeZone *
descriptionWithLocale:	F	Cl	NSDate;NSCalendarDate	im	NSString *	NSDictionary *
descriptionWithCalendarFormat:timeZone:locale:	F	Cl	NSDate;NSCalendarDate	im	NSString *	NSString *	NSTimeZone *	NSDictionary *
dateWithNaturalLanguageString:	F	Cl	NSDate;NSCalendarDate	cm	id	NSString *
dateWithNaturalLanguageString:locale:	F	Cl	NSDate;NSCalendarDate	cm	id	NSString *	NSDictionary *
controlCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
whitespaceCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
whitespaceAndNewlineCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
decimalDigitCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
letterCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
lowercaseLetterCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
uppercaseLetterCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
nonBaseCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
alphanumericCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
decomposableCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
illegalCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
punctuationCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
capitalizedLetterCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
symbolCharacterSet	F	Cl	NSCharacterSet	cm	NSCharacterSet *
characterSetWithRange:	F	Cl	NSCharacterSet	cm	NSCharacterSet *	NSRange
characterSetWithCharactersInString:	F	Cl	NSCharacterSet	cm	NSCharacterSet *	NSString *
characterSetWithBitmapRepresentation:	F	Cl	NSCharacterSet	cm	NSCharacterSet *	NSData *
characterSetWithContentsOfFile:	F	Cl	NSCharacterSet	cm	NSCharacterSet *	NSString *
characterIsMember:	F	Cl	NSCharacterSet	im	BOOL	unichar
bitmapRepresentation	F	Cl	NSCharacterSet	im	NSData *
invertedSet	F	Cl	NSCharacterSet	im	NSCharacterSet *
longCharacterIsMember:	F	Cl	NSCharacterSet	im	BOOL	UTF32Char
isSupersetOfSet:	F	Cl	NSCharacterSet	im	BOOL	NSCharacterSet *
hasMemberInPlane:	F	Cl	NSCharacterSet	im	BOOL	uint8_t
addCharactersInRange:	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void	NSRange
removeCharactersInRange:	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void	NSRange
addCharactersInString:	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void	NSString *
removeCharactersInString:	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void	NSString *
formUnionWithCharacterSet:	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void	NSCharacterSet *
formIntersectionWithCharacterSet:	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void	NSCharacterSet *
invert	F	Cl	NSMutableCharacterSet;NSCharacterSet	im	void
registerClassDescription:forClass:	F	Cl	NSClassDescription	cm	void	NSClassDescription *	Class
invalidateClassDescriptionCache	F	Cl	NSClassDescription	cm	void
classDescriptionForClass:	F	Cl	NSClassDescription	cm	NSClassDescription *	Class
attributeKeys	F	Cl	NSClassDescription	im	NSArray *
toOneRelationshipKeys	F	Cl	NSClassDescription	im	NSArray *
toManyRelationshipKeys	F	Cl	NSClassDescription	im	NSArray *
inverseForRelationshipKey:	F	Cl	NSClassDescription	im	NSString *	NSString *
classDescription	F	Cl	NSObject;NSClassDescription	im	NSClassDescription *
attributeKeys	F	Cl	NSObject;NSClassDescription	im	NSArray *
toOneRelationshipKeys	F	Cl	NSObject;NSClassDescription	im	NSArray *
toManyRelationshipKeys	F	Cl	NSObject;NSClassDescription	im	NSArray *
inverseForRelationshipKey:	F	Cl	NSObject;NSClassDescription	im	NSString *	NSString *
encodeValueOfObjCType:at:	F	Cl	NSCoder	im	void	const char *	const void *
encodeDataObject:	F	Cl	NSCoder	im	void	NSData *
decodeValueOfObjCType:at:	F	Cl	NSCoder	im	void	const char *	void *
decodeDataObject	F	Cl	NSCoder	im	NSData *
versionForClassName:	F	Cl	NSCoder	im	unsigned	NSString *
encodeObject:	F	Cl	NSCoder	im	void	id
encodePropertyList:	F	Cl	NSCoder	im	void	id
encodeRootObject:	F	Cl	NSCoder	im	void	id
encodeBycopyObject:	F	Cl	NSCoder	im	void	id
encodeByrefObject:	F	Cl	NSCoder	im	void	id
encodeConditionalObject:	F	Cl	NSCoder	im	void	id
encodeValuesOfObjCTypes:	F	Cl	NSCoder	im	void	const char *
encodeArrayOfObjCType:count:at:	F	Cl	NSCoder	im	void	const char *	unsigned	const void *
encodeBytes:length:	F	Cl	NSCoder	im	void	const void *	unsigned
decodeObject	F	Cl	NSCoder	im	id
decodePropertyList	F	Cl	NSCoder	im	id
decodeValuesOfObjCTypes:	F	Cl	NSCoder	im	void	const char *
decodeArrayOfObjCType:count:at:	F	Cl	NSCoder	im	void	const char *	unsigned	void *
decodeBytesWithReturnedLength:	F	Cl	NSCoder	im	void *	unsigned *
setObjectZone:	F	Cl	NSCoder	im	void	NSZone *
objectZone	F	Cl	NSCoder	im	NSZone *
systemVersion	F	Cl	NSCoder	im	unsigned
allowsKeyedCoding	F	Cl	NSCoder	im	BOOL
encodeObject:forKey:	F	Cl	NSCoder	im	void	id	NSString *
encodeConditionalObject:forKey:	F	Cl	NSCoder	im	void	id	NSString *
encodeBool:forKey:	F	Cl	NSCoder	im	void	BOOL	NSString *
encodeInt:forKey:	F	Cl	NSCoder	im	void	int	NSString *
encodeInt32:forKey:	F	Cl	NSCoder	im	void	int32_t	NSString *
encodeInt64:forKey:	F	Cl	NSCoder	im	void	int64_t	NSString *
encodeFloat:forKey:	F	Cl	NSCoder	im	void	float	NSString *
encodeDouble:forKey:	F	Cl	NSCoder	im	void	double	NSString *
encodeBytes:length:forKey:	F	Cl	NSCoder	im	void	const uint8_t *	unsigned	NSString *
containsValueForKey:	F	Cl	NSCoder	im	BOOL	NSString *
decodeObjectForKey:	F	Cl	NSCoder	im	id	NSString *
decodeBoolForKey:	F	Cl	NSCoder	im	BOOL	NSString *
decodeIntForKey:	F	Cl	NSCoder	im	int	NSString *
decodeInt32ForKey:	F	Cl	NSCoder	im	int32_t	NSString *
decodeInt64ForKey:	F	Cl	NSCoder	im	int64_t	NSString *
decodeFloatForKey:	F	Cl	NSCoder	im	float	NSString *
decodeDoubleForKey:	F	Cl	NSCoder	im	double	NSString *
decodeBytesForKey:returnedLength:	F	Cl	NSCoder	im	const uint8_t *	NSString *	unsigned *
encodeNXObject:	F	Cl	NSCoder	im	void	id
decodeNXObject	F	Cl	NSCoder	im	id
predicateWithLeftExpression:rightExpression:modifier:type:options:	F	Cl	NSComparisonPredicate	cm	NSPredicate *	NSExpression *	NSExpression *	NSComparisonPredicateModifier	NSPredicateOperatorType	unsigned
predicateWithLeftExpression:rightExpression:customSelector:	F	Cl	NSComparisonPredicate	cm	NSPredicate *	NSExpression *	NSExpression *	SEL
initWithLeftExpression:rightExpression:modifier:type:options:	F	Cl	NSComparisonPredicate	im	id	NSExpression *	NSExpression *	NSComparisonPredicateModifier	NSPredicateOperatorType	unsigned
initWithLeftExpression:rightExpression:customSelector:	F	Cl	NSComparisonPredicate	im	id	NSExpression *	NSExpression *	SEL
predicateOperatorType	F	Cl	NSComparisonPredicate	im	NSPredicateOperatorType
comparisonPredicateModifier	F	Cl	NSComparisonPredicate	im	NSComparisonPredicateModifier
leftExpression	F	Cl	NSComparisonPredicate	im	NSExpression *
rightExpression	F	Cl	NSComparisonPredicate	im	NSExpression *
customSelector	F	Cl	NSComparisonPredicate	im	SEL
options	F	Cl	NSComparisonPredicate	im	unsigned
initWithType:subpredicates:	F	Cl	NSCompoundPredicate	im	id	NSCompoundPredicateType	NSArray *
compoundPredicateType	F	Cl	NSCompoundPredicate	im	NSCompoundPredicateType
subpredicates	F	Cl	NSCompoundPredicate	im	NSArray *
andPredicateWithSubpredicates:	F	Cl	NSCompoundPredicate	cm	NSPredicate *	NSArray *
orPredicateWithSubpredicates:	F	Cl	NSCompoundPredicate	cm	NSPredicate *	NSArray *
notPredicateWithSubpredicate:	F	Cl	NSCompoundPredicate	cm	NSPredicate *	NSPredicate *
statistics	F	Cl	NSConnection	im	NSDictionary *
allConnections	F	Cl	NSConnection	cm	NSArray *
defaultConnection	F	Cl	NSConnection	cm	NSConnection *
connectionWithRegisteredName:host:	F	Cl	NSConnection	cm	NSConnection *	NSString *	NSString *
connectionWithRegisteredName:host:usingNameServer:	F	Cl	NSConnection	cm	NSConnection *	NSString *	NSString *	NSPortNameServer *
rootProxyForConnectionWithRegisteredName:host:	F	Cl	NSConnection	cm	NSDistantObject *	NSString *	NSString *
rootProxyForConnectionWithRegisteredName:host:usingNameServer:	F	Cl	NSConnection	cm	NSDistantObject *	NSString *	NSString *	NSPortNameServer *
setRequestTimeout:	F	Cl	NSConnection	im	void	NSTimeInterval
requestTimeout	F	Cl	NSConnection	im	NSTimeInterval
setReplyTimeout:	F	Cl	NSConnection	im	void	NSTimeInterval
replyTimeout	F	Cl	NSConnection	im	NSTimeInterval
setRootObject:	F	Cl	NSConnection	im	void	id
rootObject	F	Cl	NSConnection	im	id
rootProxy	F	Cl	NSConnection	im	NSDistantObject *
setDelegate:	F	Cl	NSConnection	im	void	id
delegate	F	Cl	NSConnection	im	id
setIndependentConversationQueueing:	F	Cl	NSConnection	im	void	BOOL
independentConversationQueueing	F	Cl	NSConnection	im	BOOL
isValid	F	Cl	NSConnection	im	BOOL
invalidate	F	Cl	NSConnection	im	void
addRequestMode:	F	Cl	NSConnection	im	void	NSString *
removeRequestMode:	F	Cl	NSConnection	im	void	NSString *
requestModes	F	Cl	NSConnection	im	NSArray *
registerName:	F	Cl	NSConnection	im	BOOL	NSString *
registerName:withNameServer:	F	Cl	NSConnection	im	BOOL	NSString *	NSPortNameServer *
connectionWithReceivePort:sendPort:	F	Cl	NSConnection	cm	NSConnection *	NSPort *	NSPort *
currentConversation	F	Cl	NSConnection	cm	id
initWithReceivePort:sendPort:	F	Cl	NSConnection	im	id	NSPort *	NSPort *
sendPort	F	Cl	NSConnection	im	NSPort *
receivePort	F	Cl	NSConnection	im	NSPort *
enableMultipleThreads	F	Cl	NSConnection	im	void
multipleThreadsEnabled	F	Cl	NSConnection	im	BOOL
addRunLoop:	F	Cl	NSConnection	im	void	NSRunLoop *
removeRunLoop:	F	Cl	NSConnection	im	void	NSRunLoop *
runInNewThread	F	Cl	NSConnection	im	void
remoteObjects	F	Cl	NSConnection	im	NSArray *
localObjects	F	Cl	NSConnection	im	NSArray *
makeNewConnection:sender:	F	Cl	NSObject;NSConnection	dm	BOOL	NSConnection *	NSConnection *
connection:shouldMakeNewConnection:	F	Cl	NSObject;NSConnection	dm	BOOL	NSConnection *	NSConnection *
authenticationDataForComponents:	F	Cl	NSObject;NSConnection	dm	NSData *	NSArray *
authenticateComponents:withData:	F	Cl	NSObject;NSConnection	dm	BOOL	NSArray *	NSData *
createConversationForConnection:	F	Cl	NSObject;NSConnection	dm	id	NSConnection *
invocation	F	Cl	NSDistantObjectRequest;NSConnection	dm	NSInvocation *
connection	F	Cl	NSDistantObjectRequest;NSConnection	dm	NSConnection *
conversation	F	Cl	NSDistantObjectRequest;NSConnection	dm	id
replyWithException:	F	Cl	NSDistantObjectRequest;NSConnection	dm	void	NSException *
connection:handleRequest:	F	Cl	NSObject;NSConnection	dm	BOOL	NSConnection *	NSDistantObjectRequest *
length	F	Cl	NSData	im	unsigned
bytes	F	Cl	NSData	im	const void *
description	F	Cl	NSData	im	NSString *
getBytes:	F	Cl	NSData	im	void	void *
getBytes:length:	F	Cl	NSData	im	void	void *	unsigned
getBytes:range:	F	Cl	NSData	im	void	void *	NSRange
isEqualToData:	F	Cl	NSData	im	BOOL	NSData *
subdataWithRange:	F	Cl	NSData	im	NSData *	NSRange
writeToFile:atomically:	F	Cl	NSData	im	BOOL	NSString *	BOOL
writeToURL:atomically:	F	Cl	NSData	im	BOOL	NSURL *	BOOL
writeToFile:options:error:	F	Cl	NSData	im	BOOL	NSString *	unsigned	NSError **
writeToURL:options:error:	F	Cl	NSData	im	BOOL	NSURL *	unsigned	NSError **
data	F	Cl	NSData	cm	id
dataWithBytes:length:	F	Cl	NSData	cm	id	const void *	unsigned
dataWithBytesNoCopy:length:	F	Cl	NSData	cm	id	void *	unsigned
dataWithBytesNoCopy:length:freeWhenDone:	F	Cl	NSData	cm	id	void *	unsigned	BOOL
dataWithContentsOfFile:options:error:	F	Cl	NSData	cm	id	NSString *	unsigned	NSError **
dataWithContentsOfURL:options:error:	F	Cl	NSData	cm	id	NSURL *	unsigned	NSError **
dataWithContentsOfFile:	F	Cl	NSData	cm	id	NSString *
dataWithContentsOfURL:	F	Cl	NSData	cm	id	NSURL *
dataWithContentsOfMappedFile:	F	Cl	NSData	cm	id	NSString *
initWithBytes:length:	F	Cl	NSData	im	id	const void *	unsigned
initWithBytesNoCopy:length:	F	Cl	NSData	im	id	void *	unsigned
initWithBytesNoCopy:length:freeWhenDone:	F	Cl	NSData	im	id	void *	unsigned	BOOL
initWithContentsOfFile:options:error:	F	Cl	NSData	im	id	NSString *	unsigned	NSError **
initWithContentsOfURL:options:error:	F	Cl	NSData	im	id	NSURL *	unsigned	NSError **
initWithContentsOfFile:	F	Cl	NSData	im	id	NSString *
initWithContentsOfURL:	F	Cl	NSData	im	id	NSURL *
initWithContentsOfMappedFile:	F	Cl	NSData	im	id	NSString *
initWithData:	F	Cl	NSData	im	id	NSData *
dataWithData:	F	Cl	NSData	cm	id	NSData *
mutableBytes	F	Cl	NSMutableData;NSData	im	void *
setLength:	F	Cl	NSMutableData;NSData	im	void	unsigned
appendBytes:length:	F	Cl	NSMutableData;NSData	im	void	const void *	unsigned
appendData:	F	Cl	NSMutableData;NSData	im	void	NSData *
increaseLengthBy:	F	Cl	NSMutableData;NSData	im	void	unsigned
replaceBytesInRange:withBytes:	F	Cl	NSMutableData;NSData	im	void	NSRange	const void *
resetBytesInRange:	F	Cl	NSMutableData;NSData	im	void	NSRange
setData:	F	Cl	NSMutableData;NSData	im	void	NSData *
replaceBytesInRange:withBytes:length:	F	Cl	NSMutableData;NSData	im	void	NSRange	const void *	unsigned
dataWithCapacity:	F	Cl	NSMutableData;NSData	cm	id	unsigned
dataWithLength:	F	Cl	NSMutableData;NSData	cm	id	unsigned
initWithCapacity:	F	Cl	NSMutableData;NSData	im	id	unsigned
initWithLength:	F	Cl	NSMutableData;NSData	im	id	unsigned
timeIntervalSinceReferenceDate	F	Cl	NSDate	im	NSTimeInterval
timeIntervalSinceDate:	F	Cl	NSDate	im	NSTimeInterval	NSDate *
timeIntervalSinceNow	F	Cl	NSDate	im	NSTimeInterval
timeIntervalSince1970	F	Cl	NSDate	im	NSTimeInterval
addTimeInterval:	F	Cl	NSDate	im	id	NSTimeInterval
earlierDate:	F	Cl	NSDate	im	NSDate *	NSDate *
laterDate:	F	Cl	NSDate	im	NSDate *	NSDate *
compare:	F	Cl	NSDate	im	NSComparisonResult	NSDate *
description	F	Cl	NSDate	im	NSString *
isEqualToDate:	F	Cl	NSDate	im	BOOL	NSDate *
timeIntervalSinceReferenceDate	F	Cl	NSDate	cm	NSTimeInterval
date	F	Cl	NSDate	cm	id
dateWithTimeIntervalSinceNow:	F	Cl	NSDate	cm	id	NSTimeInterval
dateWithTimeIntervalSinceReferenceDate:	F	Cl	NSDate	cm	id	NSTimeInterval
dateWithTimeIntervalSince1970:	F	Cl	NSDate	cm	id	NSTimeInterval
distantFuture	F	Cl	NSDate	cm	id
distantPast	F	Cl	NSDate	cm	id
init	F	Cl	NSDate	im	id
initWithTimeIntervalSinceReferenceDate:	F	Cl	NSDate	im	id	NSTimeInterval
initWithTimeInterval:sinceDate:	F	Cl	NSDate	im	id	NSTimeInterval	NSDate *
initWithTimeIntervalSinceNow:	F	Cl	NSDate	im	id	NSTimeInterval
init	F	Cl	NSDateFormatter	im	id
getObjectValue:forString:range:error:	F	Cl	NSDateFormatter	im	BOOL	id *	NSString *	inout NSRange *	NSError **
stringFromDate:	F	Cl	NSDateFormatter	im	NSString *	NSDate *
dateFromString:	F	Cl	NSDateFormatter	im	NSDate *	NSString *
dateFormat	F	Cl	NSDateFormatter	im	NSString *
dateStyle	F	Cl	NSDateFormatter	im	NSDateFormatterStyle
setDateStyle:	F	Cl	NSDateFormatter	im	void	NSDateFormatterStyle
timeStyle	F	Cl	NSDateFormatter	im	NSDateFormatterStyle
setTimeStyle:	F	Cl	NSDateFormatter	im	void	NSDateFormatterStyle
locale	F	Cl	NSDateFormatter	im	NSLocale *
setLocale:	F	Cl	NSDateFormatter	im	void	NSLocale *
generatesCalendarDates	F	Cl	NSDateFormatter	im	BOOL
setGeneratesCalendarDates:	F	Cl	NSDateFormatter	im	void	BOOL
formatterBehavior	F	Cl	NSDateFormatter	im	NSDateFormatterBehavior
setFormatterBehavior:	F	Cl	NSDateFormatter	im	void	NSDateFormatterBehavior
defaultFormatterBehavior	F	Cl	NSDateFormatter	cm	NSDateFormatterBehavior
setDefaultFormatterBehavior:	F	Cl	NSDateFormatter	cm	void	NSDateFormatterBehavior
setDateFormat:	F	Cl	NSDateFormatter	im	void	NSString *
timeZone	F	Cl	NSDateFormatter	im	NSTimeZone *
setTimeZone:	F	Cl	NSDateFormatter	im	void	NSTimeZone *
calendar	F	Cl	NSDateFormatter	im	NSCalendar *
setCalendar:	F	Cl	NSDateFormatter	im	void	NSCalendar *
isLenient	F	Cl	NSDateFormatter	im	BOOL
setLenient:	F	Cl	NSDateFormatter	im	void	BOOL
twoDigitStartDate	F	Cl	NSDateFormatter	im	NSDate *
setTwoDigitStartDate:	F	Cl	NSDateFormatter	im	void	NSDate *
defaultDate	F	Cl	NSDateFormatter	im	NSDate *
setDefaultDate:	F	Cl	NSDateFormatter	im	void	NSDate *
eraSymbols	F	Cl	NSDateFormatter	im	NSArray *
setEraSymbols:	F	Cl	NSDateFormatter	im	void	NSArray *
monthSymbols	F	Cl	NSDateFormatter	im	NSArray *
setMonthSymbols:	F	Cl	NSDateFormatter	im	void	NSArray *
shortMonthSymbols	F	Cl	NSDateFormatter	im	NSArray *
setShortMonthSymbols:	F	Cl	NSDateFormatter	im	void	NSArray *
weekdaySymbols	F	Cl	NSDateFormatter	im	NSArray *
setWeekdaySymbols:	F	Cl	NSDateFormatter	im	void	NSArray *
shortWeekdaySymbols	F	Cl	NSDateFormatter	im	NSArray *
setShortWeekdaySymbols:	F	Cl	NSDateFormatter	im	void	NSArray *
AMSymbol	F	Cl	NSDateFormatter	im	NSString *
setAMSymbol:	F	Cl	NSDateFormatter	im	void	NSString *
PMSymbol	F	Cl	NSDateFormatter	im	NSString *
setPMSymbol:	F	Cl	NSDateFormatter	im	void	NSString *
initWithDateFormat:allowNaturalLanguage:	F	Cl	NSDateFormatter	im	id	NSString *	BOOL
allowsNaturalLanguage	F	Cl	NSDateFormatter	im	BOOL
enableRelease:	F	Cl	NSAutoreleasePool;NSDebug	cm	void	BOOL
showPools	F	Cl	NSAutoreleasePool;NSDebug	cm	void
resetTotalAutoreleasedObjects	F	Cl	NSAutoreleasePool;NSDebug	cm	void
totalAutoreleasedObjects	F	Cl	NSAutoreleasePool;NSDebug	cm	unsigned
enableFreedObjectCheck:	F	Cl	NSAutoreleasePool;NSDebug	cm	void	BOOL
autoreleasedObjectCount	F	Cl	NSAutoreleasePool;NSDebug	cm	unsigned int
topAutoreleasePoolCount	F	Cl	NSAutoreleasePool;NSDebug	cm	unsigned int
poolCountHighWaterMark	F	Cl	NSAutoreleasePool;NSDebug	cm	unsigned int
setPoolCountHighWaterMark:	F	Cl	NSAutoreleasePool;NSDebug	cm	void	unsigned int
poolCountHighWaterResolution	F	Cl	NSAutoreleasePool;NSDebug	cm	unsigned int
setPoolCountHighWaterResolution:	F	Cl	NSAutoreleasePool;NSDebug	cm	void	unsigned int
roundingMode	F	Pr	NSDecimalNumberBehaviors;NSDecimalNumber	im	NSRoundingMode
scale	F	Pr	NSDecimalNumberBehaviors;NSDecimalNumber	im	short
exceptionDuringOperation:error:leftOperand:rightOperand:	F	Pr	NSDecimalNumberBehaviors;NSDecimalNumber	im	NSDecimalNumber *	SEL	NSCalculationError	NSDecimalNumber *	NSDecimalNumber *
initWithMantissa:exponent:isNegative:	F	Cl	NSDecimalNumber	im	id	unsigned long long	short	BOOL
initWithDecimal:	F	Cl	NSDecimalNumber	im	id	NSDecimal
initWithString:	F	Cl	NSDecimalNumber	im	id	NSString *
initWithString:locale:	F	Cl	NSDecimalNumber	im	id	NSString *	NSDictionary *
descriptionWithLocale:	F	Cl	NSDecimalNumber	im	NSString *	NSDictionary *
decimalValue	F	Cl	NSDecimalNumber	im	NSDecimal
decimalNumberWithMantissa:exponent:isNegative:	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *	unsigned long long	short	BOOL
decimalNumberWithDecimal:	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *	NSDecimal
decimalNumberWithString:	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *	NSString *
decimalNumberWithString:locale:	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *	NSString *	NSDictionary *
zero	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *
one	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *
minimumDecimalNumber	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *
maximumDecimalNumber	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *
notANumber	F	Cl	NSDecimalNumber	cm	NSDecimalNumber *
decimalNumberByAdding:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *
decimalNumberByAdding:withBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *	id <NSDecimalNumberBehaviors>
decimalNumberBySubtracting:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *
decimalNumberBySubtracting:withBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *	id <NSDecimalNumberBehaviors>
decimalNumberByMultiplyingBy:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *
decimalNumberByMultiplyingBy:withBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *	id <NSDecimalNumberBehaviors>
decimalNumberByDividingBy:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *
decimalNumberByDividingBy:withBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	NSDecimalNumber *	id <NSDecimalNumberBehaviors>
decimalNumberByRaisingToPower:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	unsigned
decimalNumberByRaisingToPower:withBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	unsigned	id <NSDecimalNumberBehaviors>
decimalNumberByMultiplyingByPowerOf10:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	short
decimalNumberByMultiplyingByPowerOf10:withBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	short	id <NSDecimalNumberBehaviors>
decimalNumberByRoundingAccordingToBehavior:	F	Cl	NSDecimalNumber	im	NSDecimalNumber *	id <NSDecimalNumberBehaviors>
compare:	F	Cl	NSDecimalNumber	im	NSComparisonResult	NSNumber *
setDefaultBehavior:	F	Cl	NSDecimalNumber	cm	void	id <NSDecimalNumberBehaviors>
defaultBehavior	F	Cl	NSDecimalNumber	cm	id <NSDecimalNumberBehaviors>
objCType	F	Cl	NSDecimalNumber	im	const char *
doubleValue	F	Cl	NSDecimalNumber	im	double
defaultDecimalNumberHandler	F	Cl	NSDecimalNumberHandler;NSDecimalNumber	cm	id
initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:	F	Cl	NSDecimalNumberHandler;NSDecimalNumber	im	id	NSRoundingMode	short	BOOL	BOOL	BOOL	BOOL
decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:	F	Cl	NSDecimalNumberHandler;NSDecimalNumber	cm	id	NSRoundingMode	short	BOOL	BOOL	BOOL	BOOL
decimalValue	F	Cl	NSNumber;NSDecimalNumber	im	NSDecimal
scanDecimal:	F	Cl	NSScanner;NSDecimalNumber	im	BOOL	NSDecimal *
count	F	Cl	NSDictionary	im	unsigned
keyEnumerator	F	Cl	NSDictionary	im	NSEnumerator *
objectForKey:	F	Cl	NSDictionary	im	id	id
allKeys	F	Cl	NSDictionary	im	NSArray *
allKeysForObject:	F	Cl	NSDictionary	im	NSArray *	id
allValues	F	Cl	NSDictionary	im	NSArray *
description	F	Cl	NSDictionary	im	NSString *
descriptionInStringsFileFormat	F	Cl	NSDictionary	im	NSString *
descriptionWithLocale:	F	Cl	NSDictionary	im	NSString *	NSDictionary *
descriptionWithLocale:indent:	F	Cl	NSDictionary	im	NSString *	NSDictionary *	unsigned
isEqualToDictionary:	F	Cl	NSDictionary	im	BOOL	NSDictionary *
objectEnumerator	F	Cl	NSDictionary	im	NSEnumerator *
objectsForKeys:notFoundMarker:	F	Cl	NSDictionary	im	NSArray *	NSArray *	id
writeToFile:atomically:	F	Cl	NSDictionary	im	BOOL	NSString *	BOOL
writeToURL:atomically:	F	Cl	NSDictionary	im	BOOL	NSURL *	BOOL
keysSortedByValueUsingSelector:	F	Cl	NSDictionary	im	NSArray *	SEL
dictionary	F	Cl	NSDictionary	cm	id
dictionaryWithContentsOfFile:	F	Cl	NSDictionary	cm	id	NSString *
dictionaryWithContentsOfURL:	F	Cl	NSDictionary	cm	id	NSURL *
dictionaryWithObjects:forKeys:	F	Cl	NSDictionary	cm	id	NSArray *	NSArray *
dictionaryWithObjects:forKeys:count:	F	Cl	NSDictionary	cm	id	id *	id *	unsigned
dictionaryWithObjectsAndKeys:	F	Cl	NSDictionary	cm	id	id
initWithContentsOfFile:	F	Cl	NSDictionary	im	id	NSString *
initWithContentsOfURL:	F	Cl	NSDictionary	im	id	NSURL *
initWithObjects:forKeys:	F	Cl	NSDictionary	im	id	NSArray *	NSArray *
initWithObjects:forKeys:count:	F	Cl	NSDictionary	im	id	id *	id *	unsigned
initWithObjectsAndKeys:	F	Cl	NSDictionary	im	id	id
initWithDictionary:	F	Cl	NSDictionary	im	id	NSDictionary *
dictionaryWithDictionary:	F	Cl	NSDictionary	cm	id	NSDictionary *
dictionaryWithObject:forKey:	F	Cl	NSDictionary	cm	id	id	id
initWithDictionary:copyItems:	F	Cl	NSDictionary	im	id	NSDictionary *	BOOL
removeObjectForKey:	F	Cl	NSMutableDictionary;NSDictionary	im	void	id
setObject:forKey:	F	Cl	NSMutableDictionary;NSDictionary	im	void	id	id
addEntriesFromDictionary:	F	Cl	NSMutableDictionary;NSDictionary	im	void	NSDictionary *
removeAllObjects	F	Cl	NSMutableDictionary;NSDictionary	im	void
removeObjectsForKeys:	F	Cl	NSMutableDictionary;NSDictionary	im	void	NSArray *
setDictionary:	F	Cl	NSMutableDictionary;NSDictionary	im	void	NSDictionary *
dictionaryWithCapacity:	F	Cl	NSMutableDictionary;NSDictionary	cm	id	unsigned
initWithCapacity:	F	Cl	NSMutableDictionary;NSDictionary	im	id	unsigned
proxyWithTarget:connection:	F	Cl	NSDistantObject	cm	NSDistantObject *	id	NSConnection *
initWithTarget:connection:	F	Cl	NSDistantObject	im	id	id	NSConnection *
proxyWithLocal:connection:	F	Cl	NSDistantObject	cm	NSDistantObject *	id	NSConnection *
initWithLocal:connection:	F	Cl	NSDistantObject	im	id	id	NSConnection *
setProtocolForProxy:	F	Cl	NSDistantObject	im	void	Protocol *
connectionForProxy	F	Cl	NSDistantObject	im	NSConnection *
lockWithPath:	F	Cl	NSDistributedLock	cm	NSDistributedLock *	NSString *
initWithPath:	F	Cl	NSDistributedLock	im	id	NSString *
tryLock	F	Cl	NSDistributedLock	im	BOOL
unlock	F	Cl	NSDistributedLock	im	void
breakLock	F	Cl	NSDistributedLock	im	void
lockDate	F	Cl	NSDistributedLock	im	NSDate *
notificationCenterForType:	F	Cl	NSDistributedNotificationCenter	cm	NSDistributedNotificationCenter *	NSString *
defaultCenter	F	Cl	NSDistributedNotificationCenter	cm	id
addObserver:selector:name:object:suspensionBehavior:	F	Cl	NSDistributedNotificationCenter	im	void	id	SEL	NSString *	NSString *	NSNotificationSuspensionBehavior
postNotificationName:object:userInfo:deliverImmediately:	F	Cl	NSDistributedNotificationCenter	im	void	NSString *	NSString *	NSDictionary *	BOOL
postNotificationName:object:userInfo:options:	F	Cl	NSDistributedNotificationCenter	im	void	NSString *	NSString *	NSDictionary *	unsigned
setSuspended:	F	Cl	NSDistributedNotificationCenter	im	void	BOOL
suspended	F	Cl	NSDistributedNotificationCenter	im	BOOL
addObserver:selector:name:object:	F	Cl	NSDistributedNotificationCenter	im	void	id	SEL	NSString *	NSString *
postNotificationName:object:	F	Cl	NSDistributedNotificationCenter	im	void	NSString *	NSString *
postNotificationName:object:userInfo:	F	Cl	NSDistributedNotificationCenter	im	void	NSString *	NSString *	NSDictionary *
removeObserver:name:object:	F	Cl	NSDistributedNotificationCenter	im	void	id	NSString *	NSString *
nextObject	F	Cl	NSEnumerator	im	id
allObjects	F	Cl	NSEnumerator	im	NSArray *
initWithDomain:code:userInfo:	F	Cl	NSError	im	id	NSString *	int	NSDictionary *
errorWithDomain:code:userInfo:	F	Cl	NSError	cm	id	NSString *	int	NSDictionary *
domain	F	Cl	NSError	im	NSString *
code	F	Cl	NSError	im	int
userInfo	F	Cl	NSError	im	NSDictionary *
localizedDescription	F	Cl	NSError	im	NSString *
localizedFailureReason	F	Cl	NSError	im	NSString *
localizedRecoverySuggestion	F	Cl	NSError	im	NSString *
localizedRecoveryOptions	F	Cl	NSError	im	NSArray *
recoveryAttempter	F	Cl	NSError	im	id
attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:	F	Cl	NSObject;NSError	im	void	NSError *	unsigned int	id	SEL	void *
attemptRecoveryFromError:optionIndex:	F	Cl	NSObject;NSError	im	BOOL	NSError *	unsigned int
exceptionWithName:reason:userInfo:	F	Cl	NSException	cm	NSException *	NSString *	NSString *	NSDictionary *
initWithName:reason:userInfo:	F	Cl	NSException	im	id	NSString *	NSString *	NSDictionary *
name	F	Cl	NSException	im	NSString *
reason	F	Cl	NSException	im	NSString *
userInfo	F	Cl	NSException	im	NSDictionary *
raise	F	Cl	NSException	im	void
raise:format:	F	Cl	NSException	cm	void	NSString *	NSString *
raise:format:arguments:	F	Cl	NSException	cm	void	NSString *	NSString *	va_list
currentHandler	F	Cl	NSAssertionHandler;NSException	cm	NSAssertionHandler *
handleFailureInMethod:object:file:lineNumber:description:	F	Cl	NSAssertionHandler;NSException	im	void	SEL	id	NSString *	int	NSString *
handleFailureInFunction:file:lineNumber:description:	F	Cl	NSAssertionHandler;NSException	im	void	NSString *	NSString *	int	NSString *
expressionForConstantValue:	F	Cl	NSExpression	cm	NSExpression *	id
expressionForEvaluatedObject	F	Cl	NSExpression	cm	NSExpression *
expressionForVariable:	F	Cl	NSExpression	cm	NSExpression *	NSString *
expressionForKeyPath:	F	Cl	NSExpression	cm	NSExpression *	NSString *
expressionForFunction:arguments:	F	Cl	NSExpression	cm	NSExpression *	NSString *	NSArray *
initWithExpressionType:	F	Cl	NSExpression	im	id	NSExpressionType
expressionType	F	Cl	NSExpression	im	NSExpressionType
constantValue	F	Cl	NSExpression	im	id
keyPath	F	Cl	NSExpression	im	NSString *
function	F	Cl	NSExpression	im	NSString *
variable	F	Cl	NSExpression	im	NSString *
operand	F	Cl	NSExpression	im	NSExpression *
arguments	F	Cl	NSExpression	im	NSArray *
expressionValueWithObject:context:	F	Cl	NSExpression	im	id	id	NSMutableDictionary *
availableData	F	Cl	NSFileHandle	im	NSData *
readDataToEndOfFile	F	Cl	NSFileHandle	im	NSData *
readDataOfLength:	F	Cl	NSFileHandle	im	NSData *	unsigned int
writeData:	F	Cl	NSFileHandle	im	void	NSData *
offsetInFile	F	Cl	NSFileHandle	im	unsigned long long
seekToEndOfFile	F	Cl	NSFileHandle	im	unsigned long long
seekToFileOffset:	F	Cl	NSFileHandle	im	void	unsigned long long
truncateFileAtOffset:	F	Cl	NSFileHandle	im	void	unsigned long long
synchronizeFile	F	Cl	NSFileHandle	im	void
closeFile	F	Cl	NSFileHandle	im	void
fileHandleWithStandardInput	F	Cl	NSFileHandle	cm	id
fileHandleWithStandardOutput	F	Cl	NSFileHandle	cm	id
fileHandleWithStandardError	F	Cl	NSFileHandle	cm	id
fileHandleWithNullDevice	F	Cl	NSFileHandle	cm	id
fileHandleForReadingAtPath:	F	Cl	NSFileHandle	cm	id	NSString *
fileHandleForWritingAtPath:	F	Cl	NSFileHandle	cm	id	NSString *
fileHandleForUpdatingAtPath:	F	Cl	NSFileHandle	cm	id	NSString *
readInBackgroundAndNotifyForModes:	F	Cl	NSFileHandle	im	void	NSArray *
readInBackgroundAndNotify	F	Cl	NSFileHandle	im	void
readToEndOfFileInBackgroundAndNotifyForModes:	F	Cl	NSFileHandle	im	void	NSArray *
readToEndOfFileInBackgroundAndNotify	F	Cl	NSFileHandle	im	void
acceptConnectionInBackgroundAndNotifyForModes:	F	Cl	NSFileHandle	im	void	NSArray *
acceptConnectionInBackgroundAndNotify	F	Cl	NSFileHandle	im	void
waitForDataInBackgroundAndNotifyForModes:	F	Cl	NSFileHandle	im	void	NSArray *
waitForDataInBackgroundAndNotify	F	Cl	NSFileHandle	im	void
initWithNativeHandle:closeOnDealloc:	F	Cl	NSFileHandle	im	id	void *	BOOL
initWithNativeHandle:	F	Cl	NSFileHandle	im	id	void *
nativeHandle	F	Cl	NSFileHandle	im	void *
initWithFileDescriptor:closeOnDealloc:	F	Cl	NSFileHandle	im	id	int	BOOL
initWithFileDescriptor:	F	Cl	NSFileHandle	im	id	int
fileDescriptor	F	Cl	NSFileHandle	im	int
fileHandleForReading	F	Cl	NSPipe;NSFileHandle	im	NSFileHandle *
fileHandleForWriting	F	Cl	NSPipe;NSFileHandle	im	NSFileHandle *
init	F	Cl	NSPipe;NSFileHandle	im	id
pipe	F	Cl	NSPipe;NSFileHandle	cm	id
defaultManager	F	Cl	NSFileManager	cm	NSFileManager *
currentDirectoryPath	F	Cl	NSFileManager	im	NSString *
changeCurrentDirectoryPath:	F	Cl	NSFileManager	im	BOOL	NSString *
fileAttributesAtPath:traverseLink:	F	Cl	NSFileManager	im	NSDictionary *	NSString *	BOOL
changeFileAttributes:atPath:	F	Cl	NSFileManager	im	BOOL	NSDictionary *	NSString *
fileExistsAtPath:	F	Cl	NSFileManager	im	BOOL	NSString *
fileExistsAtPath:isDirectory:	F	Cl	NSFileManager	im	BOOL	NSString *	BOOL *
isReadableFileAtPath:	F	Cl	NSFileManager	im	BOOL	NSString *
isWritableFileAtPath:	F	Cl	NSFileManager	im	BOOL	NSString *
isExecutableFileAtPath:	F	Cl	NSFileManager	im	BOOL	NSString *
isDeletableFileAtPath:	F	Cl	NSFileManager	im	BOOL	NSString *
displayNameAtPath:	F	Cl	NSFileManager	im	NSString *	NSString *
contentsEqualAtPath:andPath:	F	Cl	NSFileManager	im	BOOL	NSString *	NSString *
linkPath:toPath:handler:	F	Cl	NSFileManager	im	BOOL	NSString *	NSString *
copyPath:toPath:handler:	F	Cl	NSFileManager	im	BOOL	NSString *	NSString *
movePath:toPath:handler:	F	Cl	NSFileManager	im	BOOL	NSString *	NSString *
removeFileAtPath:handler:	F	Cl	NSFileManager	im	BOOL	NSString *
directoryContentsAtPath:	F	Cl	NSFileManager	im	NSArray *	NSString *
enumeratorAtPath:	F	Cl	NSFileManager	im	NSDirectoryEnumerator *	NSString *
subpathsAtPath:	F	Cl	NSFileManager	im	NSArray *	NSString *
createDirectoryAtPath:attributes:	F	Cl	NSFileManager	im	BOOL	NSString *	NSDictionary *
contentsAtPath:	F	Cl	NSFileManager	im	NSData *	NSString *
createFileAtPath:contents:attributes:	F	Cl	NSFileManager	im	BOOL	NSString *	NSData *	NSDictionary *
pathContentOfSymbolicLinkAtPath:	F	Cl	NSFileManager	im	NSString *	NSString *
createSymbolicLinkAtPath:pathContent:	F	Cl	NSFileManager	im	BOOL	NSString *	NSString *
fileSystemAttributesAtPath:	F	Cl	NSFileManager	im	NSDictionary *	NSString *
fileSystemRepresentationWithPath:	F	Cl	NSFileManager	im	const char *	NSString *
stringWithFileSystemRepresentation:length:	F	Cl	NSFileManager	im	NSString *	const char *	unsigned
componentsToDisplayForPath:	F	Cl	NSFileManager	im	NSArray *	NSString *
fileManager:shouldProceedAfterError:	F	Cl	NSObject;NSFileManager	im	BOOL	NSFileManager *	NSDictionary *
fileManager:willProcessPath:	F	Cl	NSObject;NSFileManager	im	void	NSFileManager *	NSString *
fileAttributes	F	Cl	NSDirectoryEnumerator;NSFileManager	im	NSDictionary *
directoryAttributes	F	Cl	NSDirectoryEnumerator;NSFileManager	im	NSDictionary *
skipDescendents	F	Cl	NSDirectoryEnumerator;NSFileManager	im	void
fileSize	F	Cl	NSDictionary;NSFileManager	im	unsigned long long
fileModificationDate	F	Cl	NSDictionary;NSFileManager	im	NSDate *
fileType	F	Cl	NSDictionary;NSFileManager	im	NSString *
filePosixPermissions	F	Cl	NSDictionary;NSFileManager	im	unsigned long
fileOwnerAccountName	F	Cl	NSDictionary;NSFileManager	im	NSString *
fileGroupOwnerAccountName	F	Cl	NSDictionary;NSFileManager	im	NSString *
fileSystemNumber	F	Cl	NSDictionary;NSFileManager	im	unsigned long
fileSystemFileNumber	F	Cl	NSDictionary;NSFileManager	im	unsigned long
fileExtensionHidden	F	Cl	NSDictionary;NSFileManager	im	BOOL
fileHFSCreatorCode	F	Cl	NSDictionary;NSFileManager	im	OSType
fileHFSTypeCode	F	Cl	NSDictionary;NSFileManager	im	OSType
fileIsImmutable	F	Cl	NSDictionary;NSFileManager	im	BOOL
fileIsAppendOnly	F	Cl	NSDictionary;NSFileManager	im	BOOL
fileCreationDate	F	Cl	NSDictionary;NSFileManager	im	NSDate *
fileOwnerAccountID	F	Cl	NSDictionary;NSFileManager	im	NSNumber *
fileGroupOwnerAccountID	F	Cl	NSDictionary;NSFileManager	im	NSNumber *
stringForObjectValue:	F	Cl	NSFormatter	im	NSString *	id
attributedStringForObjectValue:withDefaultAttributes:	F	Cl	NSFormatter	im	NSAttributedString *	id	NSDictionary *
editingStringForObjectValue:	F	Cl	NSFormatter	im	NSString *	id
getObjectValue:forString:errorDescription:	F	Cl	NSFormatter	im	BOOL	id *	NSString *	NSString **
isPartialStringValid:newEditingString:errorDescription:	F	Cl	NSFormatter	im	BOOL	NSString *	NSString **	NSString **
isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:	F	Cl	NSFormatter	im	BOOL	NSString **	NSRangePointer	NSString *	NSRange	NSString **
valueWithPoint:	F	Cl	NSValue;NSGeometry	cm	NSValue *	NSPoint
valueWithSize:	F	Cl	NSValue;NSGeometry	cm	NSValue *	NSSize
valueWithRect:	F	Cl	NSValue;NSGeometry	cm	NSValue *	NSRect
pointValue	F	Cl	NSValue;NSGeometry	im	NSPoint
sizeValue	F	Cl	NSValue;NSGeometry	im	NSSize
rectValue	F	Cl	NSValue;NSGeometry	im	NSRect
encodePoint:	F	Cl	NSCoder;NSGeometry	im	void	NSPoint
decodePoint	F	Cl	NSCoder;NSGeometry	im	NSPoint
encodeSize:	F	Cl	NSCoder;NSGeometry	im	void	NSSize
decodeSize	F	Cl	NSCoder;NSGeometry	im	NSSize
encodeRect:	F	Cl	NSCoder;NSGeometry	im	void	NSRect
decodeRect	F	Cl	NSCoder;NSGeometry	im	NSRect
currentHost	F	Cl	NSHost	cm	NSHost *
hostWithName:	F	Cl	NSHost	cm	NSHost *	NSString *
hostWithAddress:	F	Cl	NSHost	cm	NSHost *	NSString *
setHostCacheEnabled:	F	Cl	NSHost	cm	void	BOOL
isHostCacheEnabled	F	Cl	NSHost	cm	BOOL
flushHostCache	F	Cl	NSHost	cm	void
isEqualToHost:	F	Cl	NSHost	im	BOOL	NSHost *
name	F	Cl	NSHost	im	NSString *
names	F	Cl	NSHost	im	NSArray *
address	F	Cl	NSHost	im	NSString *
addresses	F	Cl	NSHost	im	NSArray *
initWithProperties:	F	Cl	NSHTTPCookie	im	id	NSDictionary *
cookieWithProperties:	F	Cl	NSHTTPCookie	cm	id	NSDictionary *
requestHeaderFieldsWithCookies:	F	Cl	NSHTTPCookie	cm	NSDictionary *	NSArray *
cookiesWithResponseHeaderFields:forURL:	F	Cl	NSHTTPCookie	cm	NSArray *	NSDictionary *	NSURL *
properties	F	Cl	NSHTTPCookie	im	NSDictionary *
version	F	Cl	NSHTTPCookie	im	unsigned
name	F	Cl	NSHTTPCookie	im	NSString *
value	F	Cl	NSHTTPCookie	im	NSString *
expiresDate	F	Cl	NSHTTPCookie	im	NSDate *
isSessionOnly	F	Cl	NSHTTPCookie	im	BOOL
domain	F	Cl	NSHTTPCookie	im	NSString *
path	F	Cl	NSHTTPCookie	im	NSString *
isSecure	F	Cl	NSHTTPCookie	im	BOOL
comment	F	Cl	NSHTTPCookie	im	NSString *
commentURL	F	Cl	NSHTTPCookie	im	NSURL *
portList	F	Cl	NSHTTPCookie	im	NSArray *
sharedHTTPCookieStorage	F	Cl	NSHTTPCookieStorage	cm	NSHTTPCookieStorage *
cookies	F	Cl	NSHTTPCookieStorage	im	NSArray *
setCookie:	F	Cl	NSHTTPCookieStorage	im	void	NSHTTPCookie *
deleteCookie:	F	Cl	NSHTTPCookieStorage	im	void	NSHTTPCookie *
cookiesForURL:	F	Cl	NSHTTPCookieStorage	im	NSArray *	NSURL *
setCookies:forURL:mainDocumentURL:	F	Cl	NSHTTPCookieStorage	im	void	NSArray *	NSURL *	NSURL *
cookieAcceptPolicy	F	Cl	NSHTTPCookieStorage	im	NSHTTPCookieAcceptPolicy
setCookieAcceptPolicy:	F	Cl	NSHTTPCookieStorage	im	void	NSHTTPCookieAcceptPolicy
indexPathWithIndex:	F	Cl	NSIndexPath	cm	NSIndexPath *	unsigned int
indexPathWithIndexes:length:	F	Cl	NSIndexPath	cm	NSIndexPath *	unsigned int *	unsigned int
initWithIndex:	F	Cl	NSIndexPath	im	id	unsigned int
initWithIndexes:length:	F	Cl	NSIndexPath	im	id	unsigned int *	unsigned int
indexPathByAddingIndex:	F	Cl	NSIndexPath	im	NSIndexPath *	unsigned int
indexPathByRemovingLastIndex	F	Cl	NSIndexPath	im	NSIndexPath *
indexAtPosition:	F	Cl	NSIndexPath	im	unsigned int	unsigned int
length	F	Cl	NSIndexPath	im	unsigned int
getIndexes:	F	Cl	NSIndexPath	im	void	unsigned int *
compare:	F	Cl	NSIndexPath	im	NSComparisonResult	NSIndexPath *
indexSet	F	Cl	NSIndexSet	cm	id
indexSetWithIndex:	F	Cl	NSIndexSet	cm	id	unsigned int
indexSetWithIndexesInRange:	F	Cl	NSIndexSet	cm	id	NSRange
init	F	Cl	NSIndexSet	im	id
initWithIndex:	F	Cl	NSIndexSet	im	id	unsigned int
initWithIndexesInRange:	F	Cl	NSIndexSet	im	id	NSRange
initWithIndexSet:	F	Cl	NSIndexSet	im	id	NSIndexSet *
isEqualToIndexSet:	F	Cl	NSIndexSet	im	BOOL	NSIndexSet *
count	F	Cl	NSIndexSet	im	unsigned int
firstIndex	F	Cl	NSIndexSet	im	unsigned int
lastIndex	F	Cl	NSIndexSet	im	unsigned int
indexGreaterThanIndex:	F	Cl	NSIndexSet	im	unsigned int	unsigned int
indexLessThanIndex:	F	Cl	NSIndexSet	im	unsigned int	unsigned int
indexGreaterThanOrEqualToIndex:	F	Cl	NSIndexSet	im	unsigned int	unsigned int
indexLessThanOrEqualToIndex:	F	Cl	NSIndexSet	im	unsigned int	unsigned int
getIndexes:maxCount:inIndexRange:	F	Cl	NSIndexSet	im	unsigned int	unsigned int *	unsigned int	NSRangePointer
containsIndex:	F	Cl	NSIndexSet	im	BOOL	unsigned int
containsIndexesInRange:	F	Cl	NSIndexSet	im	BOOL	NSRange
containsIndexes:	F	Cl	NSIndexSet	im	BOOL	NSIndexSet *
intersectsIndexesInRange:	F	Cl	NSIndexSet	im	BOOL	NSRange
addIndexes:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	NSIndexSet *
removeIndexes:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	NSIndexSet *
removeAllIndexes	F	Cl	NSMutableIndexSet;NSIndexSet	im	void
addIndex:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	unsigned int
removeIndex:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	unsigned int
addIndexesInRange:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	NSRange
removeIndexesInRange:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	NSRange
shiftIndexesStartingAtIndex:by:	F	Cl	NSMutableIndexSet;NSIndexSet	im	void	unsigned int	int
invocationWithMethodSignature:	F	Cl	NSInvocation	cm	NSInvocation *	NSMethodSignature *
selector	F	Cl	NSInvocation	im	SEL
setSelector:	F	Cl	NSInvocation	im	void	SEL
target	F	Cl	NSInvocation	im	id
setTarget:	F	Cl	NSInvocation	im	void	id
retainArguments	F	Cl	NSInvocation	im	void
argumentsRetained	F	Cl	NSInvocation	im	BOOL
getReturnValue:	F	Cl	NSInvocation	im	void	void *
setReturnValue:	F	Cl	NSInvocation	im	void	void *
getArgument:atIndex:	F	Cl	NSInvocation	im	void	void *	int
setArgument:atIndex:	F	Cl	NSInvocation	im	void	void *	int
methodSignature	F	Cl	NSInvocation	im	NSMethodSignature *
invoke	F	Cl	NSInvocation	im	void
invokeWithTarget:	F	Cl	NSInvocation	im	void	id
archivedDataWithRootObject:	F	Cl	NSKeyedArchiver	cm	NSData *	id
archiveRootObject:toFile:	F	Cl	NSKeyedArchiver	cm	BOOL	id	NSString *
initForWritingWithMutableData:	F	Cl	NSKeyedArchiver	im	id	NSMutableData *
setDelegate:	F	Cl	NSKeyedArchiver	im	void	id
delegate	F	Cl	NSKeyedArchiver	im	id
setOutputFormat:	F	Cl	NSKeyedArchiver	im	void	NSPropertyListFormat
outputFormat	F	Cl	NSKeyedArchiver	im	NSPropertyListFormat
finishEncoding	F	Cl	NSKeyedArchiver	im	void
setClassName:forClass:	F	Cl	NSKeyedArchiver	cm	void	NSString *	Class
setClassName:forClass:	F	Cl	NSKeyedArchiver	im	void	NSString *	Class
classNameForClass:	F	Cl	NSKeyedArchiver	cm	NSString *	Class
classNameForClass:	F	Cl	NSKeyedArchiver	im	NSString *	Class
encodeObject:forKey:	F	Cl	NSKeyedArchiver	im	void	id	NSString *
encodeConditionalObject:forKey:	F	Cl	NSKeyedArchiver	im	void	id	NSString *
encodeBool:forKey:	F	Cl	NSKeyedArchiver	im	void	BOOL	NSString *
encodeInt:forKey:	F	Cl	NSKeyedArchiver	im	void	int	NSString *
encodeInt32:forKey:	F	Cl	NSKeyedArchiver	im	void	int32_t	NSString *
encodeInt64:forKey:	F	Cl	NSKeyedArchiver	im	void	int64_t	NSString *
encodeFloat:forKey:	F	Cl	NSKeyedArchiver	im	void	float	NSString *
encodeDouble:forKey:	F	Cl	NSKeyedArchiver	im	void	double	NSString *
encodeBytes:length:forKey:	F	Cl	NSKeyedArchiver	im	void	const uint8_t *	unsigned	NSString *
unarchiveObjectWithData:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	cm	id	NSData *
unarchiveObjectWithFile:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	cm	id	NSString *
initForReadingWithData:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	id	NSData *
setDelegate:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	void	id
delegate	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	id
finishDecoding	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	void
setClass:forClassName:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	cm	void	Class	NSString *
setClass:forClassName:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	void	Class	NSString *
classForClassName:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	cm	Class	NSString *
classForClassName:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	Class	NSString *
containsValueForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	BOOL	NSString *
decodeObjectForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	id	NSString *
decodeBoolForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	BOOL	NSString *
decodeIntForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	int	NSString *
decodeInt32ForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	int32_t	NSString *
decodeInt64ForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	int64_t	NSString *
decodeFloatForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	float	NSString *
decodeDoubleForKey:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	double	NSString *
decodeBytesForKey:returnedLength:	F	Cl	NSKeyedUnarchiver;NSKeyedArchiver	im	const uint8_t *	NSString *	unsigned *
encodePoint:forKey:	F	Cl	NSCoder;NSKeyedArchiver	im	void	NSPoint	NSString *
encodeSize:forKey:	F	Cl	NSCoder;NSKeyedArchiver	im	void	NSSize	NSString *
encodeRect:forKey:	F	Cl	NSCoder;NSKeyedArchiver	im	void	NSRect	NSString *
decodePointForKey:	F	Cl	NSCoder;NSKeyedArchiver	im	NSPoint	NSString *
decodeSizeForKey:	F	Cl	NSCoder;NSKeyedArchiver	im	NSSize	NSString *
decodeRectForKey:	F	Cl	NSCoder;NSKeyedArchiver	im	NSRect	NSString *
archiver:willEncodeObject:	F	Cl	NSObject;NSKeyedArchiver	dm	id	NSKeyedArchiver *	id
archiver:didEncodeObject:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedArchiver *	id
archiver:willReplaceObject:withObject:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedArchiver *	id	id
archiverWillFinish:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedArchiver *
archiverDidFinish:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedArchiver *
unarchiver:cannotDecodeObjectOfClassName:originalClasses:	F	Cl	NSObject;NSKeyedArchiver	dm	Class	NSKeyedUnarchiver *	NSString *	NSArray *
unarchiver:didDecodeObject:	F	Cl	NSObject;NSKeyedArchiver	dm	id	NSKeyedUnarchiver *	id
unarchiver:willReplaceObject:withObject:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedUnarchiver *	id	id
unarchiverWillFinish:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedUnarchiver *
unarchiverDidFinish:	F	Cl	NSObject;NSKeyedArchiver	dm	void	NSKeyedUnarchiver *
classForKeyedArchiver	F	Cl	NSObject;NSKeyedArchiver	dm	Class
replacementObjectForKeyedArchiver:	F	Cl	NSObject;NSKeyedArchiver	dm	id	NSKeyedArchiver *
classFallbacksForKeyedArchiver	F	Cl	NSObject;NSKeyedArchiver	dm	NSArray *
classForKeyedUnarchiver	F	Cl	NSObject;NSKeyedArchiver	dm	Class
accessInstanceVariablesDirectly	F	Cl	NSObject;NSKeyValueCoding	cm	BOOL
valueForKey:	F	Cl	NSObject;NSKeyValueCoding	im	id	NSString *
setValue:forKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
validateValue:forKey:error:	F	Cl	NSObject;NSKeyValueCoding	im	BOOL	id *	NSString *	NSError **
mutableArrayValueForKey:	F	Cl	NSObject;NSKeyValueCoding	im	NSMutableArray *	NSString *
mutableSetValueForKey:	F	Cl	NSObject;NSKeyValueCoding	im	NSMutableSet *	NSString *
valueForKeyPath:	F	Cl	NSObject;NSKeyValueCoding	im	id	NSString *
setValue:forKeyPath:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
validateValue:forKeyPath:error:	F	Cl	NSObject;NSKeyValueCoding	im	BOOL	id *	NSString *	NSError **
mutableArrayValueForKeyPath:	F	Cl	NSObject;NSKeyValueCoding	im	NSMutableArray *	NSString *
mutableSetValueForKeyPath:	F	Cl	NSObject;NSKeyValueCoding	im	NSMutableSet *	NSString *
valueForUndefinedKey:	F	Cl	NSObject;NSKeyValueCoding	im	id	NSString *
setValue:forUndefinedKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
setNilValueForKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	NSString *
dictionaryWithValuesForKeys:	F	Cl	NSObject;NSKeyValueCoding	im	NSDictionary *	NSArray *
setValuesForKeysWithDictionary:	F	Cl	NSObject;NSKeyValueCoding	im	void	NSDictionary *
valueForKey:	F	Cl	NSArray;NSKeyValueCoding	im	id	NSString *
setValue:forKey:	F	Cl	NSArray;NSKeyValueCoding	im	void	id	NSString *
valueForKey:	F	Cl	NSDictionary;NSKeyValueCoding	im	id	NSString *
setValue:forKey:	F	Cl	NSMutableDictionary;NSKeyValueCoding	im	void	id	NSString *
valueForKey:	F	Cl	NSSet;NSKeyValueCoding	im	id	NSString *
setValue:forKey:	F	Cl	NSSet;NSKeyValueCoding	im	void	id	NSString *
takeValue:forKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
takeValue:forKeyPath:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
handleQueryWithUnboundKey:	F	Cl	NSObject;NSKeyValueCoding	im	id	NSString *
handleTakeValue:forUnboundKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
unableToSetNilForKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	NSString *
valuesForKeys:	F	Cl	NSObject;NSKeyValueCoding	im	NSDictionary *	NSArray *
takeValuesFromDictionary:	F	Cl	NSObject;NSKeyValueCoding	im	void	NSDictionary *
useStoredAccessor	F	Cl	NSObject;NSKeyValueCoding	cm	BOOL
storedValueForKey:	F	Cl	NSObject;NSKeyValueCoding	im	id	NSString *
takeStoredValue:forKey:	F	Cl	NSObject;NSKeyValueCoding	im	void	id	NSString *
observeValueForKeyPath:ofObject:change:context:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSString *	id	NSDictionary *	void *
addObserver:forKeyPath:options:context:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSObject *	NSString *	NSKeyValueObservingOptions	void *
removeObserver:forKeyPath:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSObject *	NSString *
addObserver:toObjectsAtIndexes:forKeyPath:options:context:	F	Cl	NSArray;NSKeyValueObserving	im	void	NSObject *	NSIndexSet *	NSString *	NSKeyValueObservingOptions	void *
removeObserver:fromObjectsAtIndexes:forKeyPath:	F	Cl	NSArray;NSKeyValueObserving	im	void	NSObject *	NSIndexSet *	NSString *
addObserver:forKeyPath:options:context:	F	Cl	NSArray;NSKeyValueObserving	im	void	NSObject *	NSString *	NSKeyValueObservingOptions	void *
removeObserver:forKeyPath:	F	Cl	NSArray;NSKeyValueObserving	im	void	NSObject *	NSString *
addObserver:forKeyPath:options:context:	F	Cl	NSSet;NSKeyValueObserving	im	void	NSObject *	NSString *	NSKeyValueObservingOptions	void *
removeObserver:forKeyPath:	F	Cl	NSSet;NSKeyValueObserving	im	void	NSObject *	NSString *
willChangeValueForKey:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSString *
didChangeValueForKey:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSString *
willChange:valuesAtIndexes:forKey:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSKeyValueChange	NSIndexSet *	NSString *
didChange:valuesAtIndexes:forKey:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSKeyValueChange	NSIndexSet *	NSString *
willChangeValueForKey:withSetMutation:usingObjects:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSString *	NSKeyValueSetMutationKind	NSSet *
didChangeValueForKey:withSetMutation:usingObjects:	F	Cl	NSObject;NSKeyValueObserving	im	void	NSString *	NSKeyValueSetMutationKind	NSSet *
automaticallyNotifiesObserversForKey:	F	Cl	NSObject;NSKeyValueObserving	cm	BOOL	NSString *
setKeys:triggerChangeNotificationsForDependentKey:	F	Cl	NSObject;NSKeyValueObserving	cm	void	NSArray *	NSString *
setObservationInfo:	F	Cl	NSObject;NSKeyValueObserving	im	void	void *
observationInfo	F	Cl	NSObject;NSKeyValueObserving	im	void *
objectForKey:	F	Cl	NSLocale	im	id	id
displayNameForKey:value:	F	Cl	NSLocale	im	NSString *	id	id
localeIdentifier	F	Cl	NSLocale	im	NSString *
systemLocale	F	Cl	NSLocale	cm	id
currentLocale	F	Cl	NSLocale	cm	id
initWithLocaleIdentifier:	F	Cl	NSLocale	im	id	NSString *
availableLocaleIdentifiers	F	Cl	NSLocale	cm	NSArray *
ISOLanguageCodes	F	Cl	NSLocale	cm	NSArray *
ISOCountryCodes	F	Cl	NSLocale	cm	NSArray *
ISOCurrencyCodes	F	Cl	NSLocale	cm	NSArray *
componentsFromLocaleIdentifier:	F	Cl	NSLocale	cm	NSDictionary *	NSString *
localeIdentifierFromComponents:	F	Cl	NSLocale	cm	NSString *	NSDictionary *
canonicalLocaleIdentifierFromString:	F	Cl	NSLocale	cm	NSString *	NSString *
lock	F	Pr	NSLocking;NSLock	im	void
unlock	F	Pr	NSLocking;NSLock	im	void
tryLock	F	Cl	NSLock	im	BOOL
lockBeforeDate:	F	Cl	NSLock	im	BOOL	NSDate *
initWithCondition:	F	Cl	NSConditionLock;NSLock	im	id	int
condition	F	Cl	NSConditionLock;NSLock	im	int
lockWhenCondition:	F	Cl	NSConditionLock;NSLock	im	void	int
tryLock	F	Cl	NSConditionLock;NSLock	im	BOOL
tryLockWhenCondition:	F	Cl	NSConditionLock;NSLock	im	BOOL	int
unlockWithCondition:	F	Cl	NSConditionLock;NSLock	im	void	int
lockBeforeDate:	F	Cl	NSConditionLock;NSLock	im	BOOL	NSDate *
lockWhenCondition:beforeDate:	F	Cl	NSConditionLock;NSLock	im	BOOL	int	NSDate *
tryLock	F	Cl	NSRecursiveLock;NSLock	im	BOOL
lockBeforeDate:	F	Cl	NSRecursiveLock;NSLock	im	BOOL	NSDate *
init	F	Cl	NSMetadataQuery;NSMetadata	im	id
delegate	F	Cl	NSMetadataQuery;NSMetadata	im	id
setDelegate:	F	Cl	NSMetadataQuery;NSMetadata	im	void	id
predicate	F	Cl	NSMetadataQuery;NSMetadata	im	NSPredicate *
setPredicate:	F	Cl	NSMetadataQuery;NSMetadata	im	void	NSPredicate *
sortDescriptors	F	Cl	NSMetadataQuery;NSMetadata	im	NSArray *
setSortDescriptors:	F	Cl	NSMetadataQuery;NSMetadata	im	void	NSArray *
valueListAttributes	F	Cl	NSMetadataQuery;NSMetadata	im	NSArray *
setValueListAttributes:	F	Cl	NSMetadataQuery;NSMetadata	im	void	NSArray *
groupingAttributes	F	Cl	NSMetadataQuery;NSMetadata	im	NSArray *
setGroupingAttributes:	F	Cl	NSMetadataQuery;NSMetadata	im	void	NSArray *
notificationBatchingInterval	F	Cl	NSMetadataQuery;NSMetadata	im	NSTimeInterval
setNotificationBatchingInterval:	F	Cl	NSMetadataQuery;NSMetadata	im	void	NSTimeInterval
searchScopes	F	Cl	NSMetadataQuery;NSMetadata	im	NSArray *
setSearchScopes:	F	Cl	NSMetadataQuery;NSMetadata	im	void	NSArray *
startQuery	F	Cl	NSMetadataQuery;NSMetadata	im	BOOL
stopQuery	F	Cl	NSMetadataQuery;NSMetadata	im	void
isStarted	F	Cl	NSMetadataQuery;NSMetadata	im	BOOL
isGathering	F	Cl	NSMetadataQuery;NSMetadata	im	BOOL
isStopped	F	Cl	NSMetadataQuery;NSMetadata	im	BOOL
disableUpdates	F	Cl	NSMetadataQuery;NSMetadata	im	void
enableUpdates	F	Cl	NSMetadataQuery;NSMetadata	im	void
resultCount	F	Cl	NSMetadataQuery;NSMetadata	im	unsigned
resultAtIndex:	F	Cl	NSMetadataQuery;NSMetadata	im	id	unsigned
results	F	Cl	NSMetadataQuery;NSMetadata	im	NSArray *
indexOfResult:	F	Cl	NSMetadataQuery;NSMetadata	im	unsigned	id
valueLists	F	Cl	NSMetadataQuery;NSMetadata	im	NSDictionary *
groupedResults	F	Cl	NSMetadataQuery;NSMetadata	im	NSArray *
valueOfAttribute:forResultAtIndex:	F	Cl	NSMetadataQuery;NSMetadata	im	id	NSString *	unsigned
metadataQuery:replacementObjectForResultObject:	F	Cl	NSObject;NSMetadata	dm	id	NSMetadataQuery *	NSMetadataItem *
metadataQuery:replacementValueForAttribute:value:	F	Cl	NSObject;NSMetadata	dm	id	NSMetadataQuery *	NSString *	id
valueForAttribute:	F	Cl	NSMetadataItem;NSMetadata	dm	id	NSString *
valuesForAttributes:	F	Cl	NSMetadataItem;NSMetadata	dm	NSDictionary *	NSArray *
attributes	F	Cl	NSMetadataItem;NSMetadata	dm	NSArray *
attribute	F	Cl	NSMetadataQueryAttributeValueTuple;NSMetadata	dm	NSString *
value	F	Cl	NSMetadataQueryAttributeValueTuple;NSMetadata	dm	id
count	F	Cl	NSMetadataQueryAttributeValueTuple;NSMetadata	dm	unsigned
attribute	F	Cl	NSMetadataQueryResultGroup;NSMetadata	dm	NSString *
value	F	Cl	NSMetadataQueryResultGroup;NSMetadata	dm	id
subgroups	F	Cl	NSMetadataQueryResultGroup;NSMetadata	dm	NSArray *
resultCount	F	Cl	NSMetadataQueryResultGroup;NSMetadata	dm	unsigned
resultAtIndex:	F	Cl	NSMetadataQueryResultGroup;NSMetadata	dm	id	unsigned
results	F	Cl	NSMetadataQueryResultGroup;NSMetadata	dm	NSArray *
numberOfArguments	F	Cl	NSMethodSignature	im	unsigned
getArgumentTypeAtIndex:	F	Cl	NSMethodSignature	im	const char *	unsigned
frameLength	F	Cl	NSMethodSignature	im	unsigned
isOneway	F	Cl	NSMethodSignature	im	BOOL
methodReturnType	F	Cl	NSMethodSignature	im	const char *
methodReturnLength	F	Cl	NSMethodSignature	im	unsigned
initWithDomain:type:name:port:	F	Cl	NSNetService;NSNetServices	im	id	NSString *	NSString *	NSString *	int
initWithDomain:type:name:	F	Cl	NSNetService;NSNetServices	im	id	NSString *	NSString *	NSString *
delegate	F	Cl	NSNetService;NSNetServices	im	id
setDelegate:	F	Cl	NSNetService;NSNetServices	im	void	id
scheduleInRunLoop:forMode:	F	Cl	NSNetService;NSNetServices	im	void	NSRunLoop *	NSString *
removeFromRunLoop:forMode:	F	Cl	NSNetService;NSNetServices	im	void	NSRunLoop *	NSString *
domain	F	Cl	NSNetService;NSNetServices	im	NSString *
type	F	Cl	NSNetService;NSNetServices	im	NSString *
name	F	Cl	NSNetService;NSNetServices	im	NSString *
addresses	F	Cl	NSNetService;NSNetServices	im	NSArray *
publish	F	Cl	NSNetService;NSNetServices	im	void
stop	F	Cl	NSNetService;NSNetServices	im	void
getInputStream:outputStream:	F	Cl	NSNetService;NSNetServices	im	BOOL	NSInputStream **	NSOutputStream **
resolveWithTimeout:	F	Cl	NSNetService;NSNetServices	im	void	NSTimeInterval
setTXTRecordData:	F	Cl	NSNetService;NSNetServices	im	BOOL	NSData *
TXTRecordData	F	Cl	NSNetService;NSNetServices	im	NSData *
startMonitoring	F	Cl	NSNetService;NSNetServices	im	void
stopMonitoring	F	Cl	NSNetService;NSNetServices	im	void
hostName	F	Cl	NSNetService;NSNetServices	im	NSString *
dictionaryFromTXTRecordData:	F	Cl	NSNetService;NSNetServices	cm	NSDictionary *	NSData *
dataFromTXTRecordDictionary:	F	Cl	NSNetService;NSNetServices	cm	NSData *	NSDictionary *
protocolSpecificInformation	F	Cl	NSNetService;NSNetServices	im	NSString *
setProtocolSpecificInformation:	F	Cl	NSNetService;NSNetServices	im	void	NSString *
resolve	F	Cl	NSNetService;NSNetServices	im	void
init	F	Cl	NSNetServiceBrowser;NSNetServices	im	id
delegate	F	Cl	NSNetServiceBrowser;NSNetServices	im	id
setDelegate:	F	Cl	NSNetServiceBrowser;NSNetServices	im	void	id
scheduleInRunLoop:forMode:	F	Cl	NSNetServiceBrowser;NSNetServices	im	void	NSRunLoop *	NSString *
removeFromRunLoop:forMode:	F	Cl	NSNetServiceBrowser;NSNetServices	im	void	NSRunLoop *	NSString *
searchForBrowsableDomains	F	Cl	NSNetServiceBrowser;NSNetServices	im	void
searchForRegistrationDomains	F	Cl	NSNetServiceBrowser;NSNetServices	im	void
searchForServicesOfType:inDomain:	F	Cl	NSNetServiceBrowser;NSNetServices	im	void	NSString *	NSString *
stop	F	Cl	NSNetServiceBrowser;NSNetServices	im	void
searchForAllDomains	F	Cl	NSNetServiceBrowser;NSNetServices	im	void
netServiceWillPublish:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *
netServiceWillResolve:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *
netService:didNotPublish:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *	NSDictionary *
netServiceDidResolveAddress:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *
netService:didNotResolve:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *	NSDictionary *
netServiceDidStop:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *
netService:didUpdateTXTRecordData:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *	NSData *
netServiceDidPublish:	F	Cl	NSObject;NSNetServices	dm	void	NSNetService *
netServiceBrowserWillSearch:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *
netServiceBrowser:didFindDomain:moreComing:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *	NSString *	BOOL
netServiceBrowser:didFindService:moreComing:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *	NSNetService *	BOOL
netServiceBrowser:didNotSearch:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *	NSDictionary *
netServiceBrowserDidStopSearch:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *
netServiceBrowser:didRemoveDomain:moreComing:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *	NSString *	BOOL
netServiceBrowser:didRemoveService:moreComing:	F	Cl	NSObject;NSNetServices	dm	void	NSNetServiceBrowser *	NSNetService *	BOOL
name	F	Cl	NSNotification	im	NSString *
object	F	Cl	NSNotification	im	id
userInfo	F	Cl	NSNotification	im	NSDictionary *
notificationWithName:object:	F	Cl	NSNotification	cm	id	NSString *	id
notificationWithName:object:userInfo:	F	Cl	NSNotification	cm	id	NSString *	id	NSDictionary *
defaultCenter	F	Cl	NSNotificationCenter;NSNotification	cm	id
addObserver:selector:name:object:	F	Cl	NSNotificationCenter;NSNotification	im	void	id	SEL	NSString *	id
postNotification:	F	Cl	NSNotificationCenter;NSNotification	im	void	NSNotification *
postNotificationName:object:	F	Cl	NSNotificationCenter;NSNotification	im	void	NSString *	id
postNotificationName:object:userInfo:	F	Cl	NSNotificationCenter;NSNotification	im	void	NSString *	id	NSDictionary *
removeObserver:	F	Cl	NSNotificationCenter;NSNotification	im	void	id
removeObserver:name:object:	F	Cl	NSNotificationCenter;NSNotification	im	void	id	NSString *	id
defaultQueue	F	Cl	NSNotificationQueue	cm	NSNotificationQueue *
initWithNotificationCenter:	F	Cl	NSNotificationQueue	im	id	NSNotificationCenter *
enqueueNotification:postingStyle:	F	Cl	NSNotificationQueue	im	void	NSNotification *	NSPostingStyle
enqueueNotification:postingStyle:coalesceMask:forModes:	F	Cl	NSNotificationQueue	im	void	NSNotification *	NSPostingStyle	unsigned	NSArray *
dequeueNotificationsMatching:coalesceMask:	F	Cl	NSNotificationQueue	im	void	NSNotification *	unsigned
null	F	Cl	NSNull	cm	NSNull *
init	F	Cl	NSNumberFormatter	im	id
getObjectValue:forString:range:error:	F	Cl	NSNumberFormatter	im	BOOL	out id *	NSString *	inout NSRange *	out NSError **
stringFromNumber:	F	Cl	NSNumberFormatter	im	NSString *	NSNumber *
numberFromString:	F	Cl	NSNumberFormatter	im	NSNumber *	NSString *
numberStyle	F	Cl	NSNumberFormatter	im	NSNumberFormatterStyle
setNumberStyle:	F	Cl	NSNumberFormatter	im	void	NSNumberFormatterStyle
locale	F	Cl	NSNumberFormatter	im	NSLocale *
setLocale:	F	Cl	NSNumberFormatter	im	void	NSLocale *
generatesDecimalNumbers	F	Cl	NSNumberFormatter	im	BOOL
setGeneratesDecimalNumbers:	F	Cl	NSNumberFormatter	im	void	BOOL
formatterBehavior	F	Cl	NSNumberFormatter	im	NSNumberFormatterBehavior
setFormatterBehavior:	F	Cl	NSNumberFormatter	im	void	NSNumberFormatterBehavior
defaultFormatterBehavior	F	Cl	NSNumberFormatter	cm	NSNumberFormatterBehavior
setDefaultFormatterBehavior:	F	Cl	NSNumberFormatter	cm	void	NSNumberFormatterBehavior
negativeFormat	F	Cl	NSNumberFormatter	im	NSString *
setNegativeFormat:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForNegativeValues	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForNegativeValues:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
positiveFormat	F	Cl	NSNumberFormatter	im	NSString *
setPositiveFormat:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForPositiveValues	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForPositiveValues:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
allowsFloats	F	Cl	NSNumberFormatter	im	BOOL
setAllowsFloats:	F	Cl	NSNumberFormatter	im	void	BOOL
decimalSeparator	F	Cl	NSNumberFormatter	im	NSString *
setDecimalSeparator:	F	Cl	NSNumberFormatter	im	void	NSString *
alwaysShowsDecimalSeparator	F	Cl	NSNumberFormatter	im	BOOL
setAlwaysShowsDecimalSeparator:	F	Cl	NSNumberFormatter	im	void	BOOL
currencyDecimalSeparator	F	Cl	NSNumberFormatter	im	NSString *
setCurrencyDecimalSeparator:	F	Cl	NSNumberFormatter	im	void	NSString *
usesGroupingSeparator	F	Cl	NSNumberFormatter	im	BOOL
setUsesGroupingSeparator:	F	Cl	NSNumberFormatter	im	void	BOOL
groupingSeparator	F	Cl	NSNumberFormatter	im	NSString *
setGroupingSeparator:	F	Cl	NSNumberFormatter	im	void	NSString *
zeroSymbol	F	Cl	NSNumberFormatter	im	NSString *
setZeroSymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForZero	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForZero:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
nilSymbol	F	Cl	NSNumberFormatter	im	NSString *
setNilSymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForNil	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForNil:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
notANumberSymbol	F	Cl	NSNumberFormatter	im	NSString *
setNotANumberSymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForNotANumber	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForNotANumber:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
positiveInfinitySymbol	F	Cl	NSNumberFormatter	im	NSString *
setPositiveInfinitySymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForPositiveInfinity	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForPositiveInfinity:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
negativeInfinitySymbol	F	Cl	NSNumberFormatter	im	NSString *
setNegativeInfinitySymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
textAttributesForNegativeInfinity	F	Cl	NSNumberFormatter	im	NSDictionary *
setTextAttributesForNegativeInfinity:	F	Cl	NSNumberFormatter	im	void	NSDictionary *
positivePrefix	F	Cl	NSNumberFormatter	im	NSString *
setPositivePrefix:	F	Cl	NSNumberFormatter	im	void	NSString *
positiveSuffix	F	Cl	NSNumberFormatter	im	NSString *
setPositiveSuffix:	F	Cl	NSNumberFormatter	im	void	NSString *
negativePrefix	F	Cl	NSNumberFormatter	im	NSString *
setNegativePrefix:	F	Cl	NSNumberFormatter	im	void	NSString *
negativeSuffix	F	Cl	NSNumberFormatter	im	NSString *
setNegativeSuffix:	F	Cl	NSNumberFormatter	im	void	NSString *
currencyCode	F	Cl	NSNumberFormatter	im	NSString *
setCurrencyCode:	F	Cl	NSNumberFormatter	im	void	NSString *
currencySymbol	F	Cl	NSNumberFormatter	im	NSString *
setCurrencySymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
internationalCurrencySymbol	F	Cl	NSNumberFormatter	im	NSString *
setInternationalCurrencySymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
percentSymbol	F	Cl	NSNumberFormatter	im	NSString *
setPercentSymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
perMillSymbol	F	Cl	NSNumberFormatter	im	NSString *
setPerMillSymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
minusSign	F	Cl	NSNumberFormatter	im	NSString *
setMinusSign:	F	Cl	NSNumberFormatter	im	void	NSString *
plusSign	F	Cl	NSNumberFormatter	im	NSString *
setPlusSign:	F	Cl	NSNumberFormatter	im	void	NSString *
exponentSymbol	F	Cl	NSNumberFormatter	im	NSString *
setExponentSymbol:	F	Cl	NSNumberFormatter	im	void	NSString *
groupingSize	F	Cl	NSNumberFormatter	im	unsigned int
setGroupingSize:	F	Cl	NSNumberFormatter	im	void	unsigned int
secondaryGroupingSize	F	Cl	NSNumberFormatter	im	unsigned int
setSecondaryGroupingSize:	F	Cl	NSNumberFormatter	im	void	unsigned int
multiplier	F	Cl	NSNumberFormatter	im	NSNumber *
setMultiplier:	F	Cl	NSNumberFormatter	im	void	NSNumber *
formatWidth	F	Cl	NSNumberFormatter	im	unsigned int
setFormatWidth:	F	Cl	NSNumberFormatter	im	void	unsigned int
paddingCharacter	F	Cl	NSNumberFormatter	im	NSString *
setPaddingCharacter:	F	Cl	NSNumberFormatter	im	void	NSString *
paddingPosition	F	Cl	NSNumberFormatter	im	NSNumberFormatterPadPosition
setPaddingPosition:	F	Cl	NSNumberFormatter	im	void	NSNumberFormatterPadPosition
roundingMode	F	Cl	NSNumberFormatter	im	NSNumberFormatterRoundingMode
setRoundingMode:	F	Cl	NSNumberFormatter	im	void	NSNumberFormatterRoundingMode
roundingIncrement	F	Cl	NSNumberFormatter	im	NSNumber *
setRoundingIncrement:	F	Cl	NSNumberFormatter	im	void	NSNumber *
minimumIntegerDigits	F	Cl	NSNumberFormatter	im	unsigned int
setMinimumIntegerDigits:	F	Cl	NSNumberFormatter	im	void	unsigned int
maximumIntegerDigits	F	Cl	NSNumberFormatter	im	unsigned int
setMaximumIntegerDigits:	F	Cl	NSNumberFormatter	im	void	unsigned int
minimumFractionDigits	F	Cl	NSNumberFormatter	im	unsigned int
setMinimumFractionDigits:	F	Cl	NSNumberFormatter	im	void	unsigned int
maximumFractionDigits	F	Cl	NSNumberFormatter	im	unsigned int
setMaximumFractionDigits:	F	Cl	NSNumberFormatter	im	void	unsigned int
minimum	F	Cl	NSNumberFormatter	im	NSNumber *
setMinimum:	F	Cl	NSNumberFormatter	im	void	NSNumber *
maximum	F	Cl	NSNumberFormatter	im	NSNumber *
setMaximum:	F	Cl	NSNumberFormatter	im	void	NSNumber *
hasThousandSeparators	F	Cl	NSNumberFormatter	im	BOOL
setHasThousandSeparators:	F	Cl	NSNumberFormatter	im	void	BOOL
thousandSeparator	F	Cl	NSNumberFormatter	im	NSString *
setThousandSeparator:	F	Cl	NSNumberFormatter	im	void	NSString *
localizesFormat	F	Cl	NSNumberFormatter	im	BOOL
setLocalizesFormat:	F	Cl	NSNumberFormatter	im	void	BOOL
format	F	Cl	NSNumberFormatter	im	NSString *
setFormat:	F	Cl	NSNumberFormatter	im	void	NSString *
attributedStringForZero	F	Cl	NSNumberFormatter	im	NSAttributedString *
setAttributedStringForZero:	F	Cl	NSNumberFormatter	im	void	NSAttributedString *
attributedStringForNil	F	Cl	NSNumberFormatter	im	NSAttributedString *
setAttributedStringForNil:	F	Cl	NSNumberFormatter	im	void	NSAttributedString *
attributedStringForNotANumber	F	Cl	NSNumberFormatter	im	NSAttributedString *
setAttributedStringForNotANumber:	F	Cl	NSNumberFormatter	im	void	NSAttributedString *
roundingBehavior	F	Cl	NSNumberFormatter	im	NSDecimalNumberHandler *
setRoundingBehavior:	F	Cl	NSNumberFormatter	im	void	NSDecimalNumberHandler *
minimum	F	Cl	NSNumberFormatter	im	NSDecimalNumber *
setMinimum:	F	Cl	NSNumberFormatter	im	void	NSDecimalNumber *
maximum	F	Cl	NSNumberFormatter	im	NSDecimalNumber *
setMaximum:	F	Cl	NSNumberFormatter	im	void	NSDecimalNumber *
isEqual:	F	Pr	NSObject	im	BOOL	id
hash	F	Pr	NSObject	im	unsigned
superclass	F	Pr	NSObject	im	Class
class	F	Pr	NSObject	im	Class
self	F	Pr	NSObject	im	id
zone	F	Pr	NSObject	im	NSZone *
performSelector:	F	Pr	NSObject	im	id	SEL
performSelector:withObject:	F	Pr	NSObject	im	id	SEL	id
performSelector:withObject:withObject:	F	Pr	NSObject	im	id	SEL	id	id
isProxy	F	Pr	NSObject	im	BOOL
isKindOfClass:	F	Pr	NSObject	im	BOOL	Class
isMemberOfClass:	F	Pr	NSObject	im	BOOL	Class
conformsToProtocol:	F	Pr	NSObject	im	BOOL	Protocol *
respondsToSelector:	F	Pr	NSObject	im	BOOL	SEL
retain	F	Pr	NSObject	im	id
release	F	Pr	NSObject	im	oneway void
autorelease	F	Pr	NSObject	im	id
retainCount	F	Pr	NSObject	im	unsigned
description	F	Pr	NSObject	im	NSString *
copyWithZone:	F	Pr	NSCopying;NSObject	im	id	NSZone *
mutableCopyWithZone:	F	Pr	NSMutableCopying;NSObject	im	id	NSZone *
encodeWithCoder:	F	Pr	NSCoding;NSObject	im	void	NSCoder *
initWithCoder:	F	Pr	NSCoding;NSObject	im	id	NSCoder *
load	F	Cl	NSObject	cm	void
initialize	F	Cl	NSObject	cm	void
init	F	Cl	NSObject	im	id
new	F	Cl	NSObject	cm	id
allocWithZone:	F	Cl	NSObject	cm	id	NSZone *
alloc	F	Cl	NSObject	cm	id
dealloc	F	Cl	NSObject	im	void
finalize	F	Cl	NSObject	im	void
copy	F	Cl	NSObject	im	id
mutableCopy	F	Cl	NSObject	im	id
copyWithZone:	F	Cl	NSObject	cm	id	NSZone *
mutableCopyWithZone:	F	Cl	NSObject	cm	id	NSZone *
superclass	F	Cl	NSObject	cm	Class
class	F	Cl	NSObject	cm	Class
poseAsClass:	F	Cl	NSObject	cm	void	Class
instancesRespondToSelector:	F	Cl	NSObject	cm	BOOL	SEL
conformsToProtocol:	F	Cl	NSObject	cm	BOOL	Protocol *
methodForSelector:	F	Cl	NSObject	im	IMP	SEL
instanceMethodForSelector:	F	Cl	NSObject	cm	IMP	SEL
version	F	Cl	NSObject	cm	int
setVersion:	F	Cl	NSObject	cm	void	int
doesNotRecognizeSelector:	F	Cl	NSObject	im	void	SEL
forwardInvocation:	F	Cl	NSObject	im	void	NSInvocation *
methodSignatureForSelector:	F	Cl	NSObject	im	NSMethodSignature *	SEL
instanceMethodSignatureForSelector:	F	Cl	NSObject	cm	NSMethodSignature *	SEL
isSubclassOfClass:	F	Cl	NSObject	cm	BOOL	Class
description	F	Cl	NSObject	cm	NSString *
classForCoder	F	Cl	NSObject	im	Class
replacementObjectForCoder:	F	Cl	NSObject	im	id	NSCoder *
awakeAfterUsingCoder:	F	Cl	NSObject	im	id	NSCoder *
scriptingProperties	F	Cl	NSObject;NSObjectScripting	im	NSDictionary *
setScriptingProperties:	F	Cl	NSObject;NSObjectScripting	im	void	NSDictionary *
pathWithComponents:	F	Cl	NSString;NSPathUtilities	cm	NSString *	NSArray *
pathComponents	F	Cl	NSString;NSPathUtilities	im	NSArray *
isAbsolutePath	F	Cl	NSString;NSPathUtilities	im	BOOL
lastPathComponent	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByDeletingLastPathComponent	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByAppendingPathComponent:	F	Cl	NSString;NSPathUtilities	im	NSString *	NSString *
pathExtension	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByDeletingPathExtension	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByAppendingPathExtension:	F	Cl	NSString;NSPathUtilities	im	NSString *	NSString *
stringByAbbreviatingWithTildeInPath	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByExpandingTildeInPath	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByStandardizingPath	F	Cl	NSString;NSPathUtilities	im	NSString *
stringByResolvingSymlinksInPath	F	Cl	NSString;NSPathUtilities	im	NSString *
stringsByAppendingPaths:	F	Cl	NSString;NSPathUtilities	im	NSArray *	NSArray *
completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:	F	Cl	NSString;NSPathUtilities	im	unsigned	NSString **	BOOL	NSArray **	NSArray *
fileSystemRepresentation	F	Cl	NSString;NSPathUtilities	im	const char *
getFileSystemRepresentation:maxLength:	F	Cl	NSString;NSPathUtilities	im	BOOL	char *	unsigned
pathsMatchingExtensions:	F	Cl	NSArray;NSPathUtilities	im	NSArray *	NSArray *
allocWithZone:	F	Cl	NSPort	cm	id	NSZone *
port	F	Cl	NSPort	cm	NSPort *
invalidate	F	Cl	NSPort	im	void
isValid	F	Cl	NSPort	im	BOOL
setDelegate:	F	Cl	NSPort	im	void	id
delegate	F	Cl	NSPort	im	id
scheduleInRunLoop:forMode:	F	Cl	NSPort	im	void	NSRunLoop *	NSString *
removeFromRunLoop:forMode:	F	Cl	NSPort	im	void	NSRunLoop *	NSString *
reservedSpaceLength	F	Cl	NSPort	im	unsigned
sendBeforeDate:components:from:reserved:	F	Cl	NSPort	im	BOOL	NSDate *	NSMutableArray *	NSPort *	unsigned
sendBeforeDate:msgid:components:from:reserved:	F	Cl	NSPort	im	BOOL	NSDate *	unsigned	NSMutableArray *	NSPort *	unsigned
addConnection:toRunLoop:forMode:	F	Cl	NSPort	im	void	NSConnection *	NSRunLoop *	NSString *
removeConnection:fromRunLoop:forMode:	F	Cl	NSPort	im	void	NSConnection *	NSRunLoop *	NSString *
handlePortMessage:	F	Cl	NSObject;NSPort	dm	void	NSPortMessage *
portWithMachPort:	F	Cl	NSMachPort;NSPort	dm	NSPort *	int
initWithMachPort:	F	Cl	NSMachPort;NSPort	dm	id	int
machPort	F	Cl	NSMachPort;NSPort	dm	int
scheduleInRunLoop:forMode:	F	Cl	NSMachPort;NSPort	dm	void	NSRunLoop *	NSString *
removeFromRunLoop:forMode:	F	Cl	NSMachPort;NSPort	dm	void	NSRunLoop *	NSString *
handleMachMessage:	F	Cl	NSObject;NSPort	dm	void	void *
init	F	Cl	NSSocketPort;NSPort	dm	id
initWithTCPPort:	F	Cl	NSSocketPort;NSPort	dm	id	unsigned short
initWithProtocolFamily:socketType:protocol:address:	F	Cl	NSSocketPort;NSPort	dm	id	int	int	int	NSData *
initWithProtocolFamily:socketType:protocol:socket:	F	Cl	NSSocketPort;NSPort	dm	id	int	int	int	NSSocketNativeHandle
initRemoteWithTCPPort:host:	F	Cl	NSSocketPort;NSPort	dm	id	unsigned short	NSString *
initRemoteWithProtocolFamily:socketType:protocol:address:	F	Cl	NSSocketPort;NSPort	dm	id	int	int	int	NSData *
protocolFamily	F	Cl	NSSocketPort;NSPort	dm	int
socketType	F	Cl	NSSocketPort;NSPort	dm	int
protocol	F	Cl	NSSocketPort;NSPort	dm	int
address	F	Cl	NSSocketPort;NSPort	dm	NSData *
socket	F	Cl	NSSocketPort;NSPort	dm	NSSocketNativeHandle
isBycopy	F	Cl	NSPortCoder	im	BOOL
isByref	F	Cl	NSPortCoder	im	BOOL
connection	F	Cl	NSPortCoder	im	NSConnection *
encodePortObject:	F	Cl	NSPortCoder	im	void	NSPort *
decodePortObject	F	Cl	NSPortCoder	im	NSPort *
portCoderWithReceivePort:sendPort:components:	F	Cl	NSPortCoder	cm	id	NSPort *	NSPort *	NSArray *
initWithReceivePort:sendPort:components:	F	Cl	NSPortCoder	im	id	NSPort *	NSPort *	NSArray *
dispatch	F	Cl	NSPortCoder	im	void
classForPortCoder	F	Cl	NSObject;NSPortCoder	im	Class
replacementObjectForPortCoder:	F	Cl	NSObject;NSPortCoder	im	id	NSPortCoder *
initWithSendPort:receivePort:components:	F	Cl	NSPortMessage	im	id	NSPort *	NSPort *	NSArray *
components	F	Cl	NSPortMessage	im	NSArray *
receivePort	F	Cl	NSPortMessage	im	NSPort *
sendPort	F	Cl	NSPortMessage	im	NSPort *
sendBeforeDate:	F	Cl	NSPortMessage	im	BOOL	NSDate *
msgid	F	Cl	NSPortMessage	im	unsigned
setMsgid:	F	Cl	NSPortMessage	im	void	unsigned
systemDefaultPortNameServer	F	Cl	NSPortNameServer	cm	NSPortNameServer *
portForName:	F	Cl	NSPortNameServer	im	NSPort *	NSString *
portForName:host:	F	Cl	NSPortNameServer	im	NSPort *	NSString *	NSString *
registerPort:name:	F	Cl	NSPortNameServer	im	BOOL	NSPort *	NSString *
removePortForName:	F	Cl	NSPortNameServer	im	BOOL	NSString *
sharedInstance	F	Cl	NSMachBootstrapServer;NSPortNameServer	cm	id
portForName:	F	Cl	NSMachBootstrapServer;NSPortNameServer	im	NSPort *	NSString *
portForName:host:	F	Cl	NSMachBootstrapServer;NSPortNameServer	im	NSPort *	NSString *	NSString *
registerPort:name:	F	Cl	NSMachBootstrapServer;NSPortNameServer	im	BOOL	NSPort *	NSString *
sharedInstance	F	Cl	NSMessagePortNameServer;NSPortNameServer	cm	id
portForName:	F	Cl	NSMessagePortNameServer;NSPortNameServer	im	NSPort *	NSString *
portForName:host:	F	Cl	NSMessagePortNameServer;NSPortNameServer	im	NSPort *	NSString *	NSString *
sharedInstance	F	Cl	NSSocketPortNameServer;NSPortNameServer	cm	id
portForName:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	NSPort *	NSString *
portForName:host:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	NSPort *	NSString *	NSString *
registerPort:name:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	BOOL	NSPort *	NSString *
removePortForName:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	BOOL	NSString *
portForName:host:nameServerPortNumber:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	NSPort *	NSString *	NSString *	unsigned short
registerPort:name:nameServerPortNumber:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	BOOL	NSPort *	NSString *	unsigned short
setDefaultNameServerPortNumber:	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	void	unsigned short
defaultNameServerPortNumber	F	Cl	NSSocketPortNameServer;NSPortNameServer	im	unsigned short
predicateWithFormat:argumentArray:	F	Cl	NSPredicate	cm	NSPredicate *	NSString *	NSArray *
predicateWithFormat:	F	Cl	NSPredicate	cm	NSPredicate *	NSString *
predicateWithFormat:arguments:	F	Cl	NSPredicate	cm	NSPredicate *	NSString *	va_list
predicateWithValue:	F	Cl	NSPredicate	cm	NSPredicate *	BOOL
predicateWithSubstitutionVariables:	F	Cl	NSPredicate	im	NSPredicate *	NSDictionary *
evaluateWithObject:	F	Cl	NSPredicate	im	BOOL	id
predicateFormat	F	Cl	NSPredicate	im	NSString *
filteredArrayUsingPredicate:	F	Cl	NSArray;NSPredicate	im	NSArray *	NSPredicate *
filterUsingPredicate:	F	Cl	NSMutableArray;NSPredicate	im	void	NSPredicate *
processInfo	F	Cl	NSProcessInfo	cm	NSProcessInfo *
environment	F	Cl	NSProcessInfo	im	NSDictionary *
arguments	F	Cl	NSProcessInfo	im	NSArray *
hostName	F	Cl	NSProcessInfo	im	NSString *
processName	F	Cl	NSProcessInfo	im	NSString *
processIdentifier	F	Cl	NSProcessInfo	im	int
setProcessName:	F	Cl	NSProcessInfo	im	void	NSString *
globallyUniqueString	F	Cl	NSProcessInfo	im	NSString *
operatingSystem	F	Cl	NSProcessInfo	im	unsigned int
operatingSystemName	F	Cl	NSProcessInfo	im	NSString *
operatingSystemVersionString	F	Cl	NSProcessInfo	im	NSString *
propertyList:isValidForFormat:	F	Cl	NSPropertyListSerialization;NSPropertyList	cm	BOOL	id	NSPropertyListFormat
dataFromPropertyList:format:errorDescription:	F	Cl	NSPropertyListSerialization;NSPropertyList	cm	NSData *	id	NSPropertyListFormat	NSString **
propertyListFromData:mutabilityOption:format:errorDescription:	F	Cl	NSPropertyListSerialization;NSPropertyList	cm	id	NSData *	NSPropertyListMutabilityOptions	NSPropertyListFormat *	NSString **
protocol	F	Cl	NSProtocolChecker	im	Protocol *
target	F	Cl	NSProtocolChecker	im	NSObject *
protocolCheckerWithTarget:protocol:	F	Cl	NSProtocolChecker	cm	id	NSObject *	Protocol *
initWithTarget:protocol:	F	Cl	NSProtocolChecker	im	id	NSObject *	Protocol *
alloc	F	Cl	NSProxy	cm	id
allocWithZone:	F	Cl	NSProxy	cm	id	NSZone *
class	F	Cl	NSProxy	cm	Class
forwardInvocation:	F	Cl	NSProxy	im	void	NSInvocation *
methodSignatureForSelector:	F	Cl	NSProxy	im	NSMethodSignature *	SEL
dealloc	F	Cl	NSProxy	im	void
description	F	Cl	NSProxy	im	NSString *
respondsToSelector:	F	Cl	NSProxy	cm	BOOL	SEL
valueWithRange:	F	Cl	NSValue;NSRange	cm	NSValue *	NSRange
rangeValue	F	Cl	NSValue;NSRange	im	NSRange
currentRunLoop	F	Cl	NSRunLoop	cm	NSRunLoop *
currentMode	F	Cl	NSRunLoop	im	NSString *
getCFRunLoop	F	Cl	NSRunLoop	im	CFRunLoopRef
addTimer:forMode:	F	Cl	NSRunLoop	im	void	NSTimer *	NSString *
addPort:forMode:	F	Cl	NSRunLoop	im	void	NSPort *	NSString *
removePort:forMode:	F	Cl	NSRunLoop	im	void	NSPort *	NSString *
limitDateForMode:	F	Cl	NSRunLoop	im	NSDate *	NSString *
acceptInputForMode:beforeDate:	F	Cl	NSRunLoop	im	void	NSString *	NSDate *
run	F	Cl	NSRunLoop	im	void
runUntilDate:	F	Cl	NSRunLoop	im	void	NSDate *
runMode:beforeDate:	F	Cl	NSRunLoop	im	BOOL	NSString *	NSDate *
configureAsServer	F	Cl	NSRunLoop	im	void
performSelector:withObject:afterDelay:inModes:	F	Cl	NSObject;NSRunLoop	im	void	SEL	id	NSTimeInterval	NSArray *
performSelector:withObject:afterDelay:	F	Cl	NSObject;NSRunLoop	im	void	SEL	id	NSTimeInterval
cancelPreviousPerformRequestsWithTarget:selector:object:	F	Cl	NSObject;NSRunLoop	cm	void	id	SEL	id
cancelPreviousPerformRequestsWithTarget:	F	Cl	NSObject;NSRunLoop	cm	void	id
performSelector:target:argument:order:modes:	F	Cl	NSRunLoop	im	void	SEL	id	id	unsigned	NSArray *
cancelPerformSelector:target:argument:	F	Cl	NSRunLoop	im	void	SEL	id	id
cancelPerformSelectorsWithTarget:	F	Cl	NSRunLoop	im	void	id
string	F	Cl	NSScanner	im	NSString *
scanLocation	F	Cl	NSScanner	im	unsigned
setScanLocation:	F	Cl	NSScanner	im	void	unsigned
setCharactersToBeSkipped:	F	Cl	NSScanner	im	void	NSCharacterSet *
setCaseSensitive:	F	Cl	NSScanner	im	void	BOOL
setLocale:	F	Cl	NSScanner	im	void	NSDictionary *
charactersToBeSkipped	F	Cl	NSScanner	im	NSCharacterSet *
caseSensitive	F	Cl	NSScanner	im	BOOL
locale	F	Cl	NSScanner	im	NSDictionary *
scanInt:	F	Cl	NSScanner	im	BOOL	int *
scanHexInt:	F	Cl	NSScanner	im	BOOL	unsigned *
scanLongLong:	F	Cl	NSScanner	im	BOOL	long long *
scanFloat:	F	Cl	NSScanner	im	BOOL	float *
scanDouble:	F	Cl	NSScanner	im	BOOL	double *
scanString:intoString:	F	Cl	NSScanner	im	BOOL	NSString *	NSString **
scanCharactersFromSet:intoString:	F	Cl	NSScanner	im	BOOL	NSCharacterSet *	NSString **
scanUpToString:intoString:	F	Cl	NSScanner	im	BOOL	NSString *	NSString **
scanUpToCharactersFromSet:intoString:	F	Cl	NSScanner	im	BOOL	NSCharacterSet *	NSString **
isAtEnd	F	Cl	NSScanner	im	BOOL
initWithString:	F	Cl	NSScanner	im	id	NSString *
scannerWithString:	F	Cl	NSScanner	cm	id	NSString *
localizedScannerWithString:	F	Cl	NSScanner	cm	id	NSString *
initWithSuiteName:className:dictionary:	F	Cl	NSScriptClassDescription	im	id	NSString *	NSString *	NSDictionary *
suiteName	F	Cl	NSScriptClassDescription	im	NSString *
className	F	Cl	NSScriptClassDescription	im	NSString *
superclassDescription	F	Cl	NSScriptClassDescription	im	NSScriptClassDescription *
appleEventCode	F	Cl	NSScriptClassDescription	im	unsigned long
matchesAppleEventCode:	F	Cl	NSScriptClassDescription	im	BOOL	unsigned long
supportsCommand:	F	Cl	NSScriptClassDescription	im	BOOL	NSScriptCommandDescription *
selectorForCommand:	F	Cl	NSScriptClassDescription	im	SEL	NSScriptCommandDescription *
typeForKey:	F	Cl	NSScriptClassDescription	im	NSString *	NSString *
classDescriptionForKey:	F	Cl	NSScriptClassDescription	im	NSScriptClassDescription *	NSString *
appleEventCodeForKey:	F	Cl	NSScriptClassDescription	im	unsigned long	NSString *
isReadOnlyKey:	F	Cl	NSScriptClassDescription	im	BOOL	NSString *
keyWithAppleEventCode:	F	Cl	NSScriptClassDescription	im	NSString *	unsigned long
defaultSubcontainerAttributeKey	F	Cl	NSScriptClassDescription	im	NSString *
isLocationRequiredToCreateForKey:	F	Cl	NSScriptClassDescription	im	BOOL	NSString *
classCode	F	Cl	NSObject;NSScriptClassDescription	im	unsigned long
className	F	Cl	NSObject;NSScriptClassDescription	im	NSString *
sharedCoercionHandler	F	Cl	NSScriptCoercionHandler	cm	NSScriptCoercionHandler *
coerceValue:toClass:	F	Cl	NSScriptCoercionHandler	im	id	id	Class
registerCoercer:selector:toConvertFromClass:toClass:	F	Cl	NSScriptCoercionHandler	im	void	id	SEL	Class	Class
initWithCommandDescription:	F	Cl	NSScriptCommand	im	id	NSScriptCommandDescription *
commandDescription	F	Cl	NSScriptCommand	im	NSScriptCommandDescription *
setDirectParameter:	F	Cl	NSScriptCommand	im	void	id
directParameter	F	Cl	NSScriptCommand	im	id
setReceiversSpecifier:	F	Cl	NSScriptCommand	im	void	NSScriptObjectSpecifier *
receiversSpecifier	F	Cl	NSScriptCommand	im	NSScriptObjectSpecifier *
evaluatedReceivers	F	Cl	NSScriptCommand	im	id
setArguments:	F	Cl	NSScriptCommand	im	void	NSDictionary *
arguments	F	Cl	NSScriptCommand	im	NSDictionary *
evaluatedArguments	F	Cl	NSScriptCommand	im	NSDictionary *
isWellFormed	F	Cl	NSScriptCommand	im	BOOL
performDefaultImplementation	F	Cl	NSScriptCommand	im	id
executeCommand	F	Cl	NSScriptCommand	im	id
setScriptErrorNumber:	F	Cl	NSScriptCommand	im	void	int
scriptErrorNumber	F	Cl	NSScriptCommand	im	int
setScriptErrorString:	F	Cl	NSScriptCommand	im	void	NSString *
scriptErrorString	F	Cl	NSScriptCommand	im	NSString *
currentCommand	F	Cl	NSScriptCommand	cm	NSScriptCommand *
appleEvent	F	Cl	NSScriptCommand	im	NSAppleEventDescriptor *
suspendExecution	F	Cl	NSScriptCommand	im	void
resumeExecutionWithResult:	F	Cl	NSScriptCommand	im	void	id
initWithSuiteName:commandName:dictionary:	F	Cl	NSScriptCommandDescription	im	id	NSString *	NSString *	NSDictionary *
suiteName	F	Cl	NSScriptCommandDescription	im	NSString *
commandName	F	Cl	NSScriptCommandDescription	im	NSString *
appleEventClassCode	F	Cl	NSScriptCommandDescription	im	unsigned long
appleEventCode	F	Cl	NSScriptCommandDescription	im	unsigned long
commandClassName	F	Cl	NSScriptCommandDescription	im	NSString *
returnType	F	Cl	NSScriptCommandDescription	im	NSString *
appleEventCodeForReturnType	F	Cl	NSScriptCommandDescription	im	unsigned long
argumentNames	F	Cl	NSScriptCommandDescription	im	NSArray *
typeForArgumentWithName:	F	Cl	NSScriptCommandDescription	im	NSString *	NSString *
appleEventCodeForArgumentWithName:	F	Cl	NSScriptCommandDescription	im	unsigned long	NSString *
isOptionalArgumentWithName:	F	Cl	NSScriptCommandDescription	im	BOOL	NSString *
createCommandInstance	F	Cl	NSScriptCommandDescription	im	NSScriptCommand *
createCommandInstanceWithZone:	F	Cl	NSScriptCommandDescription	im	NSScriptCommand *	NSZone *
sharedScriptExecutionContext	F	Cl	NSScriptExecutionContext	cm	NSScriptExecutionContext *
topLevelObject	F	Cl	NSScriptExecutionContext	im	id
setTopLevelObject:	F	Cl	NSScriptExecutionContext	im	void	id
objectBeingTested	F	Cl	NSScriptExecutionContext	im	id
setObjectBeingTested:	F	Cl	NSScriptExecutionContext	im	void	id
rangeContainerObject	F	Cl	NSScriptExecutionContext	im	id
setRangeContainerObject:	F	Cl	NSScriptExecutionContext	im	void	id
valueAtIndex:inPropertyWithKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	id	unsigned	NSString *
valueWithName:inPropertyWithKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	id	NSString *	NSString *
valueWithUniqueID:inPropertyWithKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	id	id	NSString *
replaceValueAtIndex:inPropertyWithKey:withValue:	F	Cl	NSObject;NSScriptKeyValueCoding	im	void	unsigned	NSString *	id
insertValue:atIndex:inPropertyWithKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	void	id	unsigned	NSString *
removeValueAtIndex:fromPropertyWithKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	void	unsigned	NSString *
insertValue:inPropertyWithKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	void	id	NSString *
coerceValue:forKey:	F	Cl	NSObject;NSScriptKeyValueCoding	im	id	id	NSString *
initWithContainerSpecifier:key:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptObjectSpecifier *	NSString *
initWithContainerClassDescription:containerSpecifier:key:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *
childSpecifier	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
setChildSpecifier:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptObjectSpecifier *
containerSpecifier	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
setContainerSpecifier:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptObjectSpecifier *
containerIsObjectBeingTested	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	BOOL
setContainerIsObjectBeingTested:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	BOOL
containerIsRangeContainerObject	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	BOOL
setContainerIsRangeContainerObject:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	BOOL
key	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	NSString *
setKey:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	NSString *
containerClassDescription	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	NSScriptClassDescription *
setContainerClassDescription:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptClassDescription *
keyClassDescription	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	NSScriptClassDescription *
indicesOfObjectsByEvaluatingWithContainer:count:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	int *	id	int *
objectsByEvaluatingWithContainers:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	id	id
objectsByEvaluatingSpecifier	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	id
evaluationErrorNumber	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	int
setEvaluationErrorNumber:	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	void	int
evaluationErrorSpecifier	F	Cl	NSScriptObjectSpecifier;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
objectSpecifier	F	Cl	NSObject;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
indicesOfObjectsByEvaluatingObjectSpecifier:	F	Cl	NSObject;NSScriptObjectSpecifiers	im	NSArray *	NSScriptObjectSpecifier *
initWithContainerClassDescription:containerSpecifier:key:index:	F	Cl	NSIndexSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *	int
index	F	Cl	NSIndexSpecifier;NSScriptObjectSpecifiers	im	int
setIndex:	F	Cl	NSIndexSpecifier;NSScriptObjectSpecifiers	im	void	int
initWithContainerClassDescription:containerSpecifier:key:name:	F	Cl	NSNameSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *	NSString *
name	F	Cl	NSNameSpecifier;NSScriptObjectSpecifiers	im	NSString *
setName:	F	Cl	NSNameSpecifier;NSScriptObjectSpecifiers	im	void	NSString *
initWithPosition:objectSpecifier:	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	id	NSInsertionPosition	NSScriptObjectSpecifier *
setInsertionClassDescription:	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptClassDescription *
evaluate	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	void
insertionContainer	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	id
insertionKey	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	NSString *
insertionIndex	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	int
insertionReplaces	F	Cl	NSPositionalSpecifier;NSScriptObjectSpecifiers	im	BOOL
initWithContainerClassDescription:containerSpecifier:key:startSpecifier:endSpecifier:	F	Cl	NSRangeSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *	NSScriptObjectSpecifier *	NSScriptObjectSpecifier *
startSpecifier	F	Cl	NSRangeSpecifier;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
setStartSpecifier:	F	Cl	NSRangeSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptObjectSpecifier *
endSpecifier	F	Cl	NSRangeSpecifier;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
setEndSpecifier:	F	Cl	NSRangeSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptObjectSpecifier *
initWithContainerClassDescription:containerSpecifier:key:relativePosition:baseSpecifier:	F	Cl	NSRelativeSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *	NSRelativePosition	NSScriptObjectSpecifier *
relativePosition	F	Cl	NSRelativeSpecifier;NSScriptObjectSpecifiers	im	NSRelativePosition
setRelativePosition:	F	Cl	NSRelativeSpecifier;NSScriptObjectSpecifiers	im	void	NSRelativePosition
baseSpecifier	F	Cl	NSRelativeSpecifier;NSScriptObjectSpecifiers	im	NSScriptObjectSpecifier *
setBaseSpecifier:	F	Cl	NSRelativeSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptObjectSpecifier *
initWithContainerClassDescription:containerSpecifier:key:uniqueID:	F	Cl	NSUniqueIDSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *	id
uniqueID	F	Cl	NSUniqueIDSpecifier;NSScriptObjectSpecifiers	im	id
setUniqueID:	F	Cl	NSUniqueIDSpecifier;NSScriptObjectSpecifiers	im	void	id
initWithContainerClassDescription:containerSpecifier:key:test:	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	id	NSScriptClassDescription *	NSScriptObjectSpecifier *	NSString *	NSScriptWhoseTest *
test	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	NSScriptWhoseTest *
setTest:	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	void	NSScriptWhoseTest *
startSubelementIdentifier	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	NSWhoseSubelementIdentifier
setStartSubelementIdentifier:	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	void	NSWhoseSubelementIdentifier
startSubelementIndex	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	int
setStartSubelementIndex:	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	void	int
endSubelementIdentifier	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	NSWhoseSubelementIdentifier
setEndSubelementIdentifier:	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	void	NSWhoseSubelementIdentifier
endSubelementIndex	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	int
setEndSubelementIndex:	F	Cl	NSWhoseSpecifier;NSScriptObjectSpecifiers	im	void	int
setReceiversSpecifier:	F	Cl	NSCloneCommand;NSScriptStandardSuiteCommands	im	void	NSScriptObjectSpecifier *
keySpecifier	F	Cl	NSCloneCommand;NSScriptStandardSuiteCommands	im	NSScriptObjectSpecifier *
saveOptions	F	Cl	NSCloseCommand;NSScriptStandardSuiteCommands	im	NSSaveOptions
createClassDescription	F	Cl	NSCreateCommand;NSScriptStandardSuiteCommands	im	NSScriptClassDescription *
resolvedKeyDictionary	F	Cl	NSCreateCommand;NSScriptStandardSuiteCommands	im	NSDictionary *
setReceiversSpecifier:	F	Cl	NSDeleteCommand;NSScriptStandardSuiteCommands	im	void	NSScriptObjectSpecifier *
keySpecifier	F	Cl	NSDeleteCommand;NSScriptStandardSuiteCommands	im	NSScriptObjectSpecifier *
setReceiversSpecifier:	F	Cl	NSMoveCommand;NSScriptStandardSuiteCommands	im	void	NSScriptObjectSpecifier *
keySpecifier	F	Cl	NSMoveCommand;NSScriptStandardSuiteCommands	im	NSScriptObjectSpecifier *
saveOptions	F	Cl	NSQuitCommand;NSScriptStandardSuiteCommands	im	NSSaveOptions
setReceiversSpecifier:	F	Cl	NSSetCommand;NSScriptStandardSuiteCommands	im	void	NSScriptObjectSpecifier *
keySpecifier	F	Cl	NSSetCommand;NSScriptStandardSuiteCommands	im	NSScriptObjectSpecifier *
sharedScriptSuiteRegistry	F	Cl	NSScriptSuiteRegistry	cm	NSScriptSuiteRegistry *
setSharedScriptSuiteRegistry:	F	Cl	NSScriptSuiteRegistry	cm	void	NSScriptSuiteRegistry *
loadSuitesFromBundle:	F	Cl	NSScriptSuiteRegistry	im	void	NSBundle *
loadSuiteWithDictionary:fromBundle:	F	Cl	NSScriptSuiteRegistry	im	void	NSDictionary *	NSBundle *
registerClassDescription:	F	Cl	NSScriptSuiteRegistry	im	void	NSScriptClassDescription *
registerCommandDescription:	F	Cl	NSScriptSuiteRegistry	im	void	NSScriptCommandDescription *
suiteNames	F	Cl	NSScriptSuiteRegistry	im	NSArray *
appleEventCodeForSuite:	F	Cl	NSScriptSuiteRegistry	im	unsigned long	NSString *
bundleForSuite:	F	Cl	NSScriptSuiteRegistry	im	NSBundle *	NSString *
classDescriptionsInSuite:	F	Cl	NSScriptSuiteRegistry	im	NSDictionary *	NSString *
commandDescriptionsInSuite:	F	Cl	NSScriptSuiteRegistry	im	NSDictionary *	NSString *
suiteForAppleEventCode:	F	Cl	NSScriptSuiteRegistry	im	NSString *	unsigned long
classDescriptionWithAppleEventCode:	F	Cl	NSScriptSuiteRegistry	im	NSScriptClassDescription *	unsigned long
commandDescriptionWithAppleEventClass:andAppleEventCode:	F	Cl	NSScriptSuiteRegistry	im	NSScriptCommandDescription *	unsigned long	unsigned long
aeteResource:	F	Cl	NSScriptSuiteRegistry	im	NSData *	NSString *
isTrue	F	Cl	NSScriptWhoseTest;NSScriptWhoseTests	im	BOOL
initAndTestWithTests:	F	Cl	NSLogicalTest;NSScriptWhoseTests	im	id	NSArray *
initOrTestWithTests:	F	Cl	NSLogicalTest;NSScriptWhoseTests	im	id	NSArray *
initNotTestWithTest:	F	Cl	NSLogicalTest;NSScriptWhoseTests	im	id	NSScriptWhoseTest *
initWithObjectSpecifier:comparisonOperator:testObject:	F	Cl	NSSpecifierTest;NSScriptWhoseTests	im	id	NSScriptObjectSpecifier *	NSTestComparisonOperation	id
isEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
isLessThanOrEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
isLessThan:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
isGreaterThanOrEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
isGreaterThan:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
isNotEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
doesContain:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
isLike:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	NSString *
isCaseInsensitiveLike:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	NSString *
scriptingIsEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingIsLessThanOrEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingIsLessThan:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingIsGreaterThanOrEqualTo:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingIsGreaterThan:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingBeginsWith:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingEndsWith:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
scriptingContains:	F	Cl	NSObject;NSScriptWhoseTests	im	BOOL	id
serializeInt:	F	Cl	NSMutableData;NSSerialization	im	void	int
serializeInts:count:	F	Cl	NSMutableData;NSSerialization	im	void	int *	unsigned
serializeInt:atIndex:	F	Cl	NSMutableData;NSSerialization	im	void	int	unsigned
serializeInts:count:atIndex:	F	Cl	NSMutableData;NSSerialization	im	void	int *	unsigned	unsigned
serializeAlignedBytesLength:	F	Cl	NSMutableData;NSSerialization	im	void	unsigned
deserializeIntAtIndex:	F	Cl	NSData;NSSerialization	im	int	unsigned
deserializeInts:count:atIndex:	F	Cl	NSData;NSSerialization	im	void	int *	unsigned	unsigned
deserializeIntAtCursor:	F	Cl	NSData;NSSerialization	im	int	unsigned *
deserializeInts:count:atCursor:	F	Cl	NSData;NSSerialization	im	void	int *	unsigned	unsigned *
deserializeAlignedBytesLengthAtCursor:	F	Cl	NSData;NSSerialization	im	unsigned	unsigned *
deserializeBytes:length:atCursor:	F	Cl	NSData;NSSerialization	im	void	void *	unsigned	unsigned *
serializeObjectAt:ofObjCType:intoData:	F	Pr	NSObjCTypeSerializationCallBack;NSSerialization	im	void	id *	const char *	NSMutableData *
deserializeObjectAt:ofObjCType:fromData:atCursor:	F	Pr	NSObjCTypeSerializationCallBack;NSSerialization	im	void	id *	const char *	NSData *	unsigned *
serializeDataAt:ofObjCType:context:	F	Cl	NSMutableData;NSSerialization	im	void	const void *	const char *	id <NSObjCTypeSerializationCallBack>
deserializeDataAt:ofObjCType:atCursor:context:	F	Cl	NSData;NSSerialization	im	void	void *	const char *	unsigned *	id <NSObjCTypeSerializationCallBack>
serializePropertyList:intoData:	F	Cl	NSSerializer;NSSerialization	cm	void	id	NSMutableData *
serializePropertyList:	F	Cl	NSSerializer;NSSerialization	cm	NSData *	id
deserializePropertyListFromData:atCursor:mutableContainers:	F	Cl	NSDeserializer;NSSerialization	cm	id	NSData *	unsigned *	BOOL
deserializePropertyListLazilyFromData:atCursor:length:mutableContainers:	F	Cl	NSDeserializer;NSSerialization	cm	id	NSData *	unsigned *	unsigned	BOOL
deserializePropertyListFromData:mutableContainers:	F	Cl	NSDeserializer;NSSerialization	cm	id	NSData *	BOOL
count	F	Cl	NSSet	im	unsigned
member:	F	Cl	NSSet	im	id	id
objectEnumerator	F	Cl	NSSet	im	NSEnumerator *
allObjects	F	Cl	NSSet	im	NSArray *
anyObject	F	Cl	NSSet	im	id
containsObject:	F	Cl	NSSet	im	BOOL	id
description	F	Cl	NSSet	im	NSString *
descriptionWithLocale:	F	Cl	NSSet	im	NSString *	NSDictionary *
intersectsSet:	F	Cl	NSSet	im	BOOL	NSSet *
isEqualToSet:	F	Cl	NSSet	im	BOOL	NSSet *
isSubsetOfSet:	F	Cl	NSSet	im	BOOL	NSSet *
makeObjectsPerformSelector:	F	Cl	NSSet	im	void	SEL
makeObjectsPerformSelector:withObject:	F	Cl	NSSet	im	void	SEL	id
set	F	Cl	NSSet	cm	id
setWithArray:	F	Cl	NSSet	cm	id	NSArray *
setWithObject:	F	Cl	NSSet	cm	id	id
setWithObjects:	F	Cl	NSSet	cm	id	id
initWithArray:	F	Cl	NSSet	im	id	NSArray *
initWithObjects:count:	F	Cl	NSSet	im	id	id *	unsigned
initWithObjects:	F	Cl	NSSet	im	id	id
initWithSet:	F	Cl	NSSet	im	id	NSSet *
initWithSet:copyItems:	F	Cl	NSSet	im	id	NSSet *	BOOL
setWithSet:	F	Cl	NSSet	cm	id	NSSet *
setWithObjects:count:	F	Cl	NSSet	cm	id	id *	unsigned
addObject:	F	Cl	NSMutableSet;NSSet	im	void	id
removeObject:	F	Cl	NSMutableSet;NSSet	im	void	id
addObjectsFromArray:	F	Cl	NSMutableSet;NSSet	im	void	NSArray *
intersectSet:	F	Cl	NSMutableSet;NSSet	im	void	NSSet *
minusSet:	F	Cl	NSMutableSet;NSSet	im	void	NSSet *
removeAllObjects	F	Cl	NSMutableSet;NSSet	im	void
unionSet:	F	Cl	NSMutableSet;NSSet	im	void	NSSet *
setSet:	F	Cl	NSMutableSet;NSSet	im	void	NSSet *
setWithCapacity:	F	Cl	NSMutableSet;NSSet	cm	id	unsigned
initWithCapacity:	F	Cl	NSMutableSet;NSSet	im	id	unsigned
initWithCapacity:	F	Cl	NSCountedSet;NSSet	im	id	unsigned
initWithArray:	F	Cl	NSCountedSet;NSSet	im	id	NSArray *
initWithSet:	F	Cl	NSCountedSet;NSSet	im	id	NSSet *
countForObject:	F	Cl	NSCountedSet;NSSet	im	unsigned	id
objectEnumerator	F	Cl	NSCountedSet;NSSet	im	NSEnumerator *
addObject:	F	Cl	NSCountedSet;NSSet	im	void	id
removeObject:	F	Cl	NSCountedSet;NSSet	im	void	id
initWithKey:ascending:	F	Cl	NSSortDescriptor	im	id	NSString *	BOOL
initWithKey:ascending:selector:	F	Cl	NSSortDescriptor	im	id	NSString *	BOOL	SEL
key	F	Cl	NSSortDescriptor	im	NSString *
ascending	F	Cl	NSSortDescriptor	im	BOOL
selector	F	Cl	NSSortDescriptor	im	SEL
compareObject:toObject:	F	Cl	NSSortDescriptor	im	NSComparisonResult	id	id
reversedSortDescriptor	F	Cl	NSSortDescriptor	im	id
sortedArrayUsingDescriptors:	F	Cl	NSArray;NSSortDescriptor	im	NSArray *	NSArray *
sortUsingDescriptors:	F	Cl	NSMutableArray;NSSortDescriptor	im	void	NSArray *
setDelegate:	F	Cl	NSSpellServer	im	void	id
delegate	F	Cl	NSSpellServer	im	id
registerLanguage:byVendor:	F	Cl	NSSpellServer	im	BOOL	NSString *	NSString *
isWordInUserDictionaries:caseSensitive:	F	Cl	NSSpellServer	im	BOOL	NSString *	BOOL
run	F	Cl	NSSpellServer	im	void
spellServer:findMisspelledWordInString:language:wordCount:countOnly:	F	Cl	NSObject;NSSpellServer	dm	NSRange	NSSpellServer *	NSString *	NSString *	int *	BOOL
spellServer:suggestGuessesForWord:inLanguage:	F	Cl	NSObject;NSSpellServer	dm	NSArray *	NSSpellServer *	NSString *	NSString *
spellServer:didLearnWord:inLanguage:	F	Cl	NSObject;NSSpellServer	dm	void	NSSpellServer *	NSString *	NSString *
spellServer:didForgetWord:inLanguage:	F	Cl	NSObject;NSSpellServer	dm	void	NSSpellServer *	NSString *	NSString *
spellServer:suggestCompletionsForPartialWordRange:inString:language:	F	Cl	NSObject;NSSpellServer	dm	NSArray *	NSSpellServer *	NSRange	NSString *	NSString *
open	F	Cl	NSStream	im	void
close	F	Cl	NSStream	im	void
delegate	F	Cl	NSStream	im	id
setDelegate:	F	Cl	NSStream	im	void	id
propertyForKey:	F	Cl	NSStream	im	id	NSString *
setProperty:forKey:	F	Cl	NSStream	im	BOOL	id	NSString *
scheduleInRunLoop:forMode:	F	Cl	NSStream	im	void	NSRunLoop *	NSString *
removeFromRunLoop:forMode:	F	Cl	NSStream	im	void	NSRunLoop *	NSString *
streamStatus	F	Cl	NSStream	im	NSStreamStatus
streamError	F	Cl	NSStream	im	NSError *
read:maxLength:	F	Cl	NSInputStream;NSStream	im	int	uint8_t *	unsigned int
getBuffer:length:	F	Cl	NSInputStream;NSStream	im	BOOL	uint8_t **	unsigned int *
hasBytesAvailable	F	Cl	NSInputStream;NSStream	im	BOOL
write:maxLength:	F	Cl	NSOutputStream;NSStream	im	int	const uint8_t *	unsigned int
hasSpaceAvailable	F	Cl	NSOutputStream;NSStream	im	BOOL
getStreamsToHost:port:inputStream:outputStream:	F	Cl	NSStream	cm	void	NSHost *	int	NSInputStream **	NSOutputStream **
initWithData:	F	Cl	NSInputStream;NSStream	im	id	NSData *
initWithFileAtPath:	F	Cl	NSInputStream;NSStream	im	id	NSString *
inputStreamWithData:	F	Cl	NSInputStream;NSStream	cm	id	NSData *
inputStreamWithFileAtPath:	F	Cl	NSInputStream;NSStream	cm	id	NSString *
initToMemory	F	Cl	NSOutputStream;NSStream	im	id
initToBuffer:capacity:	F	Cl	NSOutputStream;NSStream	im	id	uint8_t *	unsigned int
initToFileAtPath:append:	F	Cl	NSOutputStream;NSStream	im	id	NSString *	BOOL
outputStreamToMemory	F	Cl	NSOutputStream;NSStream	cm	id
outputStreamToBuffer:capacity:	F	Cl	NSOutputStream;NSStream	cm	id	uint8_t *	unsigned int
outputStreamToFileAtPath:append:	F	Cl	NSOutputStream;NSStream	cm	id	NSString *	BOOL
stream:handleEvent:	F	Cl	NSObject;NSStream	dm	void	NSStream *	NSStreamEvent
length	F	Cl	NSString	im	unsigned int
characterAtIndex:	F	Cl	NSString	im	unichar	unsigned
getCharacters:	F	Cl	NSString	im	void	unichar *
getCharacters:range:	F	Cl	NSString	im	void	unichar *	NSRange
substringFromIndex:	F	Cl	NSString	im	NSString *	unsigned
substringToIndex:	F	Cl	NSString	im	NSString *	unsigned
substringWithRange:	F	Cl	NSString	im	NSString *	NSRange
compare:	F	Cl	NSString	im	NSComparisonResult	NSString *
compare:options:	F	Cl	NSString	im	NSComparisonResult	NSString *	unsigned
compare:options:range:	F	Cl	NSString	im	NSComparisonResult	NSString *	unsigned	NSRange
compare:options:range:locale:	F	Cl	NSString	im	NSComparisonResult	NSString *	unsigned	NSRange	NSDictionary *
caseInsensitiveCompare:	F	Cl	NSString	im	NSComparisonResult	NSString *
localizedCompare:	F	Cl	NSString	im	NSComparisonResult	NSString *
localizedCaseInsensitiveCompare:	F	Cl	NSString	im	NSComparisonResult	NSString *
isEqualToString:	F	Cl	NSString	im	BOOL	NSString *
hasPrefix:	F	Cl	NSString	im	BOOL	NSString *
hasSuffix:	F	Cl	NSString	im	BOOL	NSString *
rangeOfString:	F	Cl	NSString	im	NSRange	NSString *
rangeOfString:options:	F	Cl	NSString	im	NSRange	NSString *	unsigned
rangeOfString:options:range:	F	Cl	NSString	im	NSRange	NSString *	unsigned	NSRange
rangeOfCharacterFromSet:	F	Cl	NSString	im	NSRange	NSCharacterSet *
rangeOfCharacterFromSet:options:	F	Cl	NSString	im	NSRange	NSCharacterSet *	unsigned int
rangeOfCharacterFromSet:options:range:	F	Cl	NSString	im	NSRange	NSCharacterSet *	unsigned int	NSRange
rangeOfComposedCharacterSequenceAtIndex:	F	Cl	NSString	im	NSRange	unsigned
stringByAppendingString:	F	Cl	NSString	im	NSString *	NSString *
stringByAppendingFormat:	F	Cl	NSString	im	NSString *	NSString *
doubleValue	F	Cl	NSString	im	double
floatValue	F	Cl	NSString	im	float
intValue	F	Cl	NSString	im	int
componentsSeparatedByString:	F	Cl	NSString	im	NSArray *	NSString *
commonPrefixWithString:options:	F	Cl	NSString	im	NSString *	NSString *	unsigned
uppercaseString	F	Cl	NSString	im	NSString *
lowercaseString	F	Cl	NSString	im	NSString *
capitalizedString	F	Cl	NSString	im	NSString *
stringByTrimmingCharactersInSet:	F	Cl	NSString	im	NSString *	NSCharacterSet *
stringByPaddingToLength:withString:startingAtIndex:	F	Cl	NSString	im	NSString *	unsigned	NSString *	unsigned
getLineStart:end:contentsEnd:forRange:	F	Cl	NSString	im	void	unsigned *	unsigned *	unsigned *	NSRange
lineRangeForRange:	F	Cl	NSString	im	NSRange	NSRange
getParagraphStart:end:contentsEnd:forRange:	F	Cl	NSString	im	void	unsigned *	unsigned *	unsigned *	NSRange
paragraphRangeForRange:	F	Cl	NSString	im	NSRange	NSRange
description	F	Cl	NSString	im	NSString *
hash	F	Cl	NSString	im	unsigned
fastestEncoding	F	Cl	NSString	im	NSStringEncoding
smallestEncoding	F	Cl	NSString	im	NSStringEncoding
dataUsingEncoding:allowLossyConversion:	F	Cl	NSString	im	NSData *	NSStringEncoding	BOOL
dataUsingEncoding:	F	Cl	NSString	im	NSData *	NSStringEncoding
canBeConvertedToEncoding:	F	Cl	NSString	im	BOOL	NSStringEncoding
cStringUsingEncoding:	F	Cl	NSString	im	const char *	NSStringEncoding
getCString:maxLength:encoding:	F	Cl	NSString	im	BOOL	char *	unsigned	NSStringEncoding
maximumLengthOfBytesUsingEncoding:	F	Cl	NSString	im	unsigned	NSStringEncoding
lengthOfBytesUsingEncoding:	F	Cl	NSString	im	unsigned	NSStringEncoding
decomposedStringWithCanonicalMapping	F	Cl	NSString	im	NSString *
precomposedStringWithCanonicalMapping	F	Cl	NSString	im	NSString *
decomposedStringWithCompatibilityMapping	F	Cl	NSString	im	NSString *
precomposedStringWithCompatibilityMapping	F	Cl	NSString	im	NSString *
UTF8String	F	Cl	NSString	im	const char *
defaultCStringEncoding	F	Cl	NSString	cm	NSStringEncoding
availableStringEncodings	F	Cl	NSString	cm	const NSStringEncoding *
localizedNameOfStringEncoding:	F	Cl	NSString	cm	NSString *	NSStringEncoding
init	F	Cl	NSString	im	id
initWithCharactersNoCopy:length:freeWhenDone:	F	Cl	NSString	im	id	unichar *	unsigned	BOOL
initWithCharacters:length:	F	Cl	NSString	im	id	const unichar *	unsigned
initWithUTF8String:	F	Cl	NSString	im	id	const char *
initWithString:	F	Cl	NSString	im	id	NSString *
initWithFormat:	F	Cl	NSString	im	id	NSString *
initWithFormat:arguments:	F	Cl	NSString	im	id	NSString *	va_list
initWithFormat:locale:	F	Cl	NSString	im	id	NSString *	NSDictionary *
initWithFormat:locale:arguments:	F	Cl	NSString	im	id	NSString *	NSDictionary *	va_list
initWithData:encoding:	F	Cl	NSString	im	id	NSData *	NSStringEncoding
initWithBytes:length:encoding:	F	Cl	NSString	im	id	const void *	unsigned	NSStringEncoding
initWithBytesNoCopy:length:encoding:freeWhenDone:	F	Cl	NSString	im	id	void *	unsigned	NSStringEncoding	BOOL
string	F	Cl	NSString	cm	id
stringWithString:	F	Cl	NSString	cm	id	NSString *
stringWithCharacters:length:	F	Cl	NSString	cm	id	const unichar *	unsigned
stringWithUTF8String:	F	Cl	NSString	cm	id	const char *
stringWithFormat:	F	Cl	NSString	cm	id	NSString *
localizedStringWithFormat:	F	Cl	NSString	cm	id	NSString *
initWithCString:encoding:	F	Cl	NSString	im	id	const char *	NSStringEncoding
stringWithCString:encoding:	F	Cl	NSString	cm	id	const char *	NSStringEncoding
initWithContentsOfURL:encoding:error:	F	Cl	NSString	im	id	NSURL *	NSStringEncoding	NSError **
initWithContentsOfFile:encoding:error:	F	Cl	NSString	im	id	NSString *	NSStringEncoding	NSError **
stringWithContentsOfURL:encoding:error:	F	Cl	NSString	cm	id	NSURL *	NSStringEncoding	NSError **
stringWithContentsOfFile:encoding:error:	F	Cl	NSString	cm	id	NSString *	NSStringEncoding	NSError **
initWithContentsOfURL:usedEncoding:error:	F	Cl	NSString	im	id	NSURL *	NSStringEncoding *	NSError **
initWithContentsOfFile:usedEncoding:error:	F	Cl	NSString	im	id	NSString *	NSStringEncoding *	NSError **
stringWithContentsOfURL:usedEncoding:error:	F	Cl	NSString	cm	id	NSURL *	NSStringEncoding *	NSError **
stringWithContentsOfFile:usedEncoding:error:	F	Cl	NSString	cm	id	NSString *	NSStringEncoding *	NSError **
writeToURL:atomically:encoding:error:	F	Cl	NSString	im	BOOL	NSURL *	BOOL	NSStringEncoding	NSError **
writeToFile:atomically:encoding:error:	F	Cl	NSString	im	BOOL	NSString *	BOOL	NSStringEncoding	NSError **
replaceCharactersInRange:withString:	F	Cl	NSMutableString;NSString	im	void	NSRange	NSString *
insertString:atIndex:	F	Cl	NSMutableString;NSString	im	void	NSString *	unsigned
deleteCharactersInRange:	F	Cl	NSMutableString;NSString	im	void	NSRange
appendString:	F	Cl	NSMutableString;NSString	im	void	NSString *
appendFormat:	F	Cl	NSMutableString;NSString	im	void	NSString *
setString:	F	Cl	NSMutableString;NSString	im	void	NSString *
initWithCapacity:	F	Cl	NSMutableString;NSString	im	id	unsigned
stringWithCapacity:	F	Cl	NSMutableString;NSString	cm	id	unsigned
replaceOccurrencesOfString:withString:options:range:	F	Cl	NSMutableString;NSString	im	unsigned int	NSString *	NSString *	unsigned	NSRange
propertyList	F	Cl	NSString	im	id
propertyListFromStringsFileFormat	F	Cl	NSString	im	NSDictionary *
cString	F	Cl	NSString	im	const char *
lossyCString	F	Cl	NSString	im	const char *
cStringLength	F	Cl	NSString	im	unsigned
getCString:	F	Cl	NSString	im	void	char *
getCString:maxLength:	F	Cl	NSString	im	void	char *	unsigned
getCString:maxLength:range:remainingRange:	F	Cl	NSString	im	void	char *	unsigned	NSRange	NSRangePointer
writeToFile:atomically:	F	Cl	NSString	im	BOOL	NSString *	BOOL
writeToURL:atomically:	F	Cl	NSString	im	BOOL	NSURL *	BOOL
initWithContentsOfFile:	F	Cl	NSString	im	id	NSString *
initWithContentsOfURL:	F	Cl	NSString	im	id	NSURL *
stringWithContentsOfFile:	F	Cl	NSString	cm	id	NSString *
stringWithContentsOfURL:	F	Cl	NSString	cm	id	NSURL *
initWithCStringNoCopy:length:freeWhenDone:	F	Cl	NSString	im	id	char *	unsigned	BOOL
initWithCString:length:	F	Cl	NSString	im	id	const char *	unsigned
initWithCString:	F	Cl	NSString	im	id	const char *
stringWithCString:length:	F	Cl	NSString	cm	id	const char *	unsigned
stringWithCString:	F	Cl	NSString	cm	id	const char *
init	F	Cl	NSTask	im	id
setLaunchPath:	F	Cl	NSTask	im	void	NSString *
setArguments:	F	Cl	NSTask	im	void	NSArray *
setEnvironment:	F	Cl	NSTask	im	void	NSDictionary *
setCurrentDirectoryPath:	F	Cl	NSTask	im	void	NSString *
setStandardInput:	F	Cl	NSTask	im	void	id
setStandardOutput:	F	Cl	NSTask	im	void	id
setStandardError:	F	Cl	NSTask	im	void	id
launchPath	F	Cl	NSTask	im	NSString *
arguments	F	Cl	NSTask	im	NSArray *
environment	F	Cl	NSTask	im	NSDictionary *
currentDirectoryPath	F	Cl	NSTask	im	NSString *
standardInput	F	Cl	NSTask	im	id
standardOutput	F	Cl	NSTask	im	id
standardError	F	Cl	NSTask	im	id
launch	F	Cl	NSTask	im	void
interrupt	F	Cl	NSTask	im	void
terminate	F	Cl	NSTask	im	void
suspend	F	Cl	NSTask	im	BOOL
resume	F	Cl	NSTask	im	BOOL
processIdentifier	F	Cl	NSTask	im	int
isRunning	F	Cl	NSTask	im	BOOL
terminationStatus	F	Cl	NSTask	im	int
launchedTaskWithLaunchPath:arguments:	F	Cl	NSTask	cm	NSTask *	NSString *	NSArray *
waitUntilExit	F	Cl	NSTask	im	void
currentThread	F	Cl	NSThread	cm	NSThread *
detachNewThreadSelector:toTarget:withObject:	F	Cl	NSThread	cm	void	SEL	id	id
isMultiThreaded	F	Cl	NSThread	cm	BOOL
threadDictionary	F	Cl	NSThread	im	NSMutableDictionary *
sleepUntilDate:	F	Cl	NSThread	cm	void	NSDate *
exit	F	Cl	NSThread	cm	void
threadPriority	F	Cl	NSThread	cm	double
setThreadPriority:	F	Cl	NSThread	cm	BOOL	double
performSelectorOnMainThread:withObject:waitUntilDone:modes:	F	Cl	NSObject;NSThread	im	void	SEL	id	BOOL	NSArray *
performSelectorOnMainThread:withObject:waitUntilDone:	F	Cl	NSObject;NSThread	im	void	SEL	id	BOOL
timerWithTimeInterval:invocation:repeats:	F	Cl	NSTimer	cm	NSTimer *	NSTimeInterval	NSInvocation *	BOOL
scheduledTimerWithTimeInterval:invocation:repeats:	F	Cl	NSTimer	cm	NSTimer *	NSTimeInterval	NSInvocation *	BOOL
timerWithTimeInterval:target:selector:userInfo:repeats:	F	Cl	NSTimer	cm	NSTimer *	NSTimeInterval	id	SEL	id	BOOL
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:	F	Cl	NSTimer	cm	NSTimer *	NSTimeInterval	id	SEL	id	BOOL
initWithFireDate:interval:target:selector:userInfo:repeats:	F	Cl	NSTimer	im	id	NSDate *	NSTimeInterval	id	SEL	id	BOOL
fire	F	Cl	NSTimer	im	void
fireDate	F	Cl	NSTimer	im	NSDate *
setFireDate:	F	Cl	NSTimer	im	void	NSDate *
timeInterval	F	Cl	NSTimer	im	NSTimeInterval
invalidate	F	Cl	NSTimer	im	void
isValid	F	Cl	NSTimer	im	BOOL
userInfo	F	Cl	NSTimer	im	id
name	F	Cl	NSTimeZone	im	NSString *
data	F	Cl	NSTimeZone	im	NSData *
secondsFromGMTForDate:	F	Cl	NSTimeZone	im	int	NSDate *
abbreviationForDate:	F	Cl	NSTimeZone	im	NSString *	NSDate *
isDaylightSavingTimeForDate:	F	Cl	NSTimeZone	im	BOOL	NSDate *
systemTimeZone	F	Cl	NSTimeZone	cm	NSTimeZone *
resetSystemTimeZone	F	Cl	NSTimeZone	cm	void
defaultTimeZone	F	Cl	NSTimeZone	cm	NSTimeZone *
setDefaultTimeZone:	F	Cl	NSTimeZone	cm	void	NSTimeZone *
localTimeZone	F	Cl	NSTimeZone	cm	NSTimeZone *
knownTimeZoneNames	F	Cl	NSTimeZone	cm	NSArray *
abbreviationDictionary	F	Cl	NSTimeZone	cm	NSDictionary *
secondsFromGMT	F	Cl	NSTimeZone	im	int
abbreviation	F	Cl	NSTimeZone	im	NSString *
isDaylightSavingTime	F	Cl	NSTimeZone	im	BOOL
description	F	Cl	NSTimeZone	im	NSString *
isEqualToTimeZone:	F	Cl	NSTimeZone	im	BOOL	NSTimeZone *
timeZoneWithName:	F	Cl	NSTimeZone	cm	id	NSString *
timeZoneWithName:data:	F	Cl	NSTimeZone	cm	id	NSString *	NSData *
initWithName:	F	Cl	NSTimeZone	im	id	NSString *
initWithName:data:	F	Cl	NSTimeZone	im	id	NSString *	NSData *
timeZoneForSecondsFromGMT:	F	Cl	NSTimeZone	cm	id	int
timeZoneWithAbbreviation:	F	Cl	NSTimeZone	cm	id	NSString *
beginUndoGrouping	F	Cl	NSUndoManager	im	void
endUndoGrouping	F	Cl	NSUndoManager	im	void
groupingLevel	F	Cl	NSUndoManager	im	int
disableUndoRegistration	F	Cl	NSUndoManager	im	void
enableUndoRegistration	F	Cl	NSUndoManager	im	void
isUndoRegistrationEnabled	F	Cl	NSUndoManager	im	BOOL
groupsByEvent	F	Cl	NSUndoManager	im	BOOL
setGroupsByEvent:	F	Cl	NSUndoManager	im	void	BOOL
setLevelsOfUndo:	F	Cl	NSUndoManager	im	void	unsigned
levelsOfUndo	F	Cl	NSUndoManager	im	unsigned
setRunLoopModes:	F	Cl	NSUndoManager	im	void	NSArray *
runLoopModes	F	Cl	NSUndoManager	im	NSArray *
undo	F	Cl	NSUndoManager	im	void
redo	F	Cl	NSUndoManager	im	void
undoNestedGroup	F	Cl	NSUndoManager	im	void
canUndo	F	Cl	NSUndoManager	im	BOOL
canRedo	F	Cl	NSUndoManager	im	BOOL
isUndoing	F	Cl	NSUndoManager	im	BOOL
isRedoing	F	Cl	NSUndoManager	im	BOOL
removeAllActions	F	Cl	NSUndoManager	im	void
removeAllActionsWithTarget:	F	Cl	NSUndoManager	im	void	id
registerUndoWithTarget:selector:object:	F	Cl	NSUndoManager	im	void	id	SEL	id
prepareWithInvocationTarget:	F	Cl	NSUndoManager	im	id	id
forwardInvocation:	F	Cl	NSUndoManager	im	void	NSInvocation *
undoActionName	F	Cl	NSUndoManager	im	NSString *
redoActionName	F	Cl	NSUndoManager	im	NSString *
setActionName:	F	Cl	NSUndoManager	im	void	NSString *
undoMenuItemTitle	F	Cl	NSUndoManager	im	NSString *
redoMenuItemTitle	F	Cl	NSUndoManager	im	NSString *
undoMenuTitleForUndoActionName:	F	Cl	NSUndoManager	im	NSString *	NSString *
redoMenuTitleForUndoActionName:	F	Cl	NSUndoManager	im	NSString *	NSString *
initWithScheme:host:path:	F	Cl	NSURL	im	id	NSString *	NSString *	NSString *
initFileURLWithPath:	F	Cl	NSURL	im	id	NSString *
fileURLWithPath:	F	Cl	NSURL	cm	id	NSString *
initWithString:	F	Cl	NSURL	im	id	NSString *
initWithString:relativeToURL:	F	Cl	NSURL	im	id	NSString *	NSURL *
URLWithString:	F	Cl	NSURL	cm	id	NSString *
URLWithString:relativeToURL:	F	Cl	NSURL	cm	id	NSString *	NSURL *
absoluteString	F	Cl	NSURL	im	NSString *
relativeString	F	Cl	NSURL	im	NSString *
baseURL	F	Cl	NSURL	im	NSURL *
absoluteURL	F	Cl	NSURL	im	NSURL *
scheme	F	Cl	NSURL	im	NSString *
resourceSpecifier	F	Cl	NSURL	im	NSString *
host	F	Cl	NSURL	im	NSString *
port	F	Cl	NSURL	im	NSNumber *
user	F	Cl	NSURL	im	NSString *
password	F	Cl	NSURL	im	NSString *
path	F	Cl	NSURL	im	NSString *
fragment	F	Cl	NSURL	im	NSString *
parameterString	F	Cl	NSURL	im	NSString *
query	F	Cl	NSURL	im	NSString *
relativePath	F	Cl	NSURL	im	NSString *
isFileURL	F	Cl	NSURL	im	BOOL
standardizedURL	F	Cl	NSURL	im	NSURL *
resourceDataUsingCache:	F	Cl	NSURL	im	NSData *	BOOL
loadResourceDataNotifyingClient:usingCache:	F	Cl	NSURL	im	void	id	BOOL
propertyForKey:	F	Cl	NSURL	im	id	NSString *
setResourceData:	F	Cl	NSURL	im	BOOL	NSData *
setProperty:forKey:	F	Cl	NSURL	im	BOOL	id	NSString *
URLHandleUsingCache:	F	Cl	NSURL	im	NSURLHandle *	BOOL
URL:resourceDataDidBecomeAvailable:	F	Cl	NSObject;NSURL	im	void	NSURL *	NSData *
URLResourceDidFinishLoading:	F	Cl	NSObject;NSURL	im	void	NSURL *
URLResourceDidCancelLoading:	F	Cl	NSObject;NSURL	im	void	NSURL *
URL:resourceDidFailLoadingWithReason:	F	Cl	NSObject;NSURL	im	void	NSURL *	NSString *
stringByAddingPercentEscapesUsingEncoding:	F	Cl	NSString;NSURL	im	NSString *	NSStringEncoding
stringByReplacingPercentEscapesUsingEncoding:	F	Cl	NSString;NSURL	im	NSString *	NSStringEncoding
useCredential:forAuthenticationChallenge:	F	Pr	NSURLAuthenticationChallengeSender;NSURLAuthenticationChallenge	im	void	NSURLCredential *	NSURLAuthenticationChallenge *
continueWithoutCredentialForAuthenticationChallenge:	F	Pr	NSURLAuthenticationChallengeSender;NSURLAuthenticationChallenge	im	void	NSURLAuthenticationChallenge *
cancelAuthenticationChallenge:	F	Pr	NSURLAuthenticationChallengeSender;NSURLAuthenticationChallenge	im	void	NSURLAuthenticationChallenge *
initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:	F	Cl	NSURLAuthenticationChallenge	im	id	NSURLProtectionSpace *	NSURLCredential *	int	NSURLResponse *	NSError *	id<NSURLAuthenticationChallengeSender>
initWithAuthenticationChallenge:sender:	F	Cl	NSURLAuthenticationChallenge	im	id	NSURLAuthenticationChallenge *	id<NSURLAuthenticationChallengeSender>
protectionSpace	F	Cl	NSURLAuthenticationChallenge	im	NSURLProtectionSpace *
proposedCredential	F	Cl	NSURLAuthenticationChallenge	im	NSURLCredential *
previousFailureCount	F	Cl	NSURLAuthenticationChallenge	im	int
failureResponse	F	Cl	NSURLAuthenticationChallenge	im	NSURLResponse *
error	F	Cl	NSURLAuthenticationChallenge	im	NSError *
sender	F	Cl	NSURLAuthenticationChallenge	im	id<NSURLAuthenticationChallengeSender>
initWithResponse:data:	F	Cl	NSCachedURLResponse;NSURLCache	im	id	NSURLResponse *	NSData *
initWithResponse:data:userInfo:storagePolicy:	F	Cl	NSCachedURLResponse;NSURLCache	im	id	NSURLResponse *	NSData *	NSDictionary *	NSURLCacheStoragePolicy
response	F	Cl	NSCachedURLResponse;NSURLCache	im	NSURLResponse *
data	F	Cl	NSCachedURLResponse;NSURLCache	im	NSData *
userInfo	F	Cl	NSCachedURLResponse;NSURLCache	im	NSDictionary *
storagePolicy	F	Cl	NSCachedURLResponse;NSURLCache	im	NSURLCacheStoragePolicy
sharedURLCache	F	Cl	NSURLCache	cm	NSURLCache *
setSharedURLCache:	F	Cl	NSURLCache	cm	void	NSURLCache *
initWithMemoryCapacity:diskCapacity:diskPath:	F	Cl	NSURLCache	im	id	unsigned	unsigned	NSString *
cachedResponseForRequest:	F	Cl	NSURLCache	im	NSCachedURLResponse *	NSURLRequest *
storeCachedResponse:forRequest:	F	Cl	NSURLCache	im	void	NSCachedURLResponse *	NSURLRequest *
removeCachedResponseForRequest:	F	Cl	NSURLCache	im	void	NSURLRequest *
removeAllCachedResponses	F	Cl	NSURLCache	im	void
memoryCapacity	F	Cl	NSURLCache	im	unsigned
diskCapacity	F	Cl	NSURLCache	im	unsigned
setMemoryCapacity:	F	Cl	NSURLCache	im	void	unsigned
setDiskCapacity:	F	Cl	NSURLCache	im	void	unsigned
currentMemoryUsage	F	Cl	NSURLCache	im	unsigned
currentDiskUsage	F	Cl	NSURLCache	im	unsigned
canHandleRequest:	F	Cl	NSURLConnection	cm	BOOL	NSURLRequest *
connectionWithRequest:delegate:	F	Cl	NSURLConnection	cm	NSURLConnection *	NSURLRequest *	id
initWithRequest:delegate:	F	Cl	NSURLConnection	im	id	NSURLRequest *	id
cancel	F	Cl	NSURLConnection	im	void
connection:willSendRequest:redirectResponse:	F	Cl	NSObject;NSURLConnection	dm	NSURLRequest *	NSURLConnection *	NSURLRequest *	NSURLResponse *
connection:didReceiveAuthenticationChallenge:	F	Cl	NSObject;NSURLConnection	dm	void	NSURLConnection *	NSURLAuthenticationChallenge *
connection:didCancelAuthenticationChallenge:	F	Cl	NSObject;NSURLConnection	dm	void	NSURLConnection *	NSURLAuthenticationChallenge *
connection:didReceiveResponse:	F	Cl	NSObject;NSURLConnection	dm	void	NSURLConnection *	NSURLResponse *
connection:didReceiveData:	F	Cl	NSObject;NSURLConnection	dm	void	NSURLConnection *	NSData *
connectionDidFinishLoading:	F	Cl	NSObject;NSURLConnection	dm	void	NSURLConnection *
connection:didFailWithError:	F	Cl	NSObject;NSURLConnection	dm	void	NSURLConnection *	NSError *
connection:willCacheResponse:	F	Cl	NSObject;NSURLConnection	dm	NSCachedURLResponse *	NSURLConnection *	NSCachedURLResponse *
sendSynchronousRequest:returningResponse:error:	F	Cl	NSURLConnection	dm	NSData *	NSURLRequest *	NSURLResponse **	NSError **
initWithUser:password:persistence:	F	Cl	NSURLCredential	im	id	NSString *	NSString *	NSURLCredentialPersistence
credentialWithUser:password:persistence:	F	Cl	NSURLCredential	cm	NSURLCredential *	NSString *	NSString *	NSURLCredentialPersistence
user	F	Cl	NSURLCredential	im	NSString *
password	F	Cl	NSURLCredential	im	NSString *
hasPassword	F	Cl	NSURLCredential	im	BOOL
persistence	F	Cl	NSURLCredential	im	NSURLCredentialPersistence
sharedCredentialStorage	F	Cl	NSURLCredentialStorage	cm	NSURLCredentialStorage *
credentialsForProtectionSpace:	F	Cl	NSURLCredentialStorage	im	NSDictionary *	NSURLProtectionSpace *
allCredentials	F	Cl	NSURLCredentialStorage	im	NSDictionary *
setCredential:forProtectionSpace:	F	Cl	NSURLCredentialStorage	im	void	NSURLCredential *	NSURLProtectionSpace *
removeCredential:forProtectionSpace:	F	Cl	NSURLCredentialStorage	im	void	NSURLCredential *	NSURLProtectionSpace *
defaultCredentialForProtectionSpace:	F	Cl	NSURLCredentialStorage	im	NSURLCredential *	NSURLProtectionSpace *
setDefaultCredential:forProtectionSpace:	F	Cl	NSURLCredentialStorage	im	void	NSURLCredential *	NSURLProtectionSpace *
canResumeDownloadDecodedWithEncodingMIMEType:	F	Cl	NSURLDownload	cm	BOOL	NSString *
initWithRequest:delegate:	F	Cl	NSURLDownload	im	id	NSURLRequest *	id
initWithResumeData:delegate:path:	F	Cl	NSURLDownload	im	id	NSData *	id	NSString *
cancel	F	Cl	NSURLDownload	im	void
setDestination:allowOverwrite:	F	Cl	NSURLDownload	im	void	NSString *	BOOL
request	F	Cl	NSURLDownload	im	NSURLRequest *
resumeData	F	Cl	NSURLDownload	im	NSData *
setDeletesFileUponFailure:	F	Cl	NSURLDownload	im	void	BOOL
deletesFileUponFailure	F	Cl	NSURLDownload	im	BOOL
downloadDidBegin:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *
download:willSendRequest:redirectResponse:	F	Cl	NSObject;NSURLDownload	dm	NSURLRequest *	NSURLDownload *	NSURLRequest *	NSURLResponse *
download:didReceiveAuthenticationChallenge:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSURLAuthenticationChallenge *
download:didCancelAuthenticationChallenge:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSURLAuthenticationChallenge *
download:didReceiveResponse:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSURLResponse *
download:willResumeWithResponse:fromByte:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSURLResponse *	long long
download:didReceiveDataOfLength:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	unsigned
download:shouldDecodeSourceDataOfMIMEType:	F	Cl	NSObject;NSURLDownload	dm	BOOL	NSURLDownload *	NSString *
download:decideDestinationWithSuggestedFilename:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSString *
download:didCreateDestination:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSString *
downloadDidFinish:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *
download:didFailWithError:	F	Cl	NSObject;NSURLDownload	dm	void	NSURLDownload *	NSError *
URLHandle:resourceDataDidBecomeAvailable:	F	Pr	NSURLHandleClient;NSURLHandle	im	void	NSURLHandle *	NSData *
URLHandleResourceDidBeginLoading:	F	Pr	NSURLHandleClient;NSURLHandle	im	void	NSURLHandle *
URLHandleResourceDidFinishLoading:	F	Pr	NSURLHandleClient;NSURLHandle	im	void	NSURLHandle *
URLHandleResourceDidCancelLoading:	F	Pr	NSURLHandleClient;NSURLHandle	im	void	NSURLHandle *
URLHandle:resourceDidFailLoadingWithReason:	F	Pr	NSURLHandleClient;NSURLHandle	im	void	NSURLHandle *	NSString *
registerURLHandleClass:	F	Cl	NSURLHandle	cm	void	Class
URLHandleClassForURL:	F	Cl	NSURLHandle	cm	Class	NSURL *
status	F	Cl	NSURLHandle	im	NSURLHandleStatus
failureReason	F	Cl	NSURLHandle	im	NSString *
addClient:	F	Cl	NSURLHandle	im	void	id <NSURLHandleClient>
removeClient:	F	Cl	NSURLHandle	im	void	id <NSURLHandleClient>
loadInBackground	F	Cl	NSURLHandle	im	void
cancelLoadInBackground	F	Cl	NSURLHandle	im	void
resourceData	F	Cl	NSURLHandle	im	NSData *
availableResourceData	F	Cl	NSURLHandle	im	NSData *
expectedResourceDataSize	F	Cl	NSURLHandle	im	long long
flushCachedData	F	Cl	NSURLHandle	im	void
backgroundLoadDidFailWithReason:	F	Cl	NSURLHandle	im	void	NSString *
didLoadBytes:loadComplete:	F	Cl	NSURLHandle	im	void	NSData *	BOOL
canInitWithURL:	F	Cl	NSURLHandle	cm	BOOL	NSURL *
cachedHandleForURL:	F	Cl	NSURLHandle	cm	NSURLHandle *	NSURL *
initWithURL:cached:	F	Cl	NSURLHandle	im	id	NSURL *	BOOL
propertyForKey:	F	Cl	NSURLHandle	im	id	NSString *
propertyForKeyIfAvailable:	F	Cl	NSURLHandle	im	id	NSString *
writeProperty:forKey:	F	Cl	NSURLHandle	im	BOOL	id	NSString *
writeData:	F	Cl	NSURLHandle	im	BOOL	NSData *
loadInForeground	F	Cl	NSURLHandle	im	NSData *
beginLoadInBackground	F	Cl	NSURLHandle	im	void
endLoadInBackground	F	Cl	NSURLHandle	im	void
initWithHost:port:protocol:realm:authenticationMethod:	F	Cl	NSURLProtectionSpace	im	id	NSString *	int	NSString *	NSString *	NSString *
initWithProxyHost:port:type:realm:authenticationMethod:	F	Cl	NSURLProtectionSpace	im	id	NSString *	int	NSString *	NSString *	NSString *
realm	F	Cl	NSURLProtectionSpace	im	NSString *
receivesCredentialSecurely	F	Cl	NSURLProtectionSpace	im	BOOL
isProxy	F	Cl	NSURLProtectionSpace	im	BOOL
host	F	Cl	NSURLProtectionSpace	im	NSString *
port	F	Cl	NSURLProtectionSpace	im	int
proxyType	F	Cl	NSURLProtectionSpace	im	NSString *
protocol	F	Cl	NSURLProtectionSpace	im	NSString *
authenticationMethod	F	Cl	NSURLProtectionSpace	im	NSString *
URLProtocol:wasRedirectedToRequest:redirectResponse:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSURLRequest *	NSURLResponse *
URLProtocol:cachedResponseIsValid:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSCachedURLResponse *
URLProtocol:didReceiveResponse:cacheStoragePolicy:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSURLResponse *	NSURLCacheStoragePolicy
URLProtocol:didLoadData:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSData *
URLProtocolDidFinishLoading:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *
URLProtocol:didFailWithError:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSError *
URLProtocol:didReceiveAuthenticationChallenge:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSURLAuthenticationChallenge *
URLProtocol:didCancelAuthenticationChallenge:	F	Pr	NSURLProtocolClient;NSURLProtocol	im	void	NSURLProtocol *	NSURLAuthenticationChallenge *
initWithRequest:cachedResponse:client:	F	Cl	NSURLProtocol	im	id	NSURLRequest *	NSCachedURLResponse *	id <NSURLProtocolClient>
client	F	Cl	NSURLProtocol	im	id <NSURLProtocolClient>
request	F	Cl	NSURLProtocol	im	NSURLRequest *
cachedResponse	F	Cl	NSURLProtocol	im	NSCachedURLResponse *
canInitWithRequest:	F	Cl	NSURLProtocol	cm	BOOL	NSURLRequest *
canonicalRequestForRequest:	F	Cl	NSURLProtocol	cm	NSURLRequest *	NSURLRequest *
requestIsCacheEquivalent:toRequest:	F	Cl	NSURLProtocol	cm	BOOL	NSURLRequest *	NSURLRequest *
startLoading	F	Cl	NSURLProtocol	im	void
stopLoading	F	Cl	NSURLProtocol	im	void
propertyForKey:inRequest:	F	Cl	NSURLProtocol	cm	id	NSString *	NSURLRequest *
setProperty:forKey:inRequest:	F	Cl	NSURLProtocol	cm	void	id	NSString *	NSMutableURLRequest *
registerClass:	F	Cl	NSURLProtocol	cm	BOOL	Class
unregisterClass:	F	Cl	NSURLProtocol	cm	void	Class
requestWithURL:	F	Cl	NSURLRequest	cm	id	NSURL *
requestWithURL:cachePolicy:timeoutInterval:	F	Cl	NSURLRequest	cm	id	NSURL *	NSURLRequestCachePolicy	NSTimeInterval
initWithURL:	F	Cl	NSURLRequest	im	id	NSURL *
initWithURL:cachePolicy:timeoutInterval:	F	Cl	NSURLRequest	im	id	NSURL *	NSURLRequestCachePolicy	NSTimeInterval
URL	F	Cl	NSURLRequest	im	NSURL *
cachePolicy	F	Cl	NSURLRequest	im	NSURLRequestCachePolicy
timeoutInterval	F	Cl	NSURLRequest	im	NSTimeInterval
mainDocumentURL	F	Cl	NSURLRequest	im	NSURL *
setURL:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSURL *
setCachePolicy:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSURLRequestCachePolicy
setTimeoutInterval:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSTimeInterval
setMainDocumentURL:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSURL *
HTTPMethod	F	Cl	NSURLRequest	im	NSString *
allHTTPHeaderFields	F	Cl	NSURLRequest	im	NSDictionary *
valueForHTTPHeaderField:	F	Cl	NSURLRequest	im	NSString *	NSString *
HTTPBody	F	Cl	NSURLRequest	im	NSData *
HTTPBodyStream	F	Cl	NSURLRequest	im	NSInputStream *
HTTPShouldHandleCookies	F	Cl	NSURLRequest	im	BOOL
setHTTPMethod:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSString *
setAllHTTPHeaderFields:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSDictionary *
setValue:forHTTPHeaderField:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSString *	NSString *
addValue:forHTTPHeaderField:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSString *	NSString *
setHTTPBody:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSData *
setHTTPBodyStream:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	NSInputStream *
setHTTPShouldHandleCookies:	F	Cl	NSMutableURLRequest;NSURLRequest	im	void	BOOL
initWithURL:MIMEType:expectedContentLength:textEncodingName:	F	Cl	NSURLResponse	im	id	NSURL *	NSString *	int	NSString *
URL	F	Cl	NSURLResponse	im	NSURL *
MIMEType	F	Cl	NSURLResponse	im	NSString *
expectedContentLength	F	Cl	NSURLResponse	im	long long
textEncodingName	F	Cl	NSURLResponse	im	NSString *
suggestedFilename	F	Cl	NSURLResponse	im	NSString *
statusCode	F	Cl	NSHTTPURLResponse;NSURLResponse	im	int
allHeaderFields	F	Cl	NSHTTPURLResponse;NSURLResponse	im	NSDictionary *
localizedStringForStatusCode:	F	Cl	NSHTTPURLResponse;NSURLResponse	cm	NSString *	int
standardUserDefaults	F	Cl	NSUserDefaults	cm	NSUserDefaults *
resetStandardUserDefaults	F	Cl	NSUserDefaults	cm	void
init	F	Cl	NSUserDefaults	im	id
initWithUser:	F	Cl	NSUserDefaults	im	id	NSString *
objectForKey:	F	Cl	NSUserDefaults	im	id	NSString *
setObject:forKey:	F	Cl	NSUserDefaults	im	void	id	NSString *
removeObjectForKey:	F	Cl	NSUserDefaults	im	void	NSString *
stringForKey:	F	Cl	NSUserDefaults	im	NSString *	NSString *
arrayForKey:	F	Cl	NSUserDefaults	im	NSArray *	NSString *
dictionaryForKey:	F	Cl	NSUserDefaults	im	NSDictionary *	NSString *
dataForKey:	F	Cl	NSUserDefaults	im	NSData *	NSString *
stringArrayForKey:	F	Cl	NSUserDefaults	im	NSArray *	NSString *
integerForKey:	F	Cl	NSUserDefaults	im	int	NSString *
floatForKey:	F	Cl	NSUserDefaults	im	float	NSString *
boolForKey:	F	Cl	NSUserDefaults	im	BOOL	NSString *
setInteger:forKey:	F	Cl	NSUserDefaults	im	void	int	NSString *
setFloat:forKey:	F	Cl	NSUserDefaults	im	void	float	NSString *
setBool:forKey:	F	Cl	NSUserDefaults	im	void	BOOL	NSString *
registerDefaults:	F	Cl	NSUserDefaults	im	void	NSDictionary *
addSuiteNamed:	F	Cl	NSUserDefaults	im	void	NSString *
removeSuiteNamed:	F	Cl	NSUserDefaults	im	void	NSString *
dictionaryRepresentation	F	Cl	NSUserDefaults	im	NSDictionary *
volatileDomainNames	F	Cl	NSUserDefaults	im	NSArray *
volatileDomainForName:	F	Cl	NSUserDefaults	im	NSDictionary *	NSString *
setVolatileDomain:forName:	F	Cl	NSUserDefaults	im	void	NSDictionary *	NSString *
removeVolatileDomainForName:	F	Cl	NSUserDefaults	im	void	NSString *
persistentDomainNames	F	Cl	NSUserDefaults	im	NSArray *
persistentDomainForName:	F	Cl	NSUserDefaults	im	NSDictionary *	NSString *
setPersistentDomain:forName:	F	Cl	NSUserDefaults	im	void	NSDictionary *	NSString *
removePersistentDomainForName:	F	Cl	NSUserDefaults	im	void	NSString *
synchronize	F	Cl	NSUserDefaults	im	BOOL
objectIsForcedForKey:	F	Cl	NSUserDefaults	im	BOOL	NSString *
objectIsForcedForKey:inDomain:	F	Cl	NSUserDefaults	im	BOOL	NSString *	NSString *
getValue:	F	Cl	NSValue	im	void	void *
objCType	F	Cl	NSValue	im	const char *
initWithBytes:objCType:	F	Cl	NSValue	im	id	const void *	const char *
valueWithBytes:objCType:	F	Cl	NSValue	cm	NSValue *	const void *	const char *
value:withObjCType:	F	Cl	NSValue	cm	NSValue *	const void *	const char *
valueWithNonretainedObject:	F	Cl	NSValue	cm	NSValue *	id
nonretainedObjectValue	F	Cl	NSValue	im	id
valueWithPointer:	F	Cl	NSValue	cm	NSValue *	const void *
pointerValue	F	Cl	NSValue	im	void *
isEqualToValue:	F	Cl	NSValue	im	BOOL	NSValue *
charValue	F	Cl	NSNumber;NSValue	im	char
unsignedCharValue	F	Cl	NSNumber;NSValue	im	unsigned char
shortValue	F	Cl	NSNumber;NSValue	im	short
unsignedShortValue	F	Cl	NSNumber;NSValue	im	unsigned short
intValue	F	Cl	NSNumber;NSValue	im	int
unsignedIntValue	F	Cl	NSNumber;NSValue	im	unsigned int
longValue	F	Cl	NSNumber;NSValue	im	long
unsignedLongValue	F	Cl	NSNumber;NSValue	im	unsigned long
longLongValue	F	Cl	NSNumber;NSValue	im	long long
unsignedLongLongValue	F	Cl	NSNumber;NSValue	im	unsigned long long
floatValue	F	Cl	NSNumber;NSValue	im	float
doubleValue	F	Cl	NSNumber;NSValue	im	double
boolValue	F	Cl	NSNumber;NSValue	im	BOOL
stringValue	F	Cl	NSNumber;NSValue	im	NSString *
compare:	F	Cl	NSNumber;NSValue	im	NSComparisonResult	NSNumber *
isEqualToNumber:	F	Cl	NSNumber;NSValue	im	BOOL	NSNumber *
descriptionWithLocale:	F	Cl	NSNumber;NSValue	im	NSString *	NSDictionary *
initWithChar:	F	Cl	NSNumber;NSValue	im	id	char
initWithUnsignedChar:	F	Cl	NSNumber;NSValue	im	id	unsigned char
initWithShort:	F	Cl	NSNumber;NSValue	im	id	short
initWithUnsignedShort:	F	Cl	NSNumber;NSValue	im	id	unsigned short
initWithInt:	F	Cl	NSNumber;NSValue	im	id	int
initWithUnsignedInt:	F	Cl	NSNumber;NSValue	im	id	unsigned int
initWithLong:	F	Cl	NSNumber;NSValue	im	id	long
initWithUnsignedLong:	F	Cl	NSNumber;NSValue	im	id	unsigned long
initWithLongLong:	F	Cl	NSNumber;NSValue	im	id	long long
initWithUnsignedLongLong:	F	Cl	NSNumber;NSValue	im	id	unsigned long long
initWithFloat:	F	Cl	NSNumber;NSValue	im	id	float
initWithDouble:	F	Cl	NSNumber;NSValue	im	id	double
initWithBool:	F	Cl	NSNumber;NSValue	im	id	BOOL
numberWithChar:	F	Cl	NSNumber;NSValue	cm	NSNumber *	char
numberWithUnsignedChar:	F	Cl	NSNumber;NSValue	cm	NSNumber *	unsigned char
numberWithShort:	F	Cl	NSNumber;NSValue	cm	NSNumber *	short
numberWithUnsignedShort:	F	Cl	NSNumber;NSValue	cm	NSNumber *	unsigned short
numberWithInt:	F	Cl	NSNumber;NSValue	cm	NSNumber *	int
numberWithUnsignedInt:	F	Cl	NSNumber;NSValue	cm	NSNumber *	unsigned int
numberWithLong:	F	Cl	NSNumber;NSValue	cm	NSNumber *	long
numberWithUnsignedLong:	F	Cl	NSNumber;NSValue	cm	NSNumber *	unsigned long
numberWithLongLong:	F	Cl	NSNumber;NSValue	cm	NSNumber *	long long
numberWithUnsignedLongLong:	F	Cl	NSNumber;NSValue	cm	NSNumber *	unsigned long long
numberWithFloat:	F	Cl	NSNumber;NSValue	cm	NSNumber *	float
numberWithDouble:	F	Cl	NSNumber;NSValue	cm	NSNumber *	double
numberWithBool:	F	Cl	NSNumber;NSValue	cm	NSNumber *	BOOL
setValueTransformer:forName:	F	Cl	NSValueTransformer	cm	void	NSValueTransformer *	NSString *
valueTransformerForName:	F	Cl	NSValueTransformer	cm	NSValueTransformer *	NSString *
valueTransformerNames	F	Cl	NSValueTransformer	cm	NSArray *
transformedValueClass	F	Cl	NSValueTransformer	cm	Class
allowsReverseTransformation	F	Cl	NSValueTransformer	cm	BOOL
transformedValue:	F	Cl	NSValueTransformer	im	id	id
reverseTransformedValue:	F	Cl	NSValueTransformer	im	id	id
initWithXMLString:options:error:	F	Cl	NSXMLDocument	im	id	NSString *	unsigned int	NSError **
initWithContentsOfURL:options:error:	F	Cl	NSXMLDocument	im	id	NSURL *	unsigned int	NSError **
initWithData:options:error:	F	Cl	NSXMLDocument	im	id	NSData *	unsigned int	NSError **
initWithRootElement:	F	Cl	NSXMLDocument	im	id	NSXMLElement *
replacementClassForClass:	F	Cl	NSXMLDocument	cm	Class	Class
setCharacterEncoding:	F	Cl	NSXMLDocument	im	void	NSString *
characterEncoding	F	Cl	NSXMLDocument	im	NSString *
setVersion:	F	Cl	NSXMLDocument	im	void	NSString *
version	F	Cl	NSXMLDocument	im	NSString *
setStandalone:	F	Cl	NSXMLDocument	im	void	BOOL
isStandalone	F	Cl	NSXMLDocument	im	BOOL
setDocumentContentKind:	F	Cl	NSXMLDocument	im	void	NSXMLDocumentContentKind
documentContentKind	F	Cl	NSXMLDocument	im	NSXMLDocumentContentKind
setMIMEType:	F	Cl	NSXMLDocument	im	void	NSString *
MIMEType	F	Cl	NSXMLDocument	im	NSString *
setDTD:	F	Cl	NSXMLDocument	im	void	NSXMLDTD *
DTD	F	Cl	NSXMLDocument	im	NSXMLDTD *
setRootElement:	F	Cl	NSXMLDocument	im	void	NSXMLNode *
rootElement	F	Cl	NSXMLDocument	im	NSXMLElement *
insertChild:atIndex:	F	Cl	NSXMLDocument	im	void	NSXMLNode *	unsigned
insertChildren:atIndex:	F	Cl	NSXMLDocument	im	void	NSArray *	unsigned
removeChildAtIndex:	F	Cl	NSXMLDocument	im	void	unsigned
setChildren:	F	Cl	NSXMLDocument	im	void	NSArray *
addChild:	F	Cl	NSXMLDocument	im	void	NSXMLNode *
replaceChildAtIndex:withNode:	F	Cl	NSXMLDocument	im	void	unsigned	NSXMLNode *
XMLData	F	Cl	NSXMLDocument	im	NSData *
XMLDataWithOptions:	F	Cl	NSXMLDocument	im	NSData *	unsigned int
objectByApplyingXSLT:arguments:error:	F	Cl	NSXMLDocument	im	id	NSData *	NSDictionary *	NSError **
objectByApplyingXSLTString:arguments:error:	F	Cl	NSXMLDocument	im	id	NSString *	NSDictionary *	NSError **
objectByApplyingXSLTAtURL:arguments:error:	F	Cl	NSXMLDocument	im	id	NSURL *	NSDictionary *	NSError **
validateAndReturnError:	F	Cl	NSXMLDocument	im	BOOL	NSError **
initWithContentsOfURL:options:error:	F	Cl	NSXMLDTD	im	id	NSURL *	unsigned int	NSError **
initWithData:options:error:	F	Cl	NSXMLDTD	im	id	NSData *	unsigned int	NSError **
setPublicID:	F	Cl	NSXMLDTD	im	void	NSString *
publicID	F	Cl	NSXMLDTD	im	NSString *
setSystemID:	F	Cl	NSXMLDTD	im	void	NSString *
systemID	F	Cl	NSXMLDTD	im	NSString *
insertChild:atIndex:	F	Cl	NSXMLDTD	im	void	NSXMLNode *	unsigned
insertChildren:atIndex:	F	Cl	NSXMLDTD	im	void	NSArray *	unsigned
removeChildAtIndex:	F	Cl	NSXMLDTD	im	void	unsigned
setChildren:	F	Cl	NSXMLDTD	im	void	NSArray *
addChild:	F	Cl	NSXMLDTD	im	void	NSXMLNode *
replaceChildAtIndex:withNode:	F	Cl	NSXMLDTD	im	void	unsigned	NSXMLNode *
entityDeclarationForName:	F	Cl	NSXMLDTD	im	NSXMLDTDNode *	NSString *
notationDeclarationForName:	F	Cl	NSXMLDTD	im	NSXMLDTDNode *	NSString *
elementDeclarationForName:	F	Cl	NSXMLDTD	im	NSXMLDTDNode *	NSString *
attributeDeclarationForName:elementName:	F	Cl	NSXMLDTD	im	NSXMLDTDNode *	NSString *	NSString *
predefinedEntityDeclarationForName:	F	Cl	NSXMLDTD	cm	NSXMLDTDNode *	NSString *
initWithXMLString:	F	Cl	NSXMLDTDNode	im	id	NSString *
setDTDKind:	F	Cl	NSXMLDTDNode	im	void	NSXMLDTDNodeKind
DTDKind	F	Cl	NSXMLDTDNode	im	NSXMLDTDNodeKind
isExternal	F	Cl	NSXMLDTDNode	im	BOOL
setPublicID:	F	Cl	NSXMLDTDNode	im	void	NSString *
publicID	F	Cl	NSXMLDTDNode	im	NSString *
setSystemID:	F	Cl	NSXMLDTDNode	im	void	NSString *
systemID	F	Cl	NSXMLDTDNode	im	NSString *
setNotationName:	F	Cl	NSXMLDTDNode	im	void	NSString *
notationName	F	Cl	NSXMLDTDNode	im	NSString *
initWithName:	F	Cl	NSXMLElement	im	id	NSString *
initWithName:URI:	F	Cl	NSXMLElement	im	id	NSString *	NSString *
initWithName:stringValue:	F	Cl	NSXMLElement	im	id	NSString *	NSString *
initWithXMLString:error:	F	Cl	NSXMLElement	im	id	NSString *	NSError **
elementsForName:	F	Cl	NSXMLElement	im	NSArray *	NSString *
elementsForLocalName:URI:	F	Cl	NSXMLElement	im	NSArray *	NSString *	NSString *
addAttribute:	F	Cl	NSXMLElement	im	void	NSXMLNode *
removeAttributeForName:	F	Cl	NSXMLElement	im	void	NSString *
setAttributes:	F	Cl	NSXMLElement	im	void	NSArray *
setAttributesAsDictionary:	F	Cl	NSXMLElement	im	void	NSDictionary *
attributes	F	Cl	NSXMLElement	im	NSArray *
attributeForName:	F	Cl	NSXMLElement	im	NSXMLNode *	NSString *
attributeForLocalName:URI:	F	Cl	NSXMLElement	im	NSXMLNode *	NSString *	NSString *
addNamespace:	F	Cl	NSXMLElement	im	void	NSXMLNode *
removeNamespaceForPrefix:	F	Cl	NSXMLElement	im	void	NSString *
setNamespaces:	F	Cl	NSXMLElement	im	void	NSArray *
namespaces	F	Cl	NSXMLElement	im	NSArray *
namespaceForPrefix:	F	Cl	NSXMLElement	im	NSXMLNode *	NSString *
resolveNamespaceForName:	F	Cl	NSXMLElement	im	NSXMLNode *	NSString *
resolvePrefixForNamespaceURI:	F	Cl	NSXMLElement	im	NSString *	NSString *
insertChild:atIndex:	F	Cl	NSXMLElement	im	void	NSXMLNode *	unsigned
insertChildren:atIndex:	F	Cl	NSXMLElement	im	void	NSArray *	unsigned
removeChildAtIndex:	F	Cl	NSXMLElement	im	void	unsigned
setChildren:	F	Cl	NSXMLElement	im	void	NSArray *
addChild:	F	Cl	NSXMLElement	im	void	NSXMLNode *
replaceChildAtIndex:withNode:	F	Cl	NSXMLElement	im	void	unsigned	NSXMLNode *
normalizeAdjacentTextNodesPreservingCDATA:	F	Cl	NSXMLElement	im	void	BOOL
initWithKind:	F	Cl	NSXMLNode	im	id	NSXMLNodeKind
initWithKind:options:	F	Cl	NSXMLNode	im	id	NSXMLNodeKind	unsigned int
document	F	Cl	NSXMLNode	cm	id
documentWithRootElement:	F	Cl	NSXMLNode	cm	id	NSXMLElement *
elementWithName:	F	Cl	NSXMLNode	cm	id	NSString *
elementWithName:URI:	F	Cl	NSXMLNode	cm	id	NSString *	NSString *
elementWithName:stringValue:	F	Cl	NSXMLNode	cm	id	NSString *	NSString *
elementWithName:children:attributes:	F	Cl	NSXMLNode	cm	id	NSString *	NSArray *	NSArray *
attributeWithName:stringValue:	F	Cl	NSXMLNode	cm	id	NSString *	NSString *
attributeWithName:URI:stringValue:	F	Cl	NSXMLNode	cm	id	NSString *	NSString *	NSString *
namespaceWithName:stringValue:	F	Cl	NSXMLNode	cm	id	NSString *	NSString *
processingInstructionWithName:stringValue:	F	Cl	NSXMLNode	cm	id	NSString *	NSString *
commentWithStringValue:	F	Cl	NSXMLNode	cm	id	NSString *
textWithStringValue:	F	Cl	NSXMLNode	cm	id	NSString *
DTDNodeWithXMLString:	F	Cl	NSXMLNode	cm	id	NSString *
kind	F	Cl	NSXMLNode	im	NSXMLNodeKind
setName:	F	Cl	NSXMLNode	im	void	NSString *
name	F	Cl	NSXMLNode	im	NSString *
setObjectValue:	F	Cl	NSXMLNode	im	void	id
objectValue	F	Cl	NSXMLNode	im	id
setStringValue:	F	Cl	NSXMLNode	im	void	NSString *
setStringValue:resolvingEntities:	F	Cl	NSXMLNode	im	void	NSString *	BOOL
stringValue	F	Cl	NSXMLNode	im	NSString *
index	F	Cl	NSXMLNode	im	unsigned
level	F	Cl	NSXMLNode	im	unsigned
rootDocument	F	Cl	NSXMLNode	im	NSXMLDocument *
parent	F	Cl	NSXMLNode	im	NSXMLNode *
childCount	F	Cl	NSXMLNode	im	unsigned
children	F	Cl	NSXMLNode	im	NSArray *
childAtIndex:	F	Cl	NSXMLNode	im	NSXMLNode *	unsigned
previousSibling	F	Cl	NSXMLNode	im	NSXMLNode *
nextSibling	F	Cl	NSXMLNode	im	NSXMLNode *
previousNode	F	Cl	NSXMLNode	im	NSXMLNode *
nextNode	F	Cl	NSXMLNode	im	NSXMLNode *
detach	F	Cl	NSXMLNode	im	void
XPath	F	Cl	NSXMLNode	im	NSString *
localName	F	Cl	NSXMLNode	im	NSString *
prefix	F	Cl	NSXMLNode	im	NSString *
setURI:	F	Cl	NSXMLNode	im	void	NSString *
URI	F	Cl	NSXMLNode	im	NSString *
localNameForName:	F	Cl	NSXMLNode	cm	NSString *	NSString *
prefixForName:	F	Cl	NSXMLNode	cm	NSString *	NSString *
predefinedNamespaceForPrefix:	F	Cl	NSXMLNode	cm	NSXMLNode *	NSString *
description	F	Cl	NSXMLNode	im	NSString *
XMLString	F	Cl	NSXMLNode	im	NSString *
XMLStringWithOptions:	F	Cl	NSXMLNode	im	NSString *	unsigned int
canonicalXMLStringPreservingComments:	F	Cl	NSXMLNode	im	NSString *	BOOL
nodesForXPath:error:	F	Cl	NSXMLNode	im	NSArray *	NSString *	NSError **
objectsForXQuery:constants:error:	F	Cl	NSXMLNode	im	NSArray *	NSString *	NSDictionary *	NSError **
objectsForXQuery:error:	F	Cl	NSXMLNode	im	NSArray *	NSString *	NSError **
initWithContentsOfURL:	F	Cl	NSXMLParser	im	id	NSURL *
initWithData:	F	Cl	NSXMLParser	im	id	NSData *
delegate	F	Cl	NSXMLParser	im	id
setDelegate:	F	Cl	NSXMLParser	im	void	id
setShouldProcessNamespaces:	F	Cl	NSXMLParser	im	void	BOOL
setShouldReportNamespacePrefixes:	F	Cl	NSXMLParser	im	void	BOOL
setShouldResolveExternalEntities:	F	Cl	NSXMLParser	im	void	BOOL
shouldProcessNamespaces	F	Cl	NSXMLParser	im	BOOL
shouldReportNamespacePrefixes	F	Cl	NSXMLParser	im	BOOL
shouldResolveExternalEntities	F	Cl	NSXMLParser	im	BOOL
parse	F	Cl	NSXMLParser	im	BOOL
abortParsing	F	Cl	NSXMLParser	im	void
parserError	F	Cl	NSXMLParser	im	NSError *
publicID	F	Cl	NSXMLParser	im	NSString *
systemID	F	Cl	NSXMLParser	im	NSString *
lineNumber	F	Cl	NSXMLParser	im	int
columnNumber	F	Cl	NSXMLParser	im	int
parserDidStartDocument:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *
parserDidEndDocument:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *
parser:foundNotationDeclarationWithName:publicID:systemID:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *	NSString *
parser:foundUnparsedEntityDeclarationWithName:publicID:systemID:notationName:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *	NSString *	NSString *
parser:foundAttributeDeclarationWithName:forElement:type:defaultValue:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *	NSString *	NSString *
parser:foundElementDeclarationWithName:model:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *
parser:foundInternalEntityDeclarationWithName:value:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *
parser:foundExternalEntityDeclarationWithName:publicID:systemID:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *	NSString *
parser:didStartElement:namespaceURI:qualifiedName:attributes:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *	NSString *	NSDictionary *
parser:didEndElement:namespaceURI:qualifiedName:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *	NSString *
parser:didStartMappingPrefix:toURI:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *
parser:didEndMappingPrefix:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *
parser:foundCharacters:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *
parser:foundIgnorableWhitespace:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *
parser:foundProcessingInstructionWithTarget:data:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *	NSString *
parser:foundComment:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSString *
parser:foundCDATA:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSData *
parser:resolveExternalEntityName:systemID:	F	Cl	NSObject;NSXMLParser	dm	NSData *	NSXMLParser *	NSString *	NSString *
parser:parseErrorOccurred:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSError *
parser:validationErrorOccurred:	F	Cl	NSObject;NSXMLParser	dm	void	NSXMLParser *	NSError *
remoteNameRequestComplete:status:	Blue	Pr	IOBluetoothDeviceAsyncCallbacks;IOBluetoothDevice	im	void	IOBluetoothDevice *	IOReturn
connectionComplete:status:	Blue	Pr	IOBluetoothDeviceAsyncCallbacks;IOBluetoothDevice	im	void	IOBluetoothDevice *	IOReturn
sdpQueryComplete:status:	Blue	Pr	IOBluetoothDeviceAsyncCallbacks;IOBluetoothDevice	im	void	IOBluetoothDevice *	IOReturn
registerForConnectNotifications:selector:	Blue	Cl	IOBluetoothDevice	cm	IOBluetoothUserNotification *	id	SEL
registerForDisconnectNotification:selector:	Blue	Cl	IOBluetoothDevice	im	IOBluetoothUserNotification *	id	SEL
withAddress:	Blue	Cl	IOBluetoothDevice	cm	IOBluetoothDevice *	const BluetoothDeviceAddress *
withDeviceRef:	Blue	Cl	IOBluetoothDevice	cm	IOBluetoothDevice *	IOBluetoothDeviceRef
getDeviceRef	Blue	Cl	IOBluetoothDevice	im	IOBluetoothDeviceRef
isEqual:	Blue	Cl	IOBluetoothDevice	im	BOOL	id
openL2CAPChannelSync:withPSM:delegate:	Blue	Cl	IOBluetoothDevice	im	IOReturn	IOBluetoothL2CAPChannel **	BluetoothL2CAPPSM	id
openL2CAPChannelAsync:withPSM:delegate:	Blue	Cl	IOBluetoothDevice	im	IOReturn	IOBluetoothL2CAPChannel **	BluetoothL2CAPPSM	id
openL2CAPChannel:findExisting:newChannel:	Blue	Cl	IOBluetoothDevice	im	IOReturn	BluetoothL2CAPPSM	BOOL	IOBluetoothL2CAPChannel **
sendL2CAPEchoRequest:length:	Blue	Cl	IOBluetoothDevice	im	IOReturn	void *	UInt16
openRFCOMMChannel:channel:	Blue	Cl	IOBluetoothDevice	im	IOReturn	BluetoothRFCOMMChannelID	IOBluetoothRFCOMMChannel **
openRFCOMMChannelSync:withChannelID:delegate:	Blue	Cl	IOBluetoothDevice	im	IOReturn	IOBluetoothRFCOMMChannel **	BluetoothRFCOMMChannelID	id
openRFCOMMChannelAsync:withChannelID:delegate:	Blue	Cl	IOBluetoothDevice	im	IOReturn	IOBluetoothRFCOMMChannel **	BluetoothRFCOMMChannelID	id
getClassOfDevice	Blue	Cl	IOBluetoothDevice	im	BluetoothClassOfDevice
getServiceClassMajor	Blue	Cl	IOBluetoothDevice	im	BluetoothServiceClassMajor
getDeviceClassMajor	Blue	Cl	IOBluetoothDevice	im	BluetoothDeviceClassMajor
getDeviceClassMinor	Blue	Cl	IOBluetoothDevice	im	BluetoothDeviceClassMinor
getName	Blue	Cl	IOBluetoothDevice	im	NSString *
getNameOrAddress	Blue	Cl	IOBluetoothDevice	im	NSString *
getLastNameUpdate	Blue	Cl	IOBluetoothDevice	im	NSDate *
getAddress	Blue	Cl	IOBluetoothDevice	im	const BluetoothDeviceAddress *
getAddressString	Blue	Cl	IOBluetoothDevice	im	NSString *
getPageScanRepetitionMode	Blue	Cl	IOBluetoothDevice	im	BluetoothPageScanRepetitionMode
getPageScanPeriodMode	Blue	Cl	IOBluetoothDevice	im	BluetoothPageScanPeriodMode
getPageScanMode	Blue	Cl	IOBluetoothDevice	im	BluetoothPageScanMode
getClockOffset	Blue	Cl	IOBluetoothDevice	im	BluetoothClockOffset
getLastInquiryUpdate	Blue	Cl	IOBluetoothDevice	im	NSDate *
isConnected	Blue	Cl	IOBluetoothDevice	im	BOOL
openConnection	Blue	Cl	IOBluetoothDevice	im	IOReturn
openConnection:	Blue	Cl	IOBluetoothDevice	im	IOReturn	id
openConnection:withPageTimeout:authenticationRequired:	Blue	Cl	IOBluetoothDevice	im	IOReturn	id	BluetoothHCIPageTimeout	BOOL
closeConnection	Blue	Cl	IOBluetoothDevice	im	IOReturn
remoteNameRequest:	Blue	Cl	IOBluetoothDevice	im	IOReturn	id
remoteNameRequest:withPageTimeout:	Blue	Cl	IOBluetoothDevice	im	IOReturn	id	BluetoothHCIPageTimeout
requestAuthentication	Blue	Cl	IOBluetoothDevice	im	IOReturn
getConnectionHandle	Blue	Cl	IOBluetoothDevice	im	BluetoothConnectionHandle
isIncoming	Blue	Cl	IOBluetoothDevice	im	BOOL
getLinkType	Blue	Cl	IOBluetoothDevice	im	BluetoothLinkType
getEncryptionMode	Blue	Cl	IOBluetoothDevice	im	BluetoothHCIEncryptionMode
performSDPQuery:	Blue	Cl	IOBluetoothDevice	im	IOReturn	id
getServices	Blue	Cl	IOBluetoothDevice	im	NSArray *
getLastServicesUpdate	Blue	Cl	IOBluetoothDevice	im	NSDate *
getServiceRecordForUUID:	Blue	Cl	IOBluetoothDevice	im	IOBluetoothSDPServiceRecord *	IOBluetoothSDPUUID *
favoriteDevices	Blue	Cl	IOBluetoothDevice	cm	NSArray *
isFavorite	Blue	Cl	IOBluetoothDevice	im	BOOL
addToFavorites	Blue	Cl	IOBluetoothDevice	im	IOReturn
removeFromFavorites	Blue	Cl	IOBluetoothDevice	im	IOReturn
recentDevices:	Blue	Cl	IOBluetoothDevice	cm	NSArray *	UInt32
recentAccessDate	Blue	Cl	IOBluetoothDevice	im	NSDate *
pairedDevices	Blue	Cl	IOBluetoothDevice	cm	NSArray *
isPaired	Blue	Cl	IOBluetoothDevice	im	BOOL
description	Blue	Cl	IOBluetoothDevice	im	NSString *
initWithCoder:	Blue	Cl	IOBluetoothDevice	im	id	NSCoder *
encodeWithCoder:	Blue	Cl	IOBluetoothDevice	im	void	NSCoder *
awakeAfterUsingCoder:	Blue	Cl	IOBluetoothDevice	im	id	NSCoder *
inquiryWithDelegate:	Blue	Cl	IOBluetoothDeviceInquiry	cm	IOBluetoothDeviceInquiry *	id
initWithDelegate:	Blue	Cl	IOBluetoothDeviceInquiry	im	id	id
start	Blue	Cl	IOBluetoothDeviceInquiry	im	IOReturn
stop	Blue	Cl	IOBluetoothDeviceInquiry	im	IOReturn
setInquiryLength:	Blue	Cl	IOBluetoothDeviceInquiry	im	uint8_t	uint8_t
inquiryLength	Blue	Cl	IOBluetoothDeviceInquiry	im	uint8_t
setUpdateNewDeviceNames:	Blue	Cl	IOBluetoothDeviceInquiry	im	void	BOOL
updateNewDeviceNames	Blue	Cl	IOBluetoothDeviceInquiry	im	BOOL
setDelegate:	Blue	Cl	IOBluetoothDeviceInquiry	im	void	id
delegate	Blue	Cl	IOBluetoothDeviceInquiry	im	id
foundDevices	Blue	Cl	IOBluetoothDeviceInquiry	im	NSArray *
clearFoundDevices	Blue	Cl	IOBluetoothDeviceInquiry	im	void
setSearchCriteria:majorDeviceClass:minorDeviceClass:	Blue	Cl	IOBluetoothDeviceInquiry	im	void	BluetoothServiceClassMajor	BluetoothDeviceClassMajor	BluetoothDeviceClassMinor
deviceInquiryStarted:	Blue	Cl	NSObject;IOBluetoothDeviceInquiry	dm	void	IOBluetoothDeviceInquiry *
deviceInquiryDeviceFound:device:	Blue	Cl	NSObject;IOBluetoothDeviceInquiry	dm	void	IOBluetoothDeviceInquiry *	IOBluetoothDevice *
deviceInquiryUpdatingDeviceNamesStarted:devicesRemaining:	Blue	Cl	NSObject;IOBluetoothDeviceInquiry	dm	void	IOBluetoothDeviceInquiry *	int
deviceInquiryDeviceNameUpdated:device:devicesRemaining:	Blue	Cl	NSObject;IOBluetoothDeviceInquiry	dm	void	IOBluetoothDeviceInquiry *	IOBluetoothDevice *	int
deviceInquiryComplete:error:aborted:	Blue	Cl	NSObject;IOBluetoothDeviceInquiry	dm	void	IOBluetoothDeviceInquiry *	IOReturn	BOOL
registerForChannelOpenNotifications:selector:	Blue	Cl	IOBluetoothL2CAPChannel	cm	IOBluetoothUserNotification *	id	SEL
registerForChannelOpenNotifications:selector:withPSM:direction:	Blue	Cl	IOBluetoothL2CAPChannel	cm	IOBluetoothUserNotification *	id	SEL	BluetoothL2CAPPSM	IOBluetoothUserNotificationChannelDirection
withL2CAPChannelRef:	Blue	Cl	IOBluetoothL2CAPChannel	cm	IOBluetoothL2CAPChannel *	IOBluetoothL2CAPChannelRef
getL2CAPChannelRef	Blue	Cl	IOBluetoothL2CAPChannel	im	IOBluetoothL2CAPChannelRef
withObjectID:	Blue	Cl	IOBluetoothL2CAPChannel	cm	IOBluetoothL2CAPChannel *	IOBluetoothObjectID
closeChannel	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn
getOutgoingMTU	Blue	Cl	IOBluetoothL2CAPChannel	im	BluetoothL2CAPMTU
getIncomingMTU	Blue	Cl	IOBluetoothL2CAPChannel	im	BluetoothL2CAPMTU
requestRemoteMTU:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn	BluetoothL2CAPMTU
write:length:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn	void *	UInt16
writeAsync:length:refcon:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn	void *	UInt16	void *
writeSync:length:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn	void *	UInt16
registerIncomingDataListener:refCon:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn	IOBluetoothL2CAPChannelIncomingDataListener	void *
setDelegate:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOReturn	id
getDevice	Blue	Cl	IOBluetoothL2CAPChannel	im	IOBluetoothDevice *
getObjectID	Blue	Cl	IOBluetoothL2CAPChannel	im	IOBluetoothObjectID
getPSM	Blue	Cl	IOBluetoothL2CAPChannel	im	BluetoothL2CAPPSM
getLocalChannelID	Blue	Cl	IOBluetoothL2CAPChannel	im	BluetoothL2CAPChannelID
getRemoteChannelID	Blue	Cl	IOBluetoothL2CAPChannel	im	BluetoothL2CAPChannelID
isIncoming	Blue	Cl	IOBluetoothL2CAPChannel	im	BOOL
registerForChannelCloseNotification:selector:	Blue	Cl	IOBluetoothL2CAPChannel	im	IOBluetoothUserNotification *	id	SEL
description	Blue	Cl	IOBluetoothL2CAPChannel	im	NSString *
l2capChannelData:data:length:	Blue	Pr	IOBluetoothL2CAPChannelDelegate;IOBluetoothL2CAPChannel	im	void	IOBluetoothL2CAPChannel *	void *	size_t
l2capChannelOpenComplete:status:	Blue	Pr	IOBluetoothL2CAPChannelDelegate;IOBluetoothL2CAPChannel	im	void	IOBluetoothL2CAPChannel *	IOReturn
l2capChannelClosed:	Blue	Pr	IOBluetoothL2CAPChannelDelegate;IOBluetoothL2CAPChannel	im	void	IOBluetoothL2CAPChannel *
l2capChannelReconfigured:	Blue	Pr	IOBluetoothL2CAPChannelDelegate;IOBluetoothL2CAPChannel	im	void	IOBluetoothL2CAPChannel *
l2capChannelWriteComplete:refcon:status:	Blue	Pr	IOBluetoothL2CAPChannelDelegate;IOBluetoothL2CAPChannel	im	void	IOBluetoothL2CAPChannel *	void *	IOReturn
l2capChannelQueueSpaceAvailable:	Blue	Pr	IOBluetoothL2CAPChannelDelegate;IOBluetoothL2CAPChannel	im	void	IOBluetoothL2CAPChannel *
withSDPServiceRecord:	Blue	Cl	IOBluetoothOBEXSession	cm	IOBluetoothOBEXSession *	IOBluetoothSDPServiceRecord *
withDevice:channelID:	Blue	Cl	IOBluetoothOBEXSession	cm	IOBluetoothOBEXSession *	IOBluetoothDevice *	BluetoothRFCOMMChannelID
withIncomingRFCOMMChannel:eventSelector:selectorTarget:refCon:	Blue	Cl	IOBluetoothOBEXSession	cm	IOBluetoothOBEXSession *	IOBluetoothRFCOMMChannel *	SEL	id	void *
initWithSDPServiceRecord:	Blue	Cl	IOBluetoothOBEXSession	im	id	IOBluetoothSDPServiceRecord *
initWithDevice:channelID:	Blue	Cl	IOBluetoothOBEXSession	im	id	IOBluetoothDevice *	BluetoothRFCOMMChannelID
initWithIncomingRFCOMMChannel:eventSelector:selectorTarget:refCon:	Blue	Cl	IOBluetoothOBEXSession	im	id	IOBluetoothRFCOMMChannel *	SEL	id	void *
getRFCOMMChannel	Blue	Cl	IOBluetoothOBEXSession	im	IOBluetoothRFCOMMChannel *
getDevice	Blue	Cl	IOBluetoothOBEXSession	im	IOBluetoothDevice *
sendBufferTroughChannel	Blue	Cl	IOBluetoothOBEXSession	im	IOReturn
restartTransmission	Blue	Cl	IOBluetoothOBEXSession	im	void
isSessionTargetAMac	Blue	Cl	IOBluetoothOBEXSession	im	BOOL
openTransportConnection:selectorTarget:refCon:	Blue	Cl	IOBluetoothOBEXSession	im	OBEXError	SEL	id	void *
hasOpenTransportConnection	Blue	Cl	IOBluetoothOBEXSession	im	BOOL
closeTransportConnection	Blue	Cl	IOBluetoothOBEXSession	im	OBEXError
sendDataToTransport:dataLength:	Blue	Cl	IOBluetoothOBEXSession	im	OBEXError	void *	size_t
setOpenTransportConnectionAsyncSelector:target:refCon:	Blue	Cl	IOBluetoothOBEXSession	im	void	SEL	id	id
setOBEXSessionOpenConnectionCallback:refCon:	Blue	Cl	IOBluetoothOBEXSession	im	void	IOBluetoothOBEXSessionOpenConnectionCallback	void *
registerForChannelOpenNotifications:selector:	Blue	Cl	IOBluetoothRFCOMMChannel	cm	IOBluetoothUserNotification *	id	SEL
registerForChannelOpenNotifications:selector:withChannelID:direction:	Blue	Cl	IOBluetoothRFCOMMChannel	cm	IOBluetoothUserNotification *	id	SEL	BluetoothRFCOMMChannelID	IOBluetoothUserNotificationChannelDirection
withRFCOMMChannelRef:	Blue	Cl	IOBluetoothRFCOMMChannel	cm	IOBluetoothRFCOMMChannel *	IOBluetoothRFCOMMChannelRef
withObjectID:	Blue	Cl	IOBluetoothRFCOMMChannel	cm	IOBluetoothRFCOMMChannel *	IOBluetoothObjectID
getRFCOMMChannelRef	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOBluetoothRFCOMMChannelRef
closeChannel	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn
isOpen	Blue	Cl	IOBluetoothRFCOMMChannel	im	BOOL
getMTU	Blue	Cl	IOBluetoothRFCOMMChannel	im	BluetoothRFCOMMMTU
isTransmissionPaused	Blue	Cl	IOBluetoothRFCOMMChannel	im	BOOL
write:length:sleep:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	void *	UInt16	BOOL
writeAsync:length:refcon:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	void *	UInt16	void *
writeSync:length:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	void *	UInt16
writeSimple:length:sleep:bytesSent:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	void *	UInt16	BOOL	UInt32 *
setSerialParameters:dataBits:parity:stopBits:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	UInt32	UInt8	BluetoothRFCOMMParityType	UInt8
sendRemoteLineStatus:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	BluetoothRFCOMMLineStatus
registerIncomingDataListener:refCon:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	IOBluetoothRFCOMMChannelIncomingDataListener	void *
registerIncomingEventListener:refCon:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	IOBluetoothRFCOMMChannelIncomingEventListener	void *
setDelegate:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOReturn	id
getChannelID	Blue	Cl	IOBluetoothRFCOMMChannel	im	BluetoothRFCOMMChannelID
isIncoming	Blue	Cl	IOBluetoothRFCOMMChannel	im	BOOL
getDevice	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOBluetoothDevice *
getObjectID	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOBluetoothObjectID
registerForChannelCloseNotification:selector:	Blue	Cl	IOBluetoothRFCOMMChannel	im	IOBluetoothUserNotification *	id	SEL
rfcommChannelData:data:length:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *	void *	size_t
rfcommChannelOpenComplete:status:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *	IOReturn
rfcommChannelClosed:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *
rfcommChannelControlSignalsChanged:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *
rfcommChannelFlowControlChanged:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *
rfcommChannelWriteComplete:refcon:status:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *	void *	IOReturn
rfcommChannelQueueSpaceAvailable:	Blue	Pr	IOBluetoothRFCOMMChannelDelegate;IOBluetoothRFCOMMChannel	im	void	IOBluetoothRFCOMMChannel *
withElementValue:	Blue	Cl	IOBluetoothSDPDataElement	cm	IOBluetoothSDPDataElement *	NSObject *
withType:sizeDescriptor:size:value:	Blue	Cl	IOBluetoothSDPDataElement	cm	IOBluetoothSDPDataElement *	BluetoothSDPDataElementTypeDescriptor	BluetoothSDPDataElementSizeDescriptor	UInt32	NSObject *
withSDPDataElementRef:	Blue	Cl	IOBluetoothSDPDataElement	cm	IOBluetoothSDPDataElement *	IOBluetoothSDPDataElementRef
initWithElementValue:	Blue	Cl	IOBluetoothSDPDataElement	im	id	NSObject *
initWithType:sizeDescriptor:size:value:	Blue	Cl	IOBluetoothSDPDataElement	im	id	BluetoothSDPDataElementTypeDescriptor	BluetoothSDPDataElementSizeDescriptor	UInt32	NSObject *
getSDPDataElementRef	Blue	Cl	IOBluetoothSDPDataElement	im	IOBluetoothSDPDataElementRef
getTypeDescriptor	Blue	Cl	IOBluetoothSDPDataElement	im	BluetoothSDPDataElementTypeDescriptor
getSizeDescriptor	Blue	Cl	IOBluetoothSDPDataElement	im	BluetoothSDPDataElementSizeDescriptor
getSize	Blue	Cl	IOBluetoothSDPDataElement	im	UInt32
getNumberValue	Blue	Cl	IOBluetoothSDPDataElement	im	NSNumber *
getDataValue	Blue	Cl	IOBluetoothSDPDataElement	im	NSData *
getStringValue	Blue	Cl	IOBluetoothSDPDataElement	im	NSString *
getArrayValue	Blue	Cl	IOBluetoothSDPDataElement	im	NSArray *
getUUIDValue	Blue	Cl	IOBluetoothSDPDataElement	im	IOBluetoothSDPUUID *
getValue	Blue	Cl	IOBluetoothSDPDataElement	im	NSObject *
containsDataElement:	Blue	Cl	IOBluetoothSDPDataElement	im	BOOL	IOBluetoothSDPDataElement *
containsValue:	Blue	Cl	IOBluetoothSDPDataElement	im	BOOL	NSObject *
isEqual:	Blue	Cl	IOBluetoothSDPDataElement	im	BOOL	id
initWithCoder:	Blue	Cl	IOBluetoothSDPDataElement	im	id	NSCoder *
encodeWithCoder:	Blue	Cl	IOBluetoothSDPDataElement	im	void	NSCoder *
withID:attributeElementValue:	Blue	Cl	IOBluetoothSDPServiceAttribute	cm	IOBluetoothSDPServiceAttribute *	BluetoothSDPServiceAttributeID	NSObject *
withID:attributeElement:	Blue	Cl	IOBluetoothSDPServiceAttribute	cm	IOBluetoothSDPServiceAttribute *	BluetoothSDPServiceAttributeID	IOBluetoothSDPDataElement *
initWithID:attributeElementValue:	Blue	Cl	IOBluetoothSDPServiceAttribute	im	id	BluetoothSDPServiceAttributeID	NSObject *
initWithID:attributeElement:	Blue	Cl	IOBluetoothSDPServiceAttribute	im	id	BluetoothSDPServiceAttributeID	IOBluetoothSDPDataElement *
getAttributeID	Blue	Cl	IOBluetoothSDPServiceAttribute	im	BluetoothSDPServiceAttributeID
getDataElement	Blue	Cl	IOBluetoothSDPServiceAttribute	im	IOBluetoothSDPDataElement *
getIDDataElement	Blue	Cl	IOBluetoothSDPServiceAttribute	im	IOBluetoothSDPDataElement *
initWithCoder:	Blue	Cl	IOBluetoothSDPServiceAttribute	im	id	NSCoder *
encodeWithCoder:	Blue	Cl	IOBluetoothSDPServiceAttribute	im	void	NSCoder *
withSDPServiceRecordRef:	Blue	Cl	IOBluetoothSDPServiceRecord	cm	IOBluetoothSDPServiceRecord *	IOBluetoothSDPServiceRecordRef
getSDPServiceRecordRef	Blue	Cl	IOBluetoothSDPServiceRecord	im	IOBluetoothSDPServiceRecordRef
getDevice	Blue	Cl	IOBluetoothSDPServiceRecord	im	IOBluetoothDevice *
getAttributes	Blue	Cl	IOBluetoothSDPServiceRecord	im	NSDictionary *
getAttributeDataElement:	Blue	Cl	IOBluetoothSDPServiceRecord	im	IOBluetoothSDPDataElement *	BluetoothSDPServiceAttributeID
getServiceName	Blue	Cl	IOBluetoothSDPServiceRecord	im	NSString *
getRFCOMMChannelID:	Blue	Cl	IOBluetoothSDPServiceRecord	im	IOReturn	BluetoothRFCOMMChannelID *
getL2CAPPSM:	Blue	Cl	IOBluetoothSDPServiceRecord	im	IOReturn	BluetoothL2CAPPSM *
getServiceRecordHandle:	Blue	Cl	IOBluetoothSDPServiceRecord	im	IOReturn	BluetoothSDPServiceRecordHandle *
matchesUUIDArray:	Blue	Cl	IOBluetoothSDPServiceRecord	im	BOOL	NSArray *
matchesSearchArray:	Blue	Cl	IOBluetoothSDPServiceRecord	im	BOOL	NSArray *
hasServiceFromArray:	Blue	Cl	IOBluetoothSDPServiceRecord	im	BOOL	NSArray *
initWithCoder:	Blue	Cl	IOBluetoothSDPServiceRecord	im	id	NSCoder *
encodeWithCoder:	Blue	Cl	IOBluetoothSDPServiceRecord	im	void	NSCoder *
uuidWithBytes:length:	Blue	Cl	IOBluetoothSDPUUID	cm	IOBluetoothSDPUUID *	const void *	unsigned
uuidWithData:	Blue	Cl	IOBluetoothSDPUUID	cm	IOBluetoothSDPUUID *	NSData *
uuid16:	Blue	Cl	IOBluetoothSDPUUID	cm	IOBluetoothSDPUUID *	BluetoothSDPUUID16
uuid32:	Blue	Cl	IOBluetoothSDPUUID	cm	IOBluetoothSDPUUID *	BluetoothSDPUUID32
withSDPUUIDRef:	Blue	Cl	IOBluetoothSDPUUID	cm	IOBluetoothSDPUUID *	IOBluetoothSDPUUIDRef
initWithBytes:length:	Blue	Cl	IOBluetoothSDPUUID	im	id	const void *	unsigned
initWithData:	Blue	Cl	IOBluetoothSDPUUID	im	id	NSData *
initWithUUID16:	Blue	Cl	IOBluetoothSDPUUID	im	id	BluetoothSDPUUID16
initWithUUID32:	Blue	Cl	IOBluetoothSDPUUID	im	id	BluetoothSDPUUID32
getSDPUUIDRef	Blue	Cl	IOBluetoothSDPUUID	im	IOBluetoothSDPUUIDRef
bytes	Blue	Cl	IOBluetoothSDPUUID	im	const void *
length	Blue	Cl	IOBluetoothSDPUUID	im	unsigned
getUUIDWithLength:	Blue	Cl	IOBluetoothSDPUUID	im	IOBluetoothSDPUUID *	unsigned
isEqualToData:	Blue	Cl	IOBluetoothSDPUUID	im	BOOL	NSData *
isEqualToUUID:	Blue	Cl	IOBluetoothSDPUUID	im	BOOL	IOBluetoothSDPUUID *
initWithCoder:	Blue	Cl	IOBluetoothSDPUUID	im	id	NSCoder *
encodeWithCoder:	Blue	Cl	IOBluetoothSDPUUID	im	void	NSCoder *
classForCoder	Blue	Cl	IOBluetoothSDPUUID	im	Class
classForArchiver	Blue	Cl	IOBluetoothSDPUUID	im	Class
classForPortCoder	Blue	Cl	IOBluetoothSDPUUID	im	Class
unregister	Blue	Cl	IOBluetoothUserNotification	im	void
dictionaryWithOBEXHeadersData:headersDataSize:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	cm	NSMutableDictionary *	const void *	size_t
dictionaryWithOBEXHeadersData:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	cm	NSMutableDictionary *	NSData *
getHeaderBytes	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	NSMutableData *
addTargetHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addHTTPHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addBodyHeader:length:endOfBody:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t	BOOL
addWhoHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addConnectionIDHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addApplicationParameterHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addByteSequenceHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addObjectClassHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addAuthorizationChallengeHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addAuthorizationResponseHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addTimeISOHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addTypeHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	NSString *
addLengthHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	uint32_t
addTime4ByteHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	uint32_t
addCountHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	uint32_t
addDescriptionHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	NSString *
addNameHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	NSString *
addUserDefinedHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
addImageHandleHeader:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	NSString *
addImageDescriptorHeader:length:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	im	OBEXError	const void *	uint32_t
withOBEXHeadersData:headersDataSize:	Blue	Cl	NSMutableDictionary;NSDictionaryOBEXExtensions	cm	NSMutableDictionary *	const void *	size_t
withOBEXSession:	Blue	Cl	OBEXFileTransferServices	cm	OBEXFileTransferServices *	IOBluetoothOBEXSession *
initWithOBEXSession:	Blue	Cl	OBEXFileTransferServices	im	id	IOBluetoothOBEXSession *
setDelegate:	Blue	Cl	OBEXFileTransferServices	im	void	id
delegate	Blue	Cl	OBEXFileTransferServices	im	id
currentPath	Blue	Cl	OBEXFileTransferServices	im	NSString *
isBusy	Blue	Cl	OBEXFileTransferServices	im	BOOL
isConnected	Blue	Cl	OBEXFileTransferServices	im	BOOL
connectToFTPService	Blue	Cl	OBEXFileTransferServices	im	OBEXError
connectToObjectPushService	Blue	Cl	OBEXFileTransferServices	im	OBEXError
disconnect	Blue	Cl	OBEXFileTransferServices	im	OBEXError
changeCurrentFolderToRoot	Blue	Cl	OBEXFileTransferServices	im	OBEXError
changeCurrentFolderBackward	Blue	Cl	OBEXFileTransferServices	im	OBEXError
changeCurrentFolderForwardToPath:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSString *
createFolder:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSString *
removeItem:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSString *
retrieveFolderListing	Blue	Cl	OBEXFileTransferServices	im	OBEXError
sendFile:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSString *
copyRemoteFile:toLocalPath:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSString *	NSString *
sendData:type:name:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSData *	NSString *	NSString *
getDefaultVCard:	Blue	Cl	OBEXFileTransferServices	im	OBEXError	NSString *
abort	Blue	Cl	OBEXFileTransferServices	im	OBEXError
fileTransferServicesConnectionComplete:error:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError
fileTransferServicesDisconnectionComplete:error:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError
fileTransferServicesAbortComplete:error:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError
fileTransferServicesRemoveItemComplete:error:removedItem:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError	NSString *
fileTransferServicesCreateFolderComplete:error:folder:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError	NSString *
fileTransferServicesPathChangeComplete:error:finalPath:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError	NSString *
fileTransferServicesRetrieveFolderListingComplete:error:listing:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError	NSArray *
fileTransferServicesSendFileProgress:transferProgress:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	NSDictionary *
fileTransferServicesSendFileComplete:error:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError
fileTransferServicesCopyRemoteFileProgress:transferProgress:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	NSDictionary *
fileTransferServicesCopyRemoteFileComplete:error:	Blue	Cl	NSObject;OBEXFileTransferServices	dm	void	OBEXFileTransferServices *	OBEXError
OBEXConnect:maxPacketLength:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXFlags	OBEXMaxPacketLength	void *	size_t	SEL	id	void *
OBEXDisconnect:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	void *	size_t	SEL	id	void *
OBEXPut:headersData:headersDataLength:bodyData:bodyDataLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	Boolean	void *	size_t	void *	size_t	SEL	id	void *
OBEXGet:headers:headersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	Boolean	void *	size_t	SEL	id	void *
OBEXAbort:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	void *	size_t	SEL	id	void *
OBEXSetPath:constants:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXFlags	OBEXConstants	void *	size_t	SEL	id	void *
OBEXConnectResponse:flags:maxPacketLength:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXOpCode	OBEXFlags	OBEXMaxPacketLength	void *	size_t	SEL	id	void *
OBEXDisconnectResponse:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXOpCode	void *	size_t	SEL	id	void *
OBEXPutResponse:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXOpCode	void *	size_t	SEL	id	void *
OBEXGetResponse:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXOpCode	void *	size_t	SEL	id	void *
OBEXAbortResponse:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXOpCode	void *	size_t	SEL	id	void *
OBEXSetPathResponse:optionalHeaders:optionalHeadersLength:eventSelector:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	OBEXOpCode	void *	size_t	SEL	id	void *
getAvailableCommandPayloadLength:	Blue	Cl	OBEXSession	im	OBEXMaxPacketLength	OBEXOpCode
getAvailableCommandResponsePayloadLength:	Blue	Cl	OBEXSession	im	OBEXMaxPacketLength	OBEXOpCode
getMaxPacketLength	Blue	Cl	OBEXSession	im	OBEXMaxPacketLength
hasOpenOBEXConnection	Blue	Cl	OBEXSession	im	BOOL
setEventCallback:	Blue	Cl	OBEXSession	im	void	OBEXSessionEventCallback
setEventRefCon:	Blue	Cl	OBEXSession	im	void	void *
setEventSelector:target:refCon:	Blue	Cl	OBEXSession	im	void	SEL	id	id
serverHandleIncomingData:	Blue	Cl	OBEXSession	im	void	OBEXTransportEvent *
clientHandleIncomingData:	Blue	Cl	OBEXSession	im	void	OBEXTransportEvent *
sendDataToTransport:dataLength:	Blue	Cl	OBEXSession	im	OBEXError	void *	size_t
openTransportConnection:selectorTarget:refCon:	Blue	Cl	OBEXSession	im	OBEXError	SEL	id	void *
hasOpenTransportConnection	Blue	Cl	OBEXSession	im	Boolean
closeTransportConnection	Blue	Cl	OBEXSession	im	OBEXError
deviceSelector	BUI	Cl	IOBluetoothDeviceSelectorController	cm	IOBluetoothDeviceSelectorController *
withDeviceSelectorControllerRef:	BUI	Cl	IOBluetoothDeviceSelectorController	cm	IOBluetoothDeviceSelectorController *	IOBluetoothDeviceSelectorControllerRef
getDeviceSelectorControllerRef	BUI	Cl	IOBluetoothDeviceSelectorController	im	IOBluetoothDeviceSelectorControllerRef
runPanelWithAttributes:	BUI	Cl	IOBluetoothDeviceSelectorController	im	NSArray *	IOBluetoothDeviceSearchAttributes *
runModal	BUI	Cl	IOBluetoothDeviceSelectorController	im	int
beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:	BUI	Cl	IOBluetoothDeviceSelectorController	im	IOReturn	NSWindow *	id	SEL	void *
getResults	BUI	Cl	IOBluetoothDeviceSelectorController	im	NSArray *
setOptions:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	IOBluetoothServiceBrowserControllerOptions
getOptions	BUI	Cl	IOBluetoothDeviceSelectorController	im	IOBluetoothServiceBrowserControllerOptions
setSearchAttributes:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	const IOBluetoothDeviceSearchAttributes *
getSearchAttributes	BUI	Cl	IOBluetoothDeviceSelectorController	im	const IOBluetoothDeviceSearchAttributes *
addAllowedUUID:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	IOBluetoothSDPUUID *
addAllowedUUIDArray:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	NSArray *
clearAllowedUUIDs	BUI	Cl	IOBluetoothDeviceSelectorController	im	void
setTitle:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	NSString *
getTitle	BUI	Cl	IOBluetoothDeviceSelectorController	im	NSString *
setDescriptionText:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	NSString *
getDescriptionText	BUI	Cl	IOBluetoothDeviceSelectorController	im	NSString *
setPrompt:	BUI	Cl	IOBluetoothDeviceSelectorController	im	void	NSString *
getPrompt	BUI	Cl	IOBluetoothDeviceSelectorController	im	NSString *
initObjectPushWithBluetoothDevice:withFiles:delegate:	BUI	Cl	IOBluetoothObjectPushUIController	im	IOBluetoothObjectPushUIController *	IOBluetoothDevice *	NSArray *	id
runModal	BUI	Cl	IOBluetoothObjectPushUIController	im	void
runPanel	BUI	Cl	IOBluetoothObjectPushUIController	im	void
beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:	BUI	Cl	IOBluetoothObjectPushUIController	im	IOReturn	NSWindow *	id	SEL	void *
stop	BUI	Cl	IOBluetoothObjectPushUIController	im	void
setTitle:	BUI	Cl	IOBluetoothObjectPushUIController	im	void	NSString *
getTitle	BUI	Cl	IOBluetoothObjectPushUIController	im	NSString *
setIconImage:	BUI	Cl	IOBluetoothObjectPushUIController	im	void	NSImage *
getDevice	BUI	Cl	IOBluetoothObjectPushUIController	im	IOBluetoothDevice *
pairingController	BUI	Cl	IOBluetoothPairingController	cm	IOBluetoothPairingController *
withPairingControllerRef:	BUI	Cl	IOBluetoothPairingController	cm	IOBluetoothPairingController *	IOBluetoothPairingControllerRef
getPairingControllerRef	BUI	Cl	IOBluetoothPairingController	im	IOBluetoothPairingControllerRef
runPanelWithAttributes:	BUI	Cl	IOBluetoothPairingController	im	void	IOBluetoothDeviceSearchAttributes *
runModal	BUI	Cl	IOBluetoothPairingController	im	int
getResults	BUI	Cl	IOBluetoothPairingController	im	NSArray *
setOptions:	BUI	Cl	IOBluetoothPairingController	im	void	IOBluetoothServiceBrowserControllerOptions
getOptions	BUI	Cl	IOBluetoothPairingController	im	IOBluetoothServiceBrowserControllerOptions
setSearchAttributes:	BUI	Cl	IOBluetoothPairingController	im	void	const IOBluetoothDeviceSearchAttributes *
getSearchAttributes	BUI	Cl	IOBluetoothPairingController	im	const IOBluetoothDeviceSearchAttributes *
addAllowedUUID:	BUI	Cl	IOBluetoothPairingController	im	void	IOBluetoothSDPUUID *
addAllowedUUIDArray:	BUI	Cl	IOBluetoothPairingController	im	void	NSArray *
clearAllowedUUIDs	BUI	Cl	IOBluetoothPairingController	im	void
setTitle:	BUI	Cl	IOBluetoothPairingController	im	void	NSString *
getTitle	BUI	Cl	IOBluetoothPairingController	im	NSString *
setDescriptionText:	BUI	Cl	IOBluetoothPairingController	im	void	NSString *
getDescriptionText	BUI	Cl	IOBluetoothPairingController	im	NSString *
setPrompt:	BUI	Cl	IOBluetoothPairingController	im	void	NSString *
getPrompt	BUI	Cl	IOBluetoothPairingController	im	NSString *
serviceBrowserController:	BUI	Cl	IOBluetoothServiceBrowserController	cm	IOBluetoothServiceBrowserController *	IOBluetoothServiceBrowserControllerOptions
browseDevices:options:	BUI	Cl	IOBluetoothServiceBrowserController	cm	IOReturn	IOBluetoothSDPServiceRecord **	IOBluetoothServiceBrowserControllerOptions
browseDevicesAsSheetForWindow:options:window:	BUI	Cl	IOBluetoothServiceBrowserController	cm	IOReturn	IOBluetoothSDPServiceRecord **	IOBluetoothServiceBrowserControllerOptions	NSWindow *
withServiceBrowserControllerRef:	BUI	Cl	IOBluetoothServiceBrowserController	cm	IOBluetoothServiceBrowserController *	IOBluetoothServiceBrowserControllerRef
getServiceBrowserControllerRef	BUI	Cl	IOBluetoothServiceBrowserController	im	IOBluetoothServiceBrowserControllerRef
discover:	BUI	Cl	IOBluetoothServiceBrowserController	im	IOReturn	IOBluetoothSDPServiceRecord **
discoverAsSheetForWindow:withRecord:	BUI	Cl	IOBluetoothServiceBrowserController	im	IOReturn	NSWindow *	IOBluetoothSDPServiceRecord **
discoverWithDeviceAttributes:serviceList:serviceRecord:	BUI	Cl	IOBluetoothServiceBrowserController	im	IOReturn	IOBluetoothDeviceSearchAttributes *	NSArray *	IOBluetoothSDPServiceRecord **
setOptions:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	IOBluetoothServiceBrowserControllerOptions
runModal	BUI	Cl	IOBluetoothServiceBrowserController	im	int
beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:	BUI	Cl	IOBluetoothServiceBrowserController	im	IOReturn	NSWindow *	id	SEL	void *
getResults	BUI	Cl	IOBluetoothServiceBrowserController	im	NSArray *
getOptions	BUI	Cl	IOBluetoothServiceBrowserController	im	IOBluetoothServiceBrowserControllerOptions
setSearchAttributes:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	const IOBluetoothDeviceSearchAttributes *
getSearchAttributes	BUI	Cl	IOBluetoothServiceBrowserController	im	const IOBluetoothDeviceSearchAttributes *
addAllowedUUID:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	IOBluetoothSDPUUID *
addAllowedUUIDArray:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	NSArray *
clearAllowedUUIDs	BUI	Cl	IOBluetoothServiceBrowserController	im	void
setTitle:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	NSString *
getTitle	BUI	Cl	IOBluetoothServiceBrowserController	im	NSString *
setDescriptionText:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	NSString *
getDescriptionText	BUI	Cl	IOBluetoothServiceBrowserController	im	NSString *
setPrompt:	BUI	Cl	IOBluetoothServiceBrowserController	im	void	NSString *
getPrompt	BUI	Cl	IOBluetoothServiceBrowserController	im	NSString *
initWithSection:	Ins	Cl	InstallerPane	im	id	id
title	Ins	Cl	InstallerPane	im	NSString *
section	Ins	Cl	InstallerPane	im	InstallerSection *
contentView	Ins	Cl	InstallerPane	im	NSView *
initialKeyView	Ins	Cl	InstallerPane	im	NSView *
firstKeyView	Ins	Cl	InstallerPane	im	NSView *
lastKeyView	Ins	Cl	InstallerPane	im	NSView *
nextPane	Ins	Cl	InstallerPane	im	InstallerPane *
willEnterPane:	Ins	Cl	InstallerPane	im	void	InstallerSectionDirection
didEnterPane:	Ins	Cl	InstallerPane	im	void	InstallerSectionDirection
shouldExitPane:	Ins	Cl	InstallerPane	im	BOOL	InstallerSectionDirection
willExitPane:	Ins	Cl	InstallerPane	im	void	InstallerSectionDirection
didExitPane:	Ins	Cl	InstallerPane	im	void	InstallerSectionDirection
setNextEnabled:	Ins	Cl	InstallerPane	im	void	BOOL
nextEnabled	Ins	Cl	InstallerPane	im	BOOL
setPreviousEnabled:	Ins	Cl	InstallerPane	im	void	BOOL
previousEnabled	Ins	Cl	InstallerPane	im	BOOL
gotoNextPane	Ins	Cl	InstallerPane	im	BOOL
gotoPreviousPane	Ins	Cl	InstallerPane	im	BOOL
bundle	Ins	Cl	InstallerSection	im	NSBundle *
title	Ins	Cl	InstallerSection	im	NSString *
firstPane	Ins	Cl	InstallerSection	im	InstallerPane *
shouldLoad	Ins	Cl	InstallerSection	im	BOOL
willLoadMainNib	Ins	Cl	InstallerSection	im	void
didLoadMainNib	Ins	Cl	InstallerSection	im	void
sharedDictionary	Ins	Cl	InstallerSection	im	NSMutableDictionary *
installerState	Ins	Cl	InstallerSection	im	InstallerState *
activePane	Ins	Cl	InstallerSection	im	InstallerPane *
gotoPane:	Ins	Cl	InstallerSection	im	BOOL	InstallerPane *
licenseAgreed	Ins	Cl	InstallerState	im	BOOL
licenseAgreedLanguage	Ins	Cl	InstallerState	im	NSString *
targetVolumePath	Ins	Cl	InstallerState	im	NSString *
targetPath	Ins	Cl	InstallerState	im	NSString *
choiceDictionaries	Ins	Cl	InstallerState	im	NSArray *
choiceDictionaryForIdentifier:	Ins	Cl	InstallerState	im	NSDictionary *	NSString *
installStarted	Ins	Cl	InstallerState	im	BOOL
installSucceeded	Ins	Cl	InstallerState	im	BOOL
imageURLForStatus:	IM	Cl	IMService	cm	NSURL *	IMPersonStatus
allServices	IM	Cl	IMService	cm	NSArray *
serviceWithName:	IM	Cl	IMService	cm	IMService *	NSString *
notificationCenter	IM	Cl	IMService	cm	NSNotificationCenter *
myStatus	IM	Cl	IMService	cm	IMPersonStatus
myIdleTime	IM	Cl	IMService	cm	NSDate *
localizedName	IM	Cl	IMService	im	NSString *
localizedShortName	IM	Cl	IMService	im	NSString *
name	IM	Cl	IMService	im	NSString *
status	IM	Cl	IMService	im	IMServiceStatus
infoForScreenName:	IM	Cl	IMService	im	NSDictionary *	NSString *
infoForAllScreenNames	IM	Cl	IMService	im	NSArray *
infoForPreferredScreenNames	IM	Cl	IMService	im	NSArray *
peopleWithScreenName:	IM	Cl	IMService	im	NSArray *	NSString *
screenNamesForPerson:	IM	Cl	IMService	im	NSArray *	ABPerson *
documentForObject:	IB	Pr	IB;IBApplicationAdditions	im	id <IBDocuments>	id
activeDocument	IB	Pr	IB;IBApplicationAdditions	im	id <IBDocuments>
selectionOwner	IB	Pr	IB;IBApplicationAdditions	im	id <IBEditors>
selectedObject	IB	Pr	IB;IBApplicationAdditions	im	id
isTestingInterface	IB	Pr	IB;IBApplicationAdditions	im	BOOL
minimumSizeForCellSize:knobPosition:	IB	Pr	IBCellProtocol	im	NSSize	NSSize	IBKnobPosition
maximumSizeForCellSize:knobPosition:	IB	Pr	IBCellProtocol	im	NSSize	NSSize	IBKnobPosition
cellWillAltDragWithSize:	IB	Pr	IBCellProtocol	im	void	NSSize
acceptsColor:	IB	Pr	IBCellProtocol	im	BOOL	NSColor *
depositColor:	IB	Pr	IBCellProtocol	im	void	NSColor *
ibWidgetType	IB	Pr	IBCellProtocol	im	NSString *
ibHasAlternateMinimumWidth	IB	Pr	IBCellProtocol	im	BOOL
ibAlternateMinimumWidth	IB	Pr	IBCellProtocol	im	float
ibHasAlternateMinimumHeight	IB	Pr	IBCellProtocol	im	BOOL
ibAlternateMinimumHeight	IB	Pr	IBCellProtocol	im	float
ibHasBaseLine	IB	Pr	IBCellProtocol	im	BOOL
ibBaseLineForCellSize:	IB	Pr	IBCellProtocol	im	float	NSSize
ibMatchPrototype:	IB	Pr	IBCellProtocol	im	void	NSCell *
source	IB	Pr	IBConnectors	im	id
destination	IB	Pr	IBConnectors	im	id
label	IB	Pr	IBConnectors	im	NSString *
replaceObject:withObject:	IB	Pr	IBConnectors	im	void	id	id
nibInstantiate	IB	Pr	IBConnectors	im	id
establishConnection	IB	Pr	IBConnectors	im	void
connectSource	IB	Cl	NSApplication;IBConnectors	im	id
connectDestination	IB	Cl	NSApplication;IBConnectors	im	id
isConnecting	IB	Cl	NSApplication;IBConnectors	im	BOOL
stopConnecting	IB	Cl	NSApplication;IBConnectors	im	void
displayConnectionBetween:and:	IB	Cl	NSApplication;IBConnectors	im	void	id	id
nibInstantiate	IB	Cl	NSObject;IBConnectors	im	id
documentPath	IB	Pr	IBDocuments	im	NSString *
touch	IB	Pr	IBDocuments	im	void
isUntitled	IB	Pr	IBDocuments	im	BOOL
attachObject:toParent:	IB	Pr	IBDocuments	im	void	id	id
attachObjects:toParent:	IB	Pr	IBDocuments	im	void	NSArray *	id
detachObject:	IB	Pr	IBDocuments	im	void	id
detachObjects:	IB	Pr	IBDocuments	im	void	NSArray *
objects	IB	Pr	IBDocuments	im	NSArray *
containsObject:	IB	Pr	IBDocuments	im	BOOL	id
parentOfObject:	IB	Pr	IBDocuments	im	id	id
copyObject:type:toPasteboard:	IB	Pr	IBDocuments	im	BOOL	id	NSString *	NSPasteboard *
copyObjects:type:toPasteboard:	IB	Pr	IBDocuments	im	BOOL	NSArray *	NSString *	NSPasteboard *
pasteType:fromPasteboard:parent:	IB	Pr	IBDocuments	im	NSArray *	NSString *	NSPasteboard *	id
setName:forObject:	IB	Pr	IBDocuments	im	void	NSString *	id
nameForObject:	IB	Pr	IBDocuments	im	NSString *	id
containsObjectWithName:forParent:	IB	Pr	IBDocuments	im	BOOL	NSString *	id
replaceObject:withObject:	IB	Pr	IBDocuments	im	void	id	id
addConnector:	IB	Pr	IBDocuments	im	void	id <IBConnectors>
removeConnector:	IB	Pr	IBDocuments	im	void	id <IBConnectors>
connectorsForSource:	IB	Pr	IBDocuments	im	NSArray *	id
connectorsForSource:ofClass:	IB	Pr	IBDocuments	im	NSArray *	id	Class
connectorsForDestination:	IB	Pr	IBDocuments	im	NSArray *	id
connectorsForDestination:ofClass:	IB	Pr	IBDocuments	im	NSArray *	id	Class
allConnectors	IB	Pr	IBDocuments	im	NSArray *
openEditorForObject:	IB	Pr	IBDocuments	im	id <IBEditors>	id
editorForObject:create:	IB	Pr	IBDocuments	im	id <IBEditors>	id	BOOL
parentEditorForEditor:	IB	Pr	IBDocuments	im	id <IBEditors>	id <IBEditors>
setSelectionFromEditor:	IB	Pr	IBDocuments	im	void	id <IBEditors>
resignSelectionForEditor:	IB	Pr	IBDocuments	im	void	id <IBEditors>
editor:didCloseForObject:	IB	Pr	IBDocuments	im	void	id <IBEditors>	id
drawObject:	IB	Pr	IBDocuments	im	void	id
project	IB	Pr	IBDocuments	im	id <IBProjects>
interfaceStyle	IB	Pr	IBDocuments	im	NSInterfaceStyle
selectionCount	IB	Pr	IBSelectionOwners;IBEditors	im	unsigned int
selection	IB	Pr	IBSelectionOwners;IBEditors	im	NSArray *
initWithObject:inDocument:	IB	Pr	IBEditors	im	id	id	id /*<IBDocuments>*/
closeEditor	IB	Pr	IBEditors	im	void
editedObject	IB	Pr	IBEditors	im	id
document	IB	Pr	IBEditors	im	id /*<IBDocuments>*/
window	IB	Pr	IBEditors	im	NSWindow *
resetObject:	IB	Pr	IBEditors	im	void	id
wantsSelection	IB	Pr	IBEditors	im	BOOL
selectObjects:	IB	Pr	IBEditors	im	void	NSArray *
makeSelectionVisible:	IB	Pr	IBEditors	im	void	BOOL
shouldCopySelection	IB	Pr	IBEditors	im	BOOL
copySelection	IB	Pr	IBEditors	im	void
shouldDeleteSelection	IB	Pr	IBEditors	im	BOOL
deleteSelection	IB	Pr	IBEditors	im	void
shouldPasteInSelection	IB	Pr	IBEditors	im	BOOL
pasteInSelection	IB	Pr	IBEditors	im	void
acceptsTypeFromPasteboard:	IB	Pr	IBEditors	im	BOOL	NSPasteboard *
openSubeditorForObject:	IB	Pr	IBEditors	im	id <IBEditors>	id
closeSubeditors	IB	Pr	IBEditors	im	void
orderFront	IB	Pr	IBEditors	im	void
activate	IB	Pr	IBEditors	im	BOOL
validateEditing	IB	Pr	IBEditors	im	void
wantsButtons	IB	Cl	IBInspector	im	BOOL
revert:	IB	Cl	IBInspector	im	void	id
ok:	IB	Cl	IBInspector	im	void	id
object	IB	Cl	IBInspector	im	id
inspectedDocument	IB	Cl	IBInspector	im	id <IBDocuments>
window	IB	Cl	IBInspector	im	NSWindow *
okButton	IB	Cl	IBInspector	im	NSButton *
revertButton	IB	Cl	IBInspector	im	NSButton *
initialFirstResponder	IB	Cl	IBInspector	im	NSView *
isResizable	IB	Cl	IBInspector	im	BOOL
beginUndoGrouping	IB	Cl	IBInspector	im	void
noteAttributesWillChangeForObject:	IB	Cl	IBInspector	im	void	id
sharedInspectorManager	IB	Cl	IBInspectorManager	cm	IBInspectorManager *
addInspectorModeWithIdentifier:forObject:localizedLabel:inspectorClassName:ordering:	IB	Cl	IBInspectorManager	im	void	NSString *	id	NSString *	NSString *	float
indexOfModeWithIdentifier:	IB	Cl	IBInspectorManager	im	unsigned int	NSString *
inspectorClassName	IB	Pr	IBObjectProtocol	im	NSString *
connectInspectorClassName	IB	Pr	IBObjectProtocol	im	NSString *
sizeInspectorClassName	IB	Pr	IBObjectProtocol	im	NSString *
helpInspectorClassName	IB	Pr	IBObjectProtocol	im	NSString *
classInspectorClassName	IB	Pr	IBObjectProtocol	im	NSString *
objectNameForInspectorTitle	IB	Pr	IBObjectProtocol	im	NSString *
editorClassName	IB	Pr	IBObjectProtocol	im	NSString *
imageForViewer	IB	Pr	IBObjectProtocol	im	NSImage *
nibLabel:	IB	Pr	IBObjectProtocol	im	NSString *	NSString *
canSubstituteForClass:	IB	Pr	IBObjectProtocol	cm	BOOL	Class
awakeFromDocument:	IB	Pr	IBObjectProtocol	im	void	id <IBDocuments>
ibIncompatibleProperties	IB	Pr	IBObjectProtocol	im	NSArray *
associateObject:ofType:withView:	IB	Cl	IBPalette	im	void	id	NSString *	NSView *
finishInstantiate	IB	Cl	IBPalette	im	void
paletteDocument	IB	Cl	IBPalette	im	id <IBDocuments>
originalWindow	IB	Cl	IBPalette	im	NSWindow *
imageNamed:	IB	Cl	IBPalette	im	NSImage *	NSString *
shouldInstallPaletteWithPath:	IB	Cl	IBPalette	im	BOOL	NSString *
toolTipForObject:	IB	Cl	IBPalette	im	NSString *	id
project	IB	Pr	IBProjectFiles	im	id <IBProjects>
fileName	IB	Pr	IBProjectFiles	im	NSString *
fileType	IB	Pr	IBProjectFiles	im	NSString *
language	IB	Pr	IBProjectFiles	im	NSString *
path	IB	Pr	IBProjectFiles	im	NSString *
isLocalized	IB	Pr	IBProjectFiles	im	BOOL
projectName	IB	Pr	IBProjects	im	NSString *
isLive	IB	Pr	IBProjects	im	BOOL
projectDirectory	IB	Pr	IBProjects	im	NSString *
superproject	IB	Pr	IBProjects	im	id <IBProjects>
subprojects	IB	Pr	IBProjects	im	NSArray *
rootProject	IB	Pr	IBProjects	im	id <IBProjects>
isDescendantOfProject:	IB	Pr	IBProjects	im	BOOL	id <IBProjects>
isAncestorOfProject:	IB	Pr	IBProjects	im	BOOL	id <IBProjects>
filesForFileType:	IB	Pr	IBProjects	im	NSArray *	NSString *
containsFileAtPath:	IB	Pr	IBProjects	im	BOOL	NSString *
languageForFileAtPath:	IB	Pr	IBProjects	im	NSString *	NSString *
applicationIconForInterfaceStyle:inLanguage:	IB	Pr	IBProjects	im	id	NSInterfaceStyle	NSString *
mainNibFileForInterfaceStyle:inLanguage:	IB	Pr	IBProjects	im	id	NSInterfaceStyle	NSString *
projectManager	IB	Pr	IBProjects	im	id
pathForFilename:	IB	Pr	IBProjects	im	NSString *	NSString *
registerResourceManagerClass:	IB	Cl	IBResourceManager	cm	void	Class
registerResourceManagerClass:forFrameworks:	IB	Cl	IBResourceManager	cm	void	Class	NSArray *
registeredResourceManagerClasses	IB	Cl	IBResourceManager	cm	NSArray *
registeredResourceManagerClassesForFramework:	IB	Cl	IBResourceManager	cm	NSArray *	NSString *
initWithDocument:	IB	Cl	IBResourceManager	im	id	id <IBDocuments>
document	IB	Cl	IBResourceManager	im	id <IBDocuments>
writeToDocumentPath:	IB	Cl	IBResourceManager	im	void	NSString *
supportedFrameworks	IB	Cl	IBResourceManager	im	NSArray *
resourceFileTypes	IB	Cl	IBResourceManager	im	NSArray *
resourcePasteboardTypes	IB	Cl	IBResourceManager	im	NSArray *
acceptsResourcesFromPasteboard:	IB	Cl	IBResourceManager	im	BOOL	NSPasteboard *
addResourcesFromPasteboard:	IB	Cl	IBResourceManager	im	void	NSPasteboard *
resourcesForObjects:	IB	Cl	IBResourceManager	im	NSArray *	NSArray *
addResources:	IB	Cl	IBResourceManager	im	void	NSArray *
isReadOnly	IB	Cl	IBResourceManager	im	BOOL
project:didAddFile:	IB	Cl	IBResourceManager	im	void	id <IBProjects>	id <IBProjectFiles>
project:didRemoveFile:	IB	Cl	IBResourceManager	im	void	id <IBProjects>	id <IBProjectFiles>
project:didChangeLocalizationOfFile:	IB	Cl	IBResourceManager	im	void	id <IBProjects>	id <IBProjectFiles>
application:didModifyFileAtPath:	IB	Cl	IBResourceManager	im	void	NSString *	NSString *
layoutRect	IB	Cl	NSView;IBViewAdditions	im	NSRect
layoutRectFromFrame:	IB	Cl	NSView;IBViewAdditions	im	NSRect	NSRect
frameFromLayoutRect:	IB	Cl	NSView;IBViewAdditions	im	NSRect	NSRect
minimumFrameSizeFromKnobPosition:	IB	Pr	IBViewProtocol	im	NSSize	IBKnobPosition
maximumFrameSizeFromKnobPosition:	IB	Pr	IBViewProtocol	im	NSSize	IBKnobPosition
placeView:	IB	Pr	IBViewProtocol	im	void	NSRect
allowsAltDragging	IB	Pr	IBViewProtocol	im	BOOL
acceptsColor:atPoint:	IB	Pr	IBViewProtocol	im	BOOL	NSColor *	NSPoint
depositColor:atPoint:	IB	Pr	IBViewProtocol	im	void	NSColor *	NSPoint
trackerClassNameForEvent:	IB	Pr	IBViewProtocol	im	NSString *	NSEvent *
lineFragmentPadding	IB	Pr	IBViewProtocol	im	float
canEditSelf	IB	Pr	IBViewProtocol	im	BOOL
editSelf:in:	IB	Pr	IBViewProtocol	im	void	NSEvent *	NSView<IBEditors>*
ibShadowInset	IB	Pr	IBViewProtocol	im	IBInset
ibWidgetType	IB	Pr	IBViewProtocol	im	NSString *
ibHasAlternateMinimumWidth	IB	Pr	IBViewProtocol	im	BOOL
ibHasAlternateMinimumHeight	IB	Pr	IBViewProtocol	im	BOOL
ibAlternateMinimumWidth	IB	Pr	IBViewProtocol	im	float
ibAlternateMinimumHeight	IB	Pr	IBViewProtocol	im	float
ibSupportsInsideOutSelection	IB	Pr	IBViewProtocol	im	BOOL
ibIsContainer	IB	Pr	IBViewProtocol	im	BOOL
ibNearestTargetForDrag	IB	Pr	IBViewProtocol	im	id
ibShouldShowContainerGuides	IB	Pr	IBViewProtocol	im	BOOL
ibSupportsLiveResize	IB	Pr	IBViewProtocol	im	BOOL
ibNumberOfBaseLine	IB	Pr	IBViewProtocol	im	int
ibBaseLineAtIndex:	IB	Pr	IBViewProtocol	im	float	int
ibDrawFrameWhileResizing	IB	Pr	IBViewProtocol	im	BOOL
viewResourcePasteboardTypes	IB	Pr	IBViewResourceDraggingDelegates;IBViewResourceDragging	im	NSArray *
acceptsViewResourceFromPasteboard:forObject:atPoint:	IB	Pr	IBViewResourceDraggingDelegates;IBViewResourceDragging	im	BOOL	NSPasteboard *	id	NSPoint
depositViewResourceFromPasteboard:onObject:atPoint:	IB	Pr	IBViewResourceDraggingDelegates;IBViewResourceDragging	im	void	NSPasteboard *	id	NSPoint
shouldDrawConnectionFrame	IB	Pr	IBViewResourceDraggingDelegates;IBViewResourceDragging	im	BOOL
registerViewResourceDraggingDelegate:	IB	Cl	NSView;IBViewResourceDragging	dm	void	id <IBViewResourceDraggingDelegates>
unregisterViewResourceDraggingDelegate:	IB	Cl	NSView;IBViewResourceDragging	dm	void	id <IBViewResourceDraggingDelegates>
registeredViewResourceDraggingDelegates	IB	Cl	NSView;IBViewResourceDragging	dm	NSArray *
acceptedViewResourcePasteboardTypes	IB	Cl	NSView;IBViewResourceDragging	dm	NSArray *
hasDeliveryClassBeenConfigured	Me	Cl	NSMailDelivery	cm	BOOL
deliverMessage:headers:format:protocol:	Me	Cl	NSMailDelivery	cm	BOOL	NSAttributedString *	NSDictionary *	NSString *	NSString *
deliverMessage:subject:to:	Me	Cl	NSMailDelivery	cm	BOOL	NSString *	NSString *	NSString *
availableLanguages	OSA	Cl	OSALanguage	cm	NSArray *
languageForName:	OSA	Cl	OSALanguage	cm	OSALanguage *	NSString *
defaultLanguage	OSA	Cl	OSALanguage	cm	OSALanguage *
setDefaultLanguage:	OSA	Cl	OSALanguage	cm	void	OSALanguage *
initWithComponent:	OSA	Cl	OSALanguage	im	id	Component
componentInstance	OSA	Cl	OSALanguage	im	ComponentInstance
name	OSA	Cl	OSALanguage	im	NSString *
info	OSA	Cl	OSALanguage	im	NSString *
version	OSA	Cl	OSALanguage	im	NSString *
type	OSA	Cl	OSALanguage	im	OSType
subType	OSA	Cl	OSALanguage	im	OSType
manufacturer	OSA	Cl	OSALanguage	im	OSType
features	OSA	Cl	OSALanguage	im	OSALanguageFeatures
initWithSource:	OSA	Cl	OSAScript	im	id	NSString *
initWithSource:language:	OSA	Cl	OSAScript	im	id	NSString *	OSALanguage *
initWithContentsOfURL:error:	OSA	Cl	OSAScript	im	id	NSURL *	NSDictionary **
initWithContentsOfURL:language:error:	OSA	Cl	OSAScript	im	id	NSURL *	OSALanguage *	NSDictionary **
initWithCompiledData:error:	OSA	Cl	OSAScript	im	id	NSData *	NSDictionary **
source	OSA	Cl	OSAScript	im	NSString *
url	OSA	Cl	OSAScript	im	NSURL *
language	OSA	Cl	OSAScript	im	OSALanguage *
setLanguage:	OSA	Cl	OSAScript	im	void	OSALanguage *
isCompiled	OSA	Cl	OSAScript	im	BOOL
compileAndReturnError:	OSA	Cl	OSAScript	im	BOOL	NSDictionary **
executeAndReturnError:	OSA	Cl	OSAScript	im	NSAppleEventDescriptor *	NSDictionary **
executeAppleEvent:error:	OSA	Cl	OSAScript	im	NSAppleEventDescriptor *	NSAppleEventDescriptor *	NSDictionary **
executeAndReturnDisplayValue:error:	OSA	Cl	OSAScript	im	NSAppleEventDescriptor *	NSAttributedString **	NSDictionary **
executeHandlerWithName:arguments:error:	OSA	Cl	OSAScript	im	NSAppleEventDescriptor *	NSString *	NSArray *	NSDictionary **
richTextSource	OSA	Cl	OSAScript	im	NSAttributedString *
richTextFromDescriptor:	OSA	Cl	OSAScript	im	NSAttributedString *	NSAppleEventDescriptor *
writeToURL:ofType:error:	OSA	Cl	OSAScript	im	BOOL	NSURL *	NSString *	NSDictionary **
writeToURL:ofType:usingStorageOptions:error:	OSA	Cl	OSAScript	im	BOOL	NSURL *	NSString *	OSAStorageOptions	NSDictionary **
compiledDataForType:usingStorageOptions:error:	OSA	Cl	OSAScript	im	NSData *	NSString *	OSAStorageOptions	NSDictionary **
scriptView	OSA	Cl	OSAScriptController	im	OSAScriptView *
setScriptView:	OSA	Cl	OSAScriptController	im	void	OSAScriptView *
resultView	OSA	Cl	OSAScriptController	im	NSTextView *
setResultView:	OSA	Cl	OSAScriptController	im	void	NSTextView *
script	OSA	Cl	OSAScriptController	im	OSAScript *
setScript:	OSA	Cl	OSAScriptController	im	void	OSAScript *
language	OSA	Cl	OSAScriptController	im	OSALanguage *
setLanguage:	OSA	Cl	OSAScriptController	im	void	OSALanguage *
scriptState	OSA	Cl	OSAScriptController	im	OSAScriptState
isCompiling	OSA	Cl	OSAScriptController	im	BOOL
compileScript:	OSA	Cl	OSAScriptController	im	IBAction	id
recordScript:	OSA	Cl	OSAScriptController	im	IBAction	id
runScript:	OSA	Cl	OSAScriptController	im	IBAction	id
stopScript:	OSA	Cl	OSAScriptController	im	IBAction	id
source	OSA	Cl	OSAScriptView	im	NSString *
setSource:	OSA	Cl	OSAScriptView	im	void	NSString *
usesScriptAssistant	OSA	Cl	OSAScriptView	im	BOOL
setUsesScriptAssistant:	OSA	Cl	OSAScriptView	im	void	BOOL
usesTabs	OSA	Cl	OSAScriptView	im	BOOL
setUsesTabs:	OSA	Cl	OSAScriptView	im	void	BOOL
tabWidth	OSA	Cl	OSAScriptView	im	int
setTabWidth:	OSA	Cl	OSAScriptView	im	void	int
wrapsLines	OSA	Cl	OSAScriptView	im	BOOL
setWrapsLines:	OSA	Cl	OSAScriptView	im	void	BOOL
indentsWrappedLines	OSA	Cl	OSAScriptView	im	BOOL
setIndentsWrappedLines:	OSA	Cl	OSAScriptView	im	void	BOOL
indentWidth	OSA	Cl	OSAScriptView	im	int
setIndentWidth:	OSA	Cl	OSAScriptView	im	void	int
initWithBundle:	Pref	Cl	NSPreferencePane	im	id	NSBundle *
bundle	Pref	Cl	NSPreferencePane	im	NSBundle *
loadMainView	Pref	Cl	NSPreferencePane	im	NSView *
mainViewDidLoad	Pref	Cl	NSPreferencePane	im	void
mainNibName	Pref	Cl	NSPreferencePane	im	NSString *
assignMainView	Pref	Cl	NSPreferencePane	im	void
willSelect	Pref	Cl	NSPreferencePane	im	void
didSelect	Pref	Cl	NSPreferencePane	im	void
shouldUnselect	Pref	Cl	NSPreferencePane	im	NSPreferencePaneUnselectReply
replyToShouldUnselect:	Pref	Cl	NSPreferencePane	im	void	BOOL
willUnselect	Pref	Cl	NSPreferencePane	im	void
didUnselect	Pref	Cl	NSPreferencePane	im	void
setMainView:	Pref	Cl	NSPreferencePane	im	void	NSView *
mainView	Pref	Cl	NSPreferencePane	im	NSView *
initialKeyView	Pref	Cl	NSPreferencePane	im	NSView *
setInitialKeyView:	Pref	Cl	NSPreferencePane	im	void	NSView *
firstKeyView	Pref	Cl	NSPreferencePane	im	NSView *
setFirstKeyView:	Pref	Cl	NSPreferencePane	im	void	NSView *
lastKeyView	Pref	Cl	NSPreferencePane	im	NSView *
setLastKeyView:	Pref	Cl	NSPreferencePane	im	void	NSView *
autoSaveTextFields	Pref	Cl	NSPreferencePane	im	BOOL
isSelected	Pref	Cl	NSPreferencePane	im	BOOL
updateHelpMenuWithArray:	Pref	Cl	NSPreferencePane	im	void	NSArray *
dataReferenceWithDataRef:type:	QT	Cl	QTDataReference	cm	id	Handle	NSString *
dataReferenceWithDataRefData:type:	QT	Cl	QTDataReference	cm	id	NSData *	NSString *
dataReferenceWithReferenceToFile:	QT	Cl	QTDataReference	cm	id	NSString *
dataReferenceWithReferenceToURL:	QT	Cl	QTDataReference	cm	id	NSURL *
dataReferenceWithReferenceToData:	QT	Cl	QTDataReference	cm	id	NSData *
dataReferenceWithReferenceToData:name:MIMEType:	QT	Cl	QTDataReference	cm	id	NSData *	NSString *	NSString *
initWithDataRef:type:	QT	Cl	QTDataReference	im	id	Handle	NSString *
initWithDataRefData:type:	QT	Cl	QTDataReference	im	id	NSData *	NSString *
initWithReferenceToFile:	QT	Cl	QTDataReference	im	id	NSString *
initWithReferenceToURL:	QT	Cl	QTDataReference	im	id	NSURL *
initWithReferenceToData:	QT	Cl	QTDataReference	im	id	NSData *
initWithReferenceToData:name:MIMEType:	QT	Cl	QTDataReference	im	id	NSData *	NSString *	NSString *
dataRef	QT	Cl	QTDataReference	im	Handle
dataRefData	QT	Cl	QTDataReference	im	NSData *
dataRefType	QT	Cl	QTDataReference	im	NSString *
referenceFile	QT	Cl	QTDataReference	im	NSString *
referenceURL	QT	Cl	QTDataReference	im	NSURL *
referenceData	QT	Cl	QTDataReference	im	NSData *
name	QT	Cl	QTDataReference	im	NSString *
MIMEType	QT	Cl	QTDataReference	im	NSString *
setDataRef:	QT	Cl	QTDataReference	im	void	Handle
setDataRefType:	QT	Cl	QTDataReference	im	void	NSString *
mediaWithQuickTimeMedia:error:	QT	Cl	QTMedia	cm	id	Media	NSError **
initWithQuickTimeMedia:error:	QT	Cl	QTMedia	im	id	Media	NSError **
track	QT	Cl	QTMedia	im	QTTrack *
mediaAttributes	QT	Cl	QTMedia	im	NSDictionary *
setMediaAttributes:	QT	Cl	QTMedia	im	void	NSDictionary *
attributeForKey:	QT	Cl	QTMedia	im	id	NSString *
setAttribute:forKey:	QT	Cl	QTMedia	im	void	id	NSString *
hasCharacteristic:	QT	Cl	QTMedia	im	BOOL	NSString *
quickTimeMedia	QT	Cl	QTMedia	im	Media
movie:linkToURL:	QT	Cl	NSObject;QTMovie	dm	BOOL	QTMovie *	NSURL *
movieShouldLoadData:	QT	Cl	NSObject;QTMovie	dm	BOOL	id
movieShouldTask:	QT	Cl	NSObject;QTMovie	dm	BOOL	id
externalMovie:	QT	Cl	NSObject;QTMovie	dm	QTMovie *	NSDictionary *
movie:shouldContinueOperation:withPhase:atPercent:withAttributes:	QT	Cl	NSObject;QTMovie	dm	BOOL	QTMovie *	NSString *	QTMovieOperationPhase	NSNumber *	NSDictionary *
duration	QT	Cl	QTMovie	dm	QTTime
canInitWithPasteboard:	QT	Cl	QTMovie	dm	BOOL	NSPasteboard *
canInitWithFile:	QT	Cl	QTMovie	dm	BOOL	NSString *
canInitWithURL:	QT	Cl	QTMovie	dm	BOOL	NSURL *
canInitWithDataReference:	QT	Cl	QTMovie	dm	BOOL	QTDataReference *
movieFileTypes:	QT	Cl	QTMovie	dm	NSArray *	QTMovieFileTypeOptions
movieUnfilteredFileTypes	QT	Cl	QTMovie	dm	NSArray *
movieUnfilteredPasteboardTypes	QT	Cl	QTMovie	dm	NSArray *
movie	QT	Cl	QTMovie	dm	id
movieWithFile:error:	QT	Cl	QTMovie	dm	id	NSString *	NSError **
movieWithURL:error:	QT	Cl	QTMovie	dm	id	NSURL *	NSError **
movieWithDataReference:error:	QT	Cl	QTMovie	dm	id	QTDataReference *	NSError **
movieWithPasteboard:error:	QT	Cl	QTMovie	dm	id	NSPasteboard *	NSError **
movieWithData:error:	QT	Cl	QTMovie	dm	id	NSData *	NSError **
movieWithQuickTimeMovie:disposeWhenDone:error:	QT	Cl	QTMovie	dm	id	Movie	BOOL	NSError **
movieWithAttributes:error:	QT	Cl	QTMovie	dm	id	NSDictionary *	NSError **
movieNamed:error:	QT	Cl	QTMovie	dm	id	NSString *	NSError **
initWithFile:error:	QT	Cl	QTMovie	dm	id	NSString *	NSError **
initWithURL:error:	QT	Cl	QTMovie	dm	id	NSURL *	NSError **
initWithDataReference:error:	QT	Cl	QTMovie	dm	id	QTDataReference *	NSError **
initWithPasteboard:error:	QT	Cl	QTMovie	dm	id	NSPasteboard *	NSError **
initWithData:error:	QT	Cl	QTMovie	dm	id	NSData *	NSError **
initWithMovie:timeRange:error:	QT	Cl	QTMovie	dm	id	QTMovie *	QTTimeRange	NSError **
initWithQuickTimeMovie:disposeWhenDone:error:	QT	Cl	QTMovie	dm	id	Movie	BOOL	NSError **
initWithAttributes:error:	QT	Cl	QTMovie	dm	id	NSDictionary *	NSError **
movieWithTimeRange:error:	QT	Cl	QTMovie	dm	QTMovie *	QTTimeRange	NSError **
currentTime	QT	Cl	QTMovie	dm	QTTime
rate	QT	Cl	QTMovie	dm	float
volume	QT	Cl	QTMovie	dm	float
muted	QT	Cl	QTMovie	dm	BOOL
movieAttributes	QT	Cl	QTMovie	dm	NSDictionary *
setMovieAttributes:	QT	Cl	QTMovie	dm	void	NSDictionary *
attributeForKey:	QT	Cl	QTMovie	dm	id	NSString *
setAttribute:forKey:	QT	Cl	QTMovie	dm	void	id	NSString *
tracks	QT	Cl	QTMovie	dm	NSArray *
tracksOfMediaType:	QT	Cl	QTMovie	dm	NSArray *	NSString *
posterImage	QT	Cl	QTMovie	dm	NSImage *
currentFrameImage	QT	Cl	QTMovie	dm	NSImage *
frameImageAtTime:	QT	Cl	QTMovie	dm	NSImage *	QTTime
movieFormatRepresentation	QT	Cl	QTMovie	dm	NSData *
writeToFile:withAttributes:	QT	Cl	QTMovie	dm	BOOL	NSString *	NSDictionary *
canUpdateMovieFile	QT	Cl	QTMovie	dm	BOOL
updateMovieFile	QT	Cl	QTMovie	dm	BOOL
play	QT	Cl	QTMovie	dm	void
stop	QT	Cl	QTMovie	dm	void
setCurrentTime:	QT	Cl	QTMovie	dm	void	QTTime
gotoBeginning	QT	Cl	QTMovie	dm	void
gotoEnd	QT	Cl	QTMovie	dm	void
gotoNextSelectionPoint	QT	Cl	QTMovie	dm	void
gotoPreviousSelectionPoint	QT	Cl	QTMovie	dm	void
gotoPosterTime	QT	Cl	QTMovie	dm	void
stepForward	QT	Cl	QTMovie	dm	void
stepBackward	QT	Cl	QTMovie	dm	void
setRate:	QT	Cl	QTMovie	dm	void	float
setVolume:	QT	Cl	QTMovie	dm	void	float
setMuted:	QT	Cl	QTMovie	dm	void	BOOL
setSelection:	QT	Cl	QTMovie	dm	void	QTTimeRange
selectionStart	QT	Cl	QTMovie	dm	QTTime
selectionEnd	QT	Cl	QTMovie	dm	QTTime
selectionDuration	QT	Cl	QTMovie	dm	QTTime
replaceSelectionWithSelectionFromMovie:	QT	Cl	QTMovie	dm	void	id
appendSelectionFromMovie:	QT	Cl	QTMovie	dm	void	id
insertSegmentOfMovie:timeRange:atTime:	QT	Cl	QTMovie	dm	void	QTMovie *	QTTimeRange	QTTime
insertSegmentOfMovie:fromRange:scaledToRange:	QT	Cl	QTMovie	dm	void	QTMovie *	QTTimeRange	QTTimeRange
insertEmptySegmentAt:	QT	Cl	QTMovie	dm	void	QTTimeRange
deleteSegment:	QT	Cl	QTMovie	dm	void	QTTimeRange
scaleSegment:newDuration:	QT	Cl	QTMovie	dm	void	QTTimeRange	QTTime
addImage:forDuration:withAttributes:	QT	Cl	QTMovie	dm	void	NSImage *	QTTime	NSDictionary *
delegate	QT	Cl	QTMovie	dm	id
setDelegate:	QT	Cl	QTMovie	dm	void	id
quickTimeMovie	QT	Cl	QTMovie	dm	Movie
quickTimeMovieController	QT	Cl	QTMovie	dm	MovieController
generateApertureModeDimensions	QT	Cl	QTMovie	dm	void
removeApertureModeDimensions	QT	Cl	QTMovie	dm	void
initWithFrame:	QT	Cl	QTMovieView	im	id	NSRect
movie	QT	Cl	QTMovieView	im	QTMovie *
isControllerVisible	QT	Cl	QTMovieView	im	BOOL
isEditable	QT	Cl	QTMovieView	im	BOOL
controllerBarHeight	QT	Cl	QTMovieView	im	float
preservesAspectRatio	QT	Cl	QTMovieView	im	BOOL
fillColor	QT	Cl	QTMovieView	im	NSColor *
movieBounds	QT	Cl	QTMovieView	im	NSRect
movieControllerBounds	QT	Cl	QTMovieView	im	NSRect
setMovie:	QT	Cl	QTMovieView	im	void	QTMovie *
setControllerVisible:	QT	Cl	QTMovieView	im	void	BOOL
setPreservesAspectRatio:	QT	Cl	QTMovieView	im	void	BOOL
setFillColor:	QT	Cl	QTMovieView	im	void	NSColor *
setEditable:	QT	Cl	QTMovieView	im	void	BOOL
setShowsResizeIndicator:	QT	Cl	QTMovieView	im	void	BOOL
play:	QT	Cl	QTMovieView	im	IBAction	id
pause:	QT	Cl	QTMovieView	im	IBAction	id
gotoBeginning:	QT	Cl	QTMovieView	im	IBAction	id
gotoEnd:	QT	Cl	QTMovieView	im	IBAction	id
gotoNextSelectionPoint:	QT	Cl	QTMovieView	im	IBAction	id
gotoPreviousSelectionPoint:	QT	Cl	QTMovieView	im	IBAction	id
gotoPosterFrame:	QT	Cl	QTMovieView	im	IBAction	id
stepForward:	QT	Cl	QTMovieView	im	IBAction	id
stepBackward:	QT	Cl	QTMovieView	im	IBAction	id
cut:	QT	Cl	QTMovieView	im	IBAction	id
copy:	QT	Cl	QTMovieView	im	IBAction	id
paste:	QT	Cl	QTMovieView	im	IBAction	id
selectAll:	QT	Cl	QTMovieView	im	IBAction	id
selectNone:	QT	Cl	QTMovieView	im	IBAction	id
delete:	QT	Cl	QTMovieView	im	IBAction	id
add:	QT	Cl	QTMovieView	im	IBAction	id
addScaled:	QT	Cl	QTMovieView	im	IBAction	id
replace:	QT	Cl	QTMovieView	im	IBAction	id
trim:	QT	Cl	QTMovieView	im	IBAction	id
valueWithQTTime:	QT	Cl	NSValue;QTTime	cm	NSValue *	QTTime
QTTimeValue	QT	Cl	NSValue;QTTime	im	QTTime
encodeQTTime:forKey:	QT	Cl	NSCoder;QTTime	im	void	QTTime	NSString *
decodeQTTimeForKey:	QT	Cl	NSCoder;QTTime	im	QTTime	NSString *
valueWithQTTimeRange:	QT	Cl	NSValue;QTTimeRange	cm	NSValue *	QTTimeRange
QTTimeRangeValue	QT	Cl	NSValue;QTTimeRange	im	QTTimeRange
encodeQTTimeRange:forKey:	QT	Cl	NSCoder;QTTimeRange	im	void	QTTimeRange	NSString *
decodeQTTimeRangeForKey:	QT	Cl	NSCoder;QTTimeRange	im	QTTimeRange	NSString *
trackWithQuickTimeTrack:error:	QT	Cl	QTTrack	cm	id	Track	NSError **
initWithQuickTimeTrack:error:	QT	Cl	QTTrack	im	id	Track	NSError **
movie	QT	Cl	QTTrack	im	QTMovie *
media	QT	Cl	QTTrack	im	QTMedia *
isEnabled	QT	Cl	QTTrack	im	BOOL
setEnabled:	QT	Cl	QTTrack	im	void	BOOL
volume	QT	Cl	QTTrack	im	float
setVolume:	QT	Cl	QTTrack	im	void	float
trackAttributes	QT	Cl	QTTrack	im	NSDictionary *
setTrackAttributes:	QT	Cl	QTTrack	im	void	NSDictionary *
attributeForKey:	QT	Cl	QTTrack	im	id	NSString *
setAttribute:forKey:	QT	Cl	QTTrack	im	void	id	NSString *
quickTimeTrack	QT	Cl	QTTrack	im	Track
insertSegmentOfTrack:timeRange:atTime:	QT	Cl	QTTrack	im	void	QTTrack *	QTTimeRange	QTTime
insertSegmentOfTrack:fromRange:scaledToRange:	QT	Cl	QTTrack	im	void	QTTrack *	QTTimeRange	QTTimeRange
insertEmptySegmentAt:	QT	Cl	QTTrack	im	void	QTTimeRange
deleteSegment:	QT	Cl	QTTrack	im	void	QTTimeRange
scaleSegment:newDuration:	QT	Cl	QTTrack	im	void	QTTimeRange	QTTime
addImage:forDuration:withAttributes:	QT	Cl	QTTrack	im	void	NSImage *	QTTime	NSDictionary *
apertureModeDimensionsForMode:	QT	Cl	QTTrack	im	NSSize	NSString *
setApertureModeDimensions:forMode:	QT	Cl	QTTrack	im	void	NSSize	NSString *
generateApertureModeDimensions	QT	Cl	QTTrack	im	void
removeApertureModeDimensions	QT	Cl	QTTrack	im	void
initWithBounds:	Q	Cl	PDFAnnotation	im	id	NSRect
page	Q	Cl	PDFAnnotation	im	PDFPage *
type	Q	Cl	PDFAnnotation	im	NSString *
shouldDisplay	Q	Cl	PDFAnnotation	im	BOOL
setShouldDisplay:	Q	Cl	PDFAnnotation	im	void	BOOL
shouldPrint	Q	Cl	PDFAnnotation	im	BOOL
setShouldPrint:	Q	Cl	PDFAnnotation	im	void	BOOL
contents	Q	Cl	PDFAnnotation	im	NSString *
setContents:	Q	Cl	PDFAnnotation	im	void	NSString *
toolTip	Q	Cl	PDFAnnotation	im	NSString *
bounds	Q	Cl	PDFAnnotation	im	NSRect
setBounds:	Q	Cl	PDFAnnotation	im	void	NSRect
border	Q	Cl	PDFAnnotation	im	PDFBorder *
setBorder:	Q	Cl	PDFAnnotation	im	void	PDFBorder *
color	Q	Cl	PDFAnnotation	im	NSColor *
setColor:	Q	Cl	PDFAnnotation	im	void	NSColor *
hasAppearanceStream	Q	Cl	PDFAnnotation	im	BOOL
drawWithBox:	Q	Cl	PDFAnnotation	im	void	PDFDisplayBox
controlType	Q	Cl	PDFAnnotationButtonWidget	im	PDFWidgetControlType
parentID	Q	Cl	PDFAnnotationButtonWidget	im	unsigned
state	Q	Cl	PDFAnnotationButtonWidget	im	int
setState:	Q	Cl	PDFAnnotationButtonWidget	im	void	int
setHighlighted:	Q	Cl	PDFAnnotationButtonWidget	im	void	BOOL
backgroundColor	Q	Cl	PDFAnnotationButtonWidget	im	NSColor *
setBackgroundColor:	Q	Cl	PDFAnnotationButtonWidget	im	void	NSColor *
interiorColor	Q	Cl	PDFAnnotationCircle	im	NSColor *
setInteriorColor:	Q	Cl	PDFAnnotationCircle	im	void	NSColor *
font	Q	Cl	PDFAnnotationFreeText	im	NSFont *
setFont:	Q	Cl	PDFAnnotationFreeText	im	void	NSFont *
alignment	Q	Cl	PDFAnnotationFreeText	im	NSTextAlignment
setAlignment:	Q	Cl	PDFAnnotationFreeText	im	void	NSTextAlignment
paths	Q	Cl	PDFAnnotationInk	im	NSArray *
addBezierPath:	Q	Cl	PDFAnnotationInk	im	void	NSBezierPath *
removeBezierPath:	Q	Cl	PDFAnnotationInk	im	void	NSBezierPath *
startPoint	Q	Cl	PDFAnnotationLine	im	NSPoint
setStartPoint:	Q	Cl	PDFAnnotationLine	im	void	NSPoint
endPoint	Q	Cl	PDFAnnotationLine	im	NSPoint
setEndPoint:	Q	Cl	PDFAnnotationLine	im	void	NSPoint
startLineStyle	Q	Cl	PDFAnnotationLine	im	PDFLineStyle
setStartLineStyle:	Q	Cl	PDFAnnotationLine	im	void	PDFLineStyle
endLineStyle	Q	Cl	PDFAnnotationLine	im	PDFLineStyle
setEndLineStyle:	Q	Cl	PDFAnnotationLine	im	void	PDFLineStyle
destination	Q	Cl	PDFAnnotationLink	im	PDFDestination *
setDestination:	Q	Cl	PDFAnnotationLink	im	void	PDFDestination *
URL	Q	Cl	PDFAnnotationLink	im	NSURL *
setURL:	Q	Cl	PDFAnnotationLink	im	void	NSURL *
setHighlighted:	Q	Cl	PDFAnnotationLink	im	void	BOOL
quadrilateralPoints	Q	Cl	PDFAnnotationMarkup	im	NSArray *
setQuadrilateralPoints:	Q	Cl	PDFAnnotationMarkup	im	void	NSArray *
markupType	Q	Cl	PDFAnnotationMarkup	im	int
setMarkupType:	Q	Cl	PDFAnnotationMarkup	im	void	int
interiorColor	Q	Cl	PDFAnnotationSquare	im	NSColor *
setInteriorColor:	Q	Cl	PDFAnnotationSquare	im	void	NSColor *
windowIsOpen	Q	Cl	PDFAnnotationText	im	BOOL
setWindowIsOpen:	Q	Cl	PDFAnnotationText	im	void	BOOL
iconType	Q	Cl	PDFAnnotationText	im	PDFTextAnnotationIconType
setIconType:	Q	Cl	PDFAnnotationText	im	void	PDFTextAnnotationIconType
stringValue	Q	Cl	PDFAnnotationTextWidget	im	NSString *
setStringValue:	Q	Cl	PDFAnnotationTextWidget	im	void	NSString *
font	Q	Cl	PDFAnnotationTextWidget	im	NSFont *
setFont:	Q	Cl	PDFAnnotationTextWidget	im	void	NSFont *
alignment	Q	Cl	PDFAnnotationTextWidget	im	NSTextAlignment
setAlignment:	Q	Cl	PDFAnnotationTextWidget	im	void	NSTextAlignment
style	Q	Cl	PDFBorder	im	PDFBorderStyle
setStyle:	Q	Cl	PDFBorder	im	void	PDFBorderStyle
lineWidth	Q	Cl	PDFBorder	im	float
setLineWidth:	Q	Cl	PDFBorder	im	void	float
horizontalCornerRadius	Q	Cl	PDFBorder	im	float
setHorizontalCornerRadius:	Q	Cl	PDFBorder	im	void	float
verticalCornerRadius	Q	Cl	PDFBorder	im	float
setVerticalCornerRadius:	Q	Cl	PDFBorder	im	void	float
dashPattern	Q	Cl	PDFBorder	im	NSArray *
setDashPattern:	Q	Cl	PDFBorder	im	void	NSArray *
drawInRect:	Q	Cl	PDFBorder	im	void	NSRect
initWithPage:atPoint:	Q	Cl	PDFDestination	im	id	PDFPage *	NSPoint
page	Q	Cl	PDFDestination	im	PDFPage *
point	Q	Cl	PDFDestination	im	NSPoint
initWithURL:	Q	Cl	PDFDocument	im	id	NSURL *
initWithData:	Q	Cl	PDFDocument	im	id	NSData *
documentURL	Q	Cl	PDFDocument	im	NSURL *
documentAttributes	Q	Cl	PDFDocument	im	NSDictionary *
setDocumentAttributes:	Q	Cl	PDFDocument	im	void	NSDictionary *
majorVersion	Q	Cl	PDFDocument	im	int
minorVersion	Q	Cl	PDFDocument	im	int
isEncrypted	Q	Cl	PDFDocument	im	BOOL
isLocked	Q	Cl	PDFDocument	im	BOOL
unlockWithPassword:	Q	Cl	PDFDocument	im	BOOL	NSString *
allowsPrinting	Q	Cl	PDFDocument	im	BOOL
allowsCopying	Q	Cl	PDFDocument	im	BOOL
string	Q	Cl	PDFDocument	im	NSString *
setDelegate:	Q	Cl	PDFDocument	im	void	id
delegate	Q	Cl	PDFDocument	im	id
dataRepresentation	Q	Cl	PDFDocument	im	NSData *
writeToFile:	Q	Cl	PDFDocument	im	BOOL	NSString *
writeToFile:withOptions:	Q	Cl	PDFDocument	im	BOOL	NSString *	NSDictionary *
writeToURL:	Q	Cl	PDFDocument	im	BOOL	NSURL *
writeToURL:withOptions:	Q	Cl	PDFDocument	im	BOOL	NSURL *	NSDictionary *
outlineRoot	Q	Cl	PDFDocument	im	PDFOutline *
outlineItemForSelection:	Q	Cl	PDFDocument	im	PDFOutline *	PDFSelection *
pageCount	Q	Cl	PDFDocument	im	unsigned int
pageAtIndex:	Q	Cl	PDFDocument	im	PDFPage *	unsigned int
indexForPage:	Q	Cl	PDFDocument	im	unsigned int	PDFPage *
insertPage:atIndex:	Q	Cl	PDFDocument	im	void	PDFPage *	unsigned int
removePageAtIndex:	Q	Cl	PDFDocument	im	void	unsigned int
exchangePageAtIndex:withPageAtIndex:	Q	Cl	PDFDocument	im	void	unsigned int	unsigned int
findString:withOptions:	Q	Cl	PDFDocument	im	NSArray *	NSString *	int
beginFindString:withOptions:	Q	Cl	PDFDocument	im	void	NSString *	int
findString:fromSelection:withOptions:	Q	Cl	PDFDocument	im	PDFSelection *	NSString *	PDFSelection *	int
isFinding	Q	Cl	PDFDocument	im	BOOL
cancelFindString	Q	Cl	PDFDocument	im	void
selectionForEntireDocument	Q	Cl	PDFDocument	im	PDFSelection *
selectionFromPage:atPoint:toPage:atPoint:	Q	Cl	PDFDocument	im	PDFSelection *	PDFPage *	NSPoint	PDFPage *	NSPoint
selectionFromPage:atCharacterIndex:toPage:atCharacterIndex:	Q	Cl	PDFDocument	im	PDFSelection *	PDFPage *	unsigned int	PDFPage *	unsigned int
documentDidUnlock:	Q	Cl	NSObject;PDFDocument	im	void	NSNotification *
documentDidBeginDocumentFind:	Q	Cl	NSObject;PDFDocument	im	void	NSNotification *
documentDidEndDocumentFind:	Q	Cl	NSObject;PDFDocument	im	void	NSNotification *
documentDidBeginPageFind:	Q	Cl	NSObject;PDFDocument	im	void	NSNotification *
documentDidEndPageFind:	Q	Cl	NSObject;PDFDocument	im	void	NSNotification *
documentDidFindMatch:	Q	Cl	NSObject;PDFDocument	im	void	NSNotification *
didMatchString:	Q	Cl	NSObject;PDFDocument	dm	void	PDFSelection *
initWithDocument:	Q	Cl	PDFOutline	im	id	PDFDocument *
document	Q	Cl	PDFOutline	im	PDFDocument *
numberOfChildren	Q	Cl	PDFOutline	im	int
childAtIndex:	Q	Cl	PDFOutline	im	PDFOutline *	int
label	Q	Cl	PDFOutline	im	NSString *
destination	Q	Cl	PDFOutline	im	PDFDestination *
initWithDocument:	Q	Cl	PDFPage	im	id	PDFDocument *
document	Q	Cl	PDFPage	im	PDFDocument *
label	Q	Cl	PDFPage	im	NSString *
boundsForBox:	Q	Cl	PDFPage	im	NSRect	PDFDisplayBox
setBounds:forBox:	Q	Cl	PDFPage	im	void	NSRect	PDFDisplayBox
rotation	Q	Cl	PDFPage	im	int
setRotation:	Q	Cl	PDFPage	im	void	int
annotations	Q	Cl	PDFPage	im	NSArray *
displaysAnnotations	Q	Cl	PDFPage	im	BOOL
setDisplaysAnnotations:	Q	Cl	PDFPage	im	void	BOOL
addAnnotation:	Q	Cl	PDFPage	im	void	PDFAnnotation *
removeAnnotation:	Q	Cl	PDFPage	im	void	PDFAnnotation *
annotationAtPoint:	Q	Cl	PDFPage	im	PDFAnnotation *	NSPoint
drawWithBox:	Q	Cl	PDFPage	im	void	PDFDisplayBox
numberOfCharacters	Q	Cl	PDFPage	im	unsigned int
string	Q	Cl	PDFPage	im	NSString *
attributedString	Q	Cl	PDFPage	im	NSAttributedString *
characterBoundsAtIndex:	Q	Cl	PDFPage	im	NSRect	int
characterIndexAtPoint:	Q	Cl	PDFPage	im	int	NSPoint
selectionForRect:	Q	Cl	PDFPage	im	PDFSelection *	NSRect
selectionForWordAtPoint:	Q	Cl	PDFPage	im	PDFSelection *	NSPoint
selectionForLineAtPoint:	Q	Cl	PDFPage	im	PDFSelection *	NSPoint
selectionFromPoint:toPoint:	Q	Cl	PDFPage	im	PDFSelection *	NSPoint	NSPoint
selectionForRange:	Q	Cl	PDFPage	im	PDFSelection *	NSRange
dataRepresentation	Q	Cl	PDFPage	im	NSData *
pages	Q	Cl	PDFSelection	im	NSArray *
string	Q	Cl	PDFSelection	im	NSString *
attributedString	Q	Cl	PDFSelection	im	NSAttributedString *
boundsForPage:	Q	Cl	PDFSelection	im	NSRect	PDFPage *
addSelection:	Q	Cl	PDFSelection	im	void	PDFSelection *
extendSelectionAtEnd:	Q	Cl	PDFSelection	im	void	int
extendSelectionAtStart:	Q	Cl	PDFSelection	im	void	int
drawForPage:active:	Q	Cl	PDFSelection	im	void	PDFPage *	BOOL
drawForPage:withBox:active:	Q	Cl	PDFSelection	im	void	PDFPage *	PDFDisplayBox	BOOL
document	Q	Cl	PDFView	im	PDFDocument *
setDocument:	Q	Cl	PDFView	im	void	PDFDocument *
canGoToFirstPage	Q	Cl	PDFView	im	BOOL
goToFirstPage:	Q	Cl	PDFView	im	IBAction	id
canGoToLastPage	Q	Cl	PDFView	im	BOOL
goToLastPage:	Q	Cl	PDFView	im	IBAction	id
canGoToNextPage	Q	Cl	PDFView	im	BOOL
goToNextPage:	Q	Cl	PDFView	im	IBAction	id
canGoToPreviousPage	Q	Cl	PDFView	im	BOOL
goToPreviousPage:	Q	Cl	PDFView	im	IBAction	id
canGoBack	Q	Cl	PDFView	im	BOOL
goBack:	Q	Cl	PDFView	im	IBAction	id
canGoForward	Q	Cl	PDFView	im	BOOL
goForward:	Q	Cl	PDFView	im	IBAction	id
currentPage	Q	Cl	PDFView	im	PDFPage *
goToPage:	Q	Cl	PDFView	im	void	PDFPage *
currentDestination	Q	Cl	PDFView	im	PDFDestination *
goToDestination:	Q	Cl	PDFView	im	void	PDFDestination *
goToSelection:	Q	Cl	PDFView	im	void	PDFSelection *
setDisplayMode:	Q	Cl	PDFView	im	void	PDFDisplayMode
displayMode	Q	Cl	PDFView	im	PDFDisplayMode
setDisplaysPageBreaks:	Q	Cl	PDFView	im	void	BOOL
displaysPageBreaks	Q	Cl	PDFView	im	BOOL
setDisplayBox:	Q	Cl	PDFView	im	void	PDFDisplayBox
displayBox	Q	Cl	PDFView	im	PDFDisplayBox
setDisplaysAsBook:	Q	Cl	PDFView	im	void	BOOL
displaysAsBook	Q	Cl	PDFView	im	BOOL
setShouldAntiAlias:	Q	Cl	PDFView	im	void	BOOL
shouldAntiAlias	Q	Cl	PDFView	im	BOOL
setGreekingThreshold:	Q	Cl	PDFView	im	void	float
greekingThreshold	Q	Cl	PDFView	im	float
takeBackgroundColorFrom:	Q	Cl	PDFView	im	IBAction	id
setBackgroundColor:	Q	Cl	PDFView	im	void	NSColor *
backgroundColor	Q	Cl	PDFView	im	NSColor *
setDelegate:	Q	Cl	PDFView	im	void	id
delegate	Q	Cl	PDFView	im	id
setScaleFactor:	Q	Cl	PDFView	im	void	float
scaleFactor	Q	Cl	PDFView	im	float
zoomIn:	Q	Cl	PDFView	im	IBAction	id
canZoomIn	Q	Cl	PDFView	im	BOOL
zoomOut:	Q	Cl	PDFView	im	IBAction	id
canZoomOut	Q	Cl	PDFView	im	BOOL
setAutoScales:	Q	Cl	PDFView	im	void	BOOL
autoScales	Q	Cl	PDFView	im	BOOL
areaOfInterestForMouse:	Q	Cl	PDFView	im	PDFAreaOfInterest	NSEvent *
setCursorForAreaOfInterest:	Q	Cl	PDFView	im	void	PDFAreaOfInterest
currentSelection	Q	Cl	PDFView	im	PDFSelection *
setCurrentSelection:	Q	Cl	PDFView	im	void	PDFSelection *
clearSelection	Q	Cl	PDFView	im	void
selectAll:	Q	Cl	PDFView	im	IBAction	id
scrollSelectionToVisible:	Q	Cl	PDFView	im	void	id
takePasswordFrom:	Q	Cl	PDFView	im	void	id
drawPage:	Q	Cl	PDFView	im	void	PDFPage *
copy:	Q	Cl	PDFView	im	void	id
printWithInfo:autoRotate:	Q	Cl	PDFView	im	void	NSPrintInfo *	BOOL
pageForPoint:nearest:	Q	Cl	PDFView	im	PDFPage *	NSPoint	BOOL
convertPoint:toPage:	Q	Cl	PDFView	im	NSPoint	NSPoint	PDFPage *
convertRect:toPage:	Q	Cl	PDFView	im	NSRect	NSRect	PDFPage *
convertPoint:fromPage:	Q	Cl	PDFView	im	NSPoint	NSPoint	PDFPage *
convertRect:fromPage:	Q	Cl	PDFView	im	NSRect	NSRect	PDFPage *
documentView	Q	Cl	PDFView	im	id
layoutDocumentView	Q	Cl	PDFView	im	void
rowSizeForPage:	Q	Cl	PDFView	im	NSSize	PDFPage *
setAllowsDragging:	Q	Cl	PDFView	im	void	BOOL
allowsDragging	Q	Cl	PDFView	im	BOOL
PDFViewWillChangeScaleFactor:toScale:	Q	Cl	NSObject;PDFView	dm	float	PDFView *	float
PDFViewWillClickOnLink:withURL:	Q	Cl	NSObject;PDFView	dm	void	PDFView *	NSURL *
initWithOpenGLContext:pixelFormat:file:	Q	Cl	QCRenderer	im	id	NSOpenGLContext *	NSOpenGLPixelFormat *	NSString *
renderAtTime:arguments:	Q	Cl	QCRenderer	im	BOOL	NSTimeInterval	NSDictionary *
attributes	Q	Cl	QCRenderer	im	NSDictionary *
inputKeys	Q	Cl	QCRenderer	im	NSArray *
outputKeys	Q	Cl	QCRenderer	im	NSArray *
setValue:forInputKey:	Q	Cl	QCRenderer	im	BOOL	id	NSString *
valueForInputKey:	Q	Cl	QCRenderer	im	id	id	NSString *
valueForOutputKey:	Q	Cl	QCRenderer	im	id	NSString *
loadCompositionFromFile:	Q	Cl	QCView	im	BOOL	NSString *
setAutostartsRendering:	Q	Cl	QCView	im	void	BOOL
autostartsRendering	Q	Cl	QCView	im	BOOL
setEraseColor:	Q	Cl	QCView	im	void	NSColor *
eraseColor	Q	Cl	QCView	im	NSColor *
setEventForwardingMask:	Q	Cl	QCView	im	void	unsigned
eventForwardingMask	Q	Cl	QCView	im	unsigned
setMaxRenderingFrameRate:	Q	Cl	QCView	im	void	float
maxRenderingFrameRate	Q	Cl	QCView	im	float
erase	Q	Cl	QCView	im	void
startRendering	Q	Cl	QCView	im	BOOL
stopRendering	Q	Cl	QCView	im	void
isRendering	Q	Cl	QCView	im	BOOL
attributes	Q	Cl	QCView	im	NSDictionary *
inputKeys	Q	Cl	QCView	im	NSArray *
outputKeys	Q	Cl	QCView	im	NSArray *
setValue:forInputKey:	Q	Cl	QCView	im	BOOL	id	NSString *
valueForInputKey:	Q	Cl	QCView	im	id	id	NSString *
valueForOutputKey:	Q	Cl	QCView	im	id	NSString *
start:	Q	Cl	QCView	im	IBAction	id
stop:	Q	Cl	QCView	im	IBAction	id
colorWithCGColor:	CI	Cl	CIColor	cm	CIColor *	CGColorRef
colorWithRed:green:blue:alpha:	CI	Cl	CIColor	cm	CIColor *	float	float	float	float
colorWithRed:green:blue:	CI	Cl	CIColor	cm	CIColor *	float	float	float
colorWithString:	CI	Cl	CIColor	cm	CIColor *	NSString *
initWithCGColor:	CI	Cl	CIColor	im	id	CGColorRef
numberOfComponents	CI	Cl	CIColor	im	size_t
components	CI	Cl	CIColor	im	const float *
alpha	CI	Cl	CIColor	im	float
colorSpace	CI	Cl	CIColor	im	CGColorSpaceRef
red	CI	Cl	CIColor	im	float
green	CI	Cl	CIColor	im	float
blue	CI	Cl	CIColor	im	float
stringRepresentation	CI	Cl	CIColor	im	NSString *
contextWithCGLContext:pixelFormat:options:	CI	Cl	CIContext	cm	CIContext *	CGLContextObj	CGLPixelFormatObj	NSDictionary *
contextWithCGContext:options:	CI	Cl	CIContext	cm	CIContext *	CGContextRef	NSDictionary *
drawImage:atPoint:fromRect:	CI	Cl	CIContext	im	void	CIImage *	CGPoint	CGRect
drawImage:inRect:fromRect:	CI	Cl	CIContext	im	void	CIImage *	CGRect	CGRect
createCGImage:fromRect:	CI	Cl	CIContext	im	CGImageRef	CIImage *	CGRect
createCGLayerWithSize:info:	CI	Cl	CIContext	im	CGLayerRef	CGSize	CFDictionaryRef
reclaimResources	CI	Cl	CIContext	im	void
clearCaches	CI	Cl	CIContext	im	void
inputKeys	CI	Cl	CIFilter	im	NSArray *
outputKeys	CI	Cl	CIFilter	im	NSArray *
setDefaults	CI	Cl	CIFilter	im	void
attributes	CI	Cl	CIFilter	im	NSDictionary *
apply:arguments:options:	CI	Cl	CIFilter	im	CIImage *	CIKernel *	NSArray *	NSDictionary *
apply:	CI	Cl	CIFilter	im	CIImage *	CIKernel *
filterWithName:	CI	Cl	CIFilter	cm	CIFilter *	NSString *
filterWithName:keysAndValues:	CI	Cl	CIFilter	cm	CIFilter *	NSString *
filterNamesInCategory:	CI	Cl	CIFilter	cm	NSArray *	NSString *
filterNamesInCategories:	CI	Cl	CIFilter	cm	NSArray *	NSArray *
registerFilterName:constructor:classAttributes:	CI	Cl	CIFilter	cm	void	NSString *	id	NSDictionary *
localizedNameForFilterName:	CI	Cl	CIFilter	cm	NSString *	NSString *
localizedNameForCategory:	CI	Cl	CIFilter	cm	NSString *	NSString *
shapeWithRect:	CI	Cl	CIFilterShape	cm	id	CGRect
initWithRect:	CI	Cl	CIFilterShape	im	id	CGRect
transformBy:interior:	CI	Cl	CIFilterShape	im	CIFilterShape *	CGAffineTransform	BOOL
insetByX:Y:	CI	Cl	CIFilterShape	im	CIFilterShape *	int	int
unionWith:	CI	Cl	CIFilterShape	im	CIFilterShape *	CIFilterShape *
unionWithRect:	CI	Cl	CIFilterShape	im	CIFilterShape *	CGRect
intersectWith:	CI	Cl	CIFilterShape	im	CIFilterShape *	CIFilterShape *
intersectWithRect:	CI	Cl	CIFilterShape	im	CIFilterShape *	CGRect
imageWithCGImage:	CI	Cl	CIImage	cm	CIImage *	CGImageRef
imageWithCGImage:options:	CI	Cl	CIImage	cm	CIImage *	CGImageRef	NSDictionary *
imageWithCGLayer:	CI	Cl	CIImage	cm	CIImage *	CGLayerRef
imageWithCGLayer:options:	CI	Cl	CIImage	cm	CIImage *	CGLayerRef	NSDictionary *
imageWithBitmapData:bytesPerRow:size:format:colorSpace:	CI	Cl	CIImage	cm	CIImage *	NSData *	size_t	CGSize	CIFormat	CGColorSpaceRef
imageWithTexture:size:flipped:colorSpace:	CI	Cl	CIImage	cm	CIImage *	unsigned int	CGSize	BOOL	CGColorSpaceRef
imageWithContentsOfURL:	CI	Cl	CIImage	cm	CIImage *	NSURL *
imageWithContentsOfURL:options:	CI	Cl	CIImage	cm	CIImage *	NSURL *	NSDictionary *
imageWithData:	CI	Cl	CIImage	cm	CIImage *	NSData *
imageWithData:options:	CI	Cl	CIImage	cm	CIImage *	NSData *	NSDictionary *
imageWithCVImageBuffer:	CI	Cl	CIImage	cm	CIImage *	CVImageBufferRef
imageWithCVImageBuffer:options:	CI	Cl	CIImage	cm	CIImage *	CVImageBufferRef	NSDictionary *
initWithCGImage:	CI	Cl	CIImage	im	id	CGImageRef
initWithCGImage:options:	CI	Cl	CIImage	im	id	CGImageRef	NSDictionary *
initWithCGLayer:	CI	Cl	CIImage	im	id	CGLayerRef
initWithCGLayer:options:	CI	Cl	CIImage	im	id	CGLayerRef	NSDictionary *
initWithData:	CI	Cl	CIImage	im	id	NSData *
initWithData:options:	CI	Cl	CIImage	im	id	NSData *	NSDictionary *
initWithBitmapData:bytesPerRow:size:format:colorSpace:	CI	Cl	CIImage	im	id	NSData *	size_t	CGSize	CIFormat	CGColorSpaceRef
initWithTexture:size:flipped:colorSpace:	CI	Cl	CIImage	im	id	unsigned int	CGSize	BOOL	CGColorSpaceRef
initWithContentsOfURL:	CI	Cl	CIImage	im	id	NSURL *
initWithContentsOfURL:options:	CI	Cl	CIImage	im	id	NSURL *	NSDictionary *
initWithCVImageBuffer:	CI	Cl	CIImage	im	id	CVImageBufferRef
initWithCVImageBuffer:options:	CI	Cl	CIImage	im	id	CVImageBufferRef	NSDictionary *
imageByApplyingTransform:	CI	Cl	CIImage	im	CIImage *	CGAffineTransform
extent	CI	Cl	CIImage	im	CGRect
definition	CI	Cl	CIImage	im	CIFilterShape *
imageAccumulatorWithExtent:format:	CI	Cl	CIImageAccumulator	cm	CIImageAccumulator *	CGRect	CIFormat
initWithExtent:format:	CI	Cl	CIImageAccumulator	im	id	CGRect	CIFormat
extent	CI	Cl	CIImageAccumulator	im	CGRect
format	CI	Cl	CIImageAccumulator	im	CIFormat
image	CI	Cl	CIImageAccumulator	im	CIImage *
setImage:	CI	Cl	CIImageAccumulator	im	void	CIImage *
setImage:dirtyRect:	CI	Cl	CIImageAccumulator	im	void	CIImage *	CGRect
imageWithImageProvider:size::format:colorSpace:options:	CI	Cl	CIImage;CIImageProvider	cm	CIImage *	id	size_t	size_t	CIFormat	CGColorSpaceRef	NSDictionary *
initWithImageProvider:size::format:colorSpace:options:	CI	Cl	CIImage;CIImageProvider	im	id	id	size_t	size_t	CIFormat	CGColorSpaceRef	NSDictionary *
provideImageData:bytesPerRow:origin::size::userInfo:	CI	Cl	NSObject;CIImageProvider	im	void	void *	size_t	size_t	size_t	size_t	size_t	id
kernelsWithString:	CI	Cl	CIKernel	cm	NSArray *	NSString *
name	CI	Cl	CIKernel	im	NSString *
setROISelector:	CI	Cl	CIKernel	im	void	SEL
loadAllPlugIns	CI	Cl	CIPlugIn	cm	void
loadNonExecutablePlugIns	CI	Cl	CIPlugIn	cm	void
loadPlugIn:allowNonExecutable:	CI	Cl	CIPlugIn	cm	void	NSURL *	BOOL
load:	CI	Pr	CIPlugInRegistration;CIPlugInInterface	im	BOOL	void *
samplerWithImage:	CI	Cl	CISampler	cm	CISampler *	CIImage *
samplerWithImage:keysAndValues:	CI	Cl	CISampler	cm	CISampler *	CIImage *
samplerWithImage:options:	CI	Cl	CISampler	cm	CISampler *	CIImage *	NSDictionary *
initWithImage:	CI	Cl	CISampler	im	id	CIImage *
initWithImage:keysAndValues:	CI	Cl	CISampler	im	id	CIImage *
initWithImage:options:	CI	Cl	CISampler	im	id	CIImage *	NSDictionary *
definition	CI	Cl	CISampler	im	CIFilterShape *
extent	CI	Cl	CISampler	im	CGRect
vectorWithValues:count:	CI	Cl	CIVector	cm	CIVector *	const float *	size_t
vectorWithX:	CI	Cl	CIVector	cm	CIVector *	float
vectorWithX:Y:	CI	Cl	CIVector	cm	CIVector *	float	float
vectorWithX:Y:Z:	CI	Cl	CIVector	cm	CIVector *	float	float	float
vectorWithX:Y:Z:W:	CI	Cl	CIVector	cm	CIVector *	float	float	float	float
vectorWithString:	CI	Cl	CIVector	cm	CIVector *	NSString *
initWithValues:count:	CI	Cl	CIVector	im	id	const float *	size_t
initWithX:	CI	Cl	CIVector	im	id	float
initWithX:Y:	CI	Cl	CIVector	im	id	float	float
initWithX:Y:Z:	CI	Cl	CIVector	im	id	float	float	float
initWithX:Y:Z:W:	CI	Cl	CIVector	im	id	float	float	float	float
valueAtIndex:	CI	Cl	CIVector	im	float	size_t
count	CI	Cl	CIVector	im	size_t
X	CI	Cl	CIVector	im	float
Y	CI	Cl	CIVector	im	float
Z	CI	Cl	CIVector	im	float
W	CI	Cl	CIVector	im	float
stringRepresentation	CI	Cl	CIVector	im	NSString *
defaultsForModuleWithName:	Sav	Cl	ScreenSaverDefaults	cm	id	NSString *
backingStoreType	Sav	Cl	ScreenSaverView	cm	NSBackingStoreType
performGammaFade	Sav	Cl	ScreenSaverView	cm	BOOL
initWithFrame:	Sav	Cl	ScreenSaverView	im	id	NSRect
initWithFrame:isPreview:	Sav	Cl	ScreenSaverView	im	id	NSRect	BOOL
animationTimeInterval	Sav	Cl	ScreenSaverView	im	NSTimeInterval
setAnimationTimeInterval:	Sav	Cl	ScreenSaverView	im	void	NSTimeInterval
startAnimation	Sav	Cl	ScreenSaverView	im	void
stopAnimation	Sav	Cl	ScreenSaverView	im	void
isAnimating	Sav	Cl	ScreenSaverView	im	BOOL
drawRect:	Sav	Cl	ScreenSaverView	im	void	NSRect
animateOneFrame	Sav	Cl	ScreenSaverView	im	void
hasConfigureSheet	Sav	Cl	ScreenSaverView	im	BOOL
configureSheet	Sav	Cl	ScreenSaverView	im	NSWindow *
isPreview	Sav	Cl	ScreenSaverView	im	BOOL
authorization	SF	Cl	SFAuthorization	cm	id
authorizationRef	SF	Cl	SFAuthorization	im	AuthorizationRef
authorizationWithFlags:rights:environment:	SF	Cl	SFAuthorization	cm	id	AuthorizationFlags	const AuthorizationRights *	const AuthorizationEnvironment *
initWithFlags:rights:environment:	SF	Cl	SFAuthorization	im	id	AuthorizationFlags	const AuthorizationRights *	const AuthorizationEnvironment *
invalidateCredentials	SF	Cl	SFAuthorization	im	void
permitWithRights:flags:environment:authorizedRights:	SF	Cl	SFAuthorization	im	OSStatus	const AuthorizationRights *	AuthorizationFlags	const AuthorizationEnvironment *	AuthorizationRights *
permitWithRight:flags:	SF	Cl	SFAuthorization	im	OSStatus	AuthorizationString	AuthorizationFlags
setString:	SI	Cl	SFAuthorizationView	im	void	AuthorizationString
setAuthorizationRights:	SI	Cl	SFAuthorizationView	im	void	const AuthorizationRights *
authorizationRights	SI	Cl	SFAuthorizationView	im	AuthorizationRights *
authorization	SI	Cl	SFAuthorizationView	im	SFAuthorization *
updateStatus:	SI	Cl	SFAuthorizationView	im	BOOL	id
setAutoupdate:	SI	Cl	SFAuthorizationView	im	void	BOOL
setAutoupdate:interval:	SI	Cl	SFAuthorizationView	im	void	BOOL	NSTimeInterval
authorizationState	SI	Cl	SFAuthorizationView	im	SFAuthorizationViewState
setEnabled:	SI	Cl	SFAuthorizationView	im	void	BOOL
isEnabled	SI	Cl	SFAuthorizationView	im	BOOL
setFlags:	SI	Cl	SFAuthorizationView	im	void	AuthorizationFlags
setDelegate:	SI	Cl	SFAuthorizationView	im	void	id
delegate	SI	Cl	SFAuthorizationView	im	id
authorize:	SI	Cl	SFAuthorizationView	im	BOOL	id
deauthorize:	SI	Cl	SFAuthorizationView	im	BOOL	id
authorizationViewDidAuthorize:	SI	Cl	NSObject;SFAuthorizationView	dm	void	SFAuthorizationView *
authorizationViewDidDeauthorize:	SI	Cl	NSObject;SFAuthorizationView	dm	void	SFAuthorizationView *
authorizationViewShouldDeauthorize:	SI	Cl	NSObject;SFAuthorizationView	dm	BOOL	SFAuthorizationView *
authorizationViewCreatedAuthorization:	SI	Cl	NSObject;SFAuthorizationView	dm	void	SFAuthorizationView *
authorizationViewReleasedAuthorization:	SI	Cl	NSObject;SFAuthorizationView	dm	void	SFAuthorizationView *
sharedCertificatePanel	SI	Cl	SFCertificatePanel	cm	SFCertificatePanel *
runModalForCertificates:showGroup:	SI	Cl	SFCertificatePanel	im	int	NSArray *	BOOL
beginSheetForWindow:modalDelegate:didEndSelector:contextInfo:certificates:showGroup:	SI	Cl	SFCertificatePanel	im	void	NSWindow *	id	SEL	void *	NSArray *	BOOL
setPolicies:	SI	Cl	SFCertificatePanel	im	void	id
policies	SI	Cl	SFCertificatePanel	im	NSArray *
setDefaultButtonTitle:	SI	Cl	SFCertificatePanel	im	void	NSString *
setAlternateButtonTitle:	SI	Cl	SFCertificatePanel	im	void	NSString *
openHelpAnchor:inBook:setHelpAnchor:setShowsHelp:	SI	Cl	SFCertificatePanel	im	id	void	BOOL
showsHelp	SI	Cl	SFCertificatePanel	im	BOOL
setHelpAnchor:	SI	Cl	SFCertificatePanel	im	void	NSString *
helpAnchor	SI	Cl	SFCertificatePanel	im	NSString *
certificatePanelShowHelp:	SI	Cl	NSObject;SFCertificatePanel	dm	BOOL	SFCertificatePanel *
sharedCertificateTrustPanel	SI	Cl	SFCertificateTrustPanel	cm	SFCertificateTrustPanel *
runModalForTrust:message:	SI	Cl	SFCertificateTrustPanel	im	int	SecTrustRef	NSString *
beginSheetForWindow:modalDelegate:didEndSelector:contextInfo:trust:message:	SI	Cl	SFCertificateTrustPanel	im	void	NSWindow *	id	SEL	void *	SecTrustRef	NSString *
setCertificate:	SI	Cl	SFCertificateView	im	void	SecCertificateRef
certificate	SI	Cl	SFCertificateView	im	SecCertificateRef
setEditableTrust:	SI	Cl	SFCertificateView	im	void	BOOL
isEditable	SI	Cl	SFCertificateView	im	BOOL
setDisplayTrust:	SI	Cl	SFCertificateView	im	void	BOOL
isTrustDisplayed	SI	Cl	SFCertificateView	im	BOOL
saveTrustSettings	SI	Cl	SFCertificateView	im	void
setDisplayDetails:	SI	Cl	SFCertificateView	im	void	BOOL
detailsDisplayed	SI	Cl	SFCertificateView	im	BOOL
setPolicies:	SI	Cl	SFCertificateView	im	void	id
policies	SI	Cl	SFCertificateView	im	NSArray *
sharedChooseIdentityPanel	SI	Cl	SFChooseIdentityPanel	cm	SFChooseIdentityPanel *
runModalForIdentities:message:	SI	Cl	SFChooseIdentityPanel	im	int	NSArray *	NSString *
beginSheetForWindow:modalDelegate:didEndSelector:contextInfo:identities:message:	SI	Cl	SFChooseIdentityPanel	im	void	NSWindow *	id	SEL	void *	NSArray *	NSString *
identity	SI	Cl	SFChooseIdentityPanel	im	SecIdentityRef
setPolicies:	SI	Cl	SFChooseIdentityPanel	im	void	id
policies	SI	Cl	SFChooseIdentityPanel	im	NSArray *
setDefaultButtonTitle:	SI	Cl	SFChooseIdentityPanel	im	void	NSString *
setAlternateButtonTitle:	SI	Cl	SFChooseIdentityPanel	im	void	NSString *
openHelpAnchor:inBook:setHelpAnchor:setShowsHelp:	SI	Cl	SFChooseIdentityPanel	im	id	void	BOOL
showsHelp	SI	Cl	SFChooseIdentityPanel	im	BOOL
setHelpAnchor:	SI	Cl	SFChooseIdentityPanel	im	void	NSString *
helpAnchor	SI	Cl	SFChooseIdentityPanel	im	NSString *
chooseIdentityPanelShowHelp:	SI	Cl	NSObject;SFChooseIdentityPanel	dm	BOOL	SFChooseIdentityPanel *
sharedKeychainSavePanel	SI	Cl	SFKeychainSavePanel	cm	SFKeychainSavePanel *
runModalForDirectory:file:	SI	Cl	SFKeychainSavePanel	im	int	NSString *	NSString *
setPassword:	SI	Cl	SFKeychainSavePanel	im	void	NSString *
keychain	SI	Cl	SFKeychainSavePanel	im	SecKeychainRef
createPanelDidEnd:returnCode:contextInfo:	SI	Cl	SFKeychainSavePanel	im	void	NSWindow *	int	void *
beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:	SI	Cl	SFKeychainSavePanel	im	void	NSString *	NSString *	NSWindow *	id	SEL	void *
sharedKeychainSettingsPanel	SI	Cl	SFKeychainSettingsPanel	cm	SFKeychainSettingsPanel *
runModalForSettings:keychain:	SI	Cl	SFKeychainSettingsPanel	im	int	SecKeychainSettings *	SecKeychainRef
settingsPanelDidEnd:returnCode:contextInfo:	SI	Cl	SFKeychainSettingsPanel	im	void	NSWindow *	int	void *
beginSheetForWindow:modalDelegate:didEndSelector:contextInfo:settings:keychain:	SI	Cl	SFKeychainSettingsPanel	im	void	NSWindow *	id	SEL	void *	SecKeychainSettings *	SecKeychainRef
filename	Test	Cl	NSException;NSException_SenTestFailure	im	NSString *
filePathInProject	Test	Cl	NSException;NSException_SenTestFailure	im	NSString *
lineNumber	Test	Cl	NSException;NSException_SenTestFailure	im	NSNumber *
failureInFile:atLine:withDescription:	Test	Cl	NSException;NSException_SenTestFailure	cm	NSException *	NSString *	int	NSString *
failureInCondition:isTrue:inFile:atLine:withDescription:	Test	Cl	NSException;NSException_SenTestFailure	cm	NSException *	NSString *	BOOL	NSString *	int	NSString *
failureInEqualityBetweenObject:andObject:inFile:atLine:withDescription:	Test	Cl	NSException;NSException_SenTestFailure	cm	NSException *	id	id	NSString *	int	NSString *
failureInEqualityBetweenValue:andValue:withAccuracy:inFile:atLine:withDescription:	Test	Cl	NSException;NSException_SenTestFailure	cm	NSException *	NSValue *	NSValue *	NSValue *	NSString *	int	NSString *
failureInRaise:inFile:atLine:withDescription:	Test	Cl	NSException;NSException_SenTestFailure	cm	NSException *	NSString *	NSString *	int	NSString *
failureInRaise:exception:inFile:atLine:withDescription:	Test	Cl	NSException;NSException_SenTestFailure	cm	NSException *	NSString *	NSException *	NSString *	int	NSString *
hasTestCaseSignature	Test	Cl	NSInvocation;NSInvocation_SenTesting	im	BOOL
compare:	Test	Cl	NSInvocation;NSInvocation_SenTesting	im	NSComparisonResult	NSInvocation *
testCaseCount	Test	Cl	SenTest	im	unsigned int
isEmpty	Test	Cl	SenTest	im	BOOL
name	Test	Cl	SenTest	im	NSString *
testRunClass	Test	Cl	SenTest	im	Class
performTest:	Test	Cl	SenTest	im	void	SenTestRun *
run	Test	Cl	SenTest	im	SenTestRun *
setUp	Test	Cl	SenTest	im	void
tearDown	Test	Cl	SenTest	im	void
testAddition	Test	Cl	MathTest;SenTestCase	im	void
testCaseWithInvocation:	Test	Cl	SenTestCase	cm	id	NSInvocation *
initWithInvocation:	Test	Cl	SenTestCase	im	id	NSInvocation *
testCaseWithSelector:	Test	Cl	SenTestCase	cm	id	SEL
initWithSelector:	Test	Cl	SenTestCase	im	id	SEL
setInvocation:	Test	Cl	SenTestCase	im	void	NSInvocation *
invocation	Test	Cl	SenTestCase	im	NSInvocation *
selector	Test	Cl	SenTestCase	im	SEL
continueAfterFailure	Test	Cl	SenTestCase	im	void
raiseAfterFailure	Test	Cl	SenTestCase	im	void
failWithException:	Test	Cl	SenTestCase	im	void	NSException *
testInvocations	Test	Cl	SenTestCase	cm	NSArray *
defaultTestSuite	Test	Cl	SenTestCase	cm	id
failureAction	Test	Cl	SenTestCase	im	SEL
setFailureAction:	Test	Cl	SenTestCase	im	void	SEL
exceptions	Test	Cl	SenTestCaseRun	im	NSArray *
addException:	Test	Cl	SenTestCaseRun	im	void	NSException *
fileExistsAtPathOrLink:	Test	Cl	NSFileManager;SenTestingUtilities	im	BOOL	NSString *
contentDescription	Test	Cl	NSValue;SenTestingUtilities	im	NSString *
resumeObservation	Test	Cl	SenTestObserver	cm	void
suspendObservation	Test	Cl	SenTestObserver	cm	void
testSuiteDidStart:	Test	Cl	SenTestObserver	cm	void	NSNotification *
testSuiteDidStop:	Test	Cl	SenTestObserver	cm	void	NSNotification *
testCaseDidStart:	Test	Cl	SenTestObserver	cm	void	NSNotification *
testCaseDidStop:	Test	Cl	SenTestObserver	cm	void	NSNotification *
testCaseDidFail:	Test	Cl	SenTestObserver	cm	void	NSNotification *
run	Test	Cl	NSNotification;SenTestObserver	im	SenTestRun *
test	Test	Cl	NSNotification;SenTestObserver	im	SenTest *
exception	Test	Cl	NSNotification;SenTestObserver	im	NSException *
isTesting	Test	Cl	SenTestProbe	cm	BOOL
testRunWithTest:	Test	Cl	SenTestRun	cm	id	SenTest *
initWithTest:	Test	Cl	SenTestRun	im	id	SenTest *
test	Test	Cl	SenTestRun	im	SenTest *
start	Test	Cl	SenTestRun	im	void
stop	Test	Cl	SenTestRun	im	void
startDate	Test	Cl	SenTestRun	im	NSDate *
stopDate	Test	Cl	SenTestRun	im	NSDate *
totalDuration	Test	Cl	SenTestRun	im	NSTimeInterval
testDuration	Test	Cl	SenTestRun	im	NSTimeInterval
testCaseCount	Test	Cl	SenTestRun	im	unsigned int
failureCount	Test	Cl	SenTestRun	im	unsigned int
unexpectedExceptionCount	Test	Cl	SenTestRun	im	unsigned int
totalFailureCount	Test	Cl	SenTestRun	im	unsigned int
hasSucceeded	Test	Cl	SenTestRun	im	BOOL
defaultTestSuite	Test	Cl	SenTestSuite	cm	id
testSuiteForBundlePath:	Test	Cl	SenTestSuite	cm	id	NSString *
testSuiteForTestCaseWithName:	Test	Cl	SenTestSuite	cm	id	NSString *
testSuiteForTestCaseClass:	Test	Cl	SenTestSuite	cm	id	Class
testSuiteWithName:	Test	Cl	SenTestSuite	cm	id	NSString *
initWithName:	Test	Cl	SenTestSuite	im	id	NSString *
addTest:	Test	Cl	SenTestSuite	im	void	SenTest *
addTestsEnumeratedBy:	Test	Cl	SenTestSuite	im	void	NSEnumerator *
setUp	Test	Cl	SenTestCase;SenTestSuite	cm	void
tearDown	Test	Cl	SenTestCase;SenTestSuite	cm	void
testRuns	Test	Cl	SenTestSuiteRun	im	NSArray *
addTestRun:	Test	Cl	SenTestSuiteRun	im	void	SenTestRun *
changeWithType:recordIdentifier:changes:	Sync	Cl	ISyncChange	cm	id	ISyncChangeType	NSString *	NSArray /* NSDictionary */ *
initWithChangeType:recordIdentifier:changes:	Sync	Cl	ISyncChange	im	id	ISyncChangeType	NSString *	NSArray /* NSDictionary */ *
type	Sync	Cl	ISyncChange	im	ISyncChangeType
recordIdentifier	Sync	Cl	ISyncChange	im	NSString *
record	Sync	Cl	ISyncChange	im	NSDictionary *
changes	Sync	Cl	ISyncChange	im	NSArray /* NSDictionary */ *
clientIdentifier	Sync	Cl	ISyncClient	im	NSString *
clientType	Sync	Cl	ISyncClient	im	NSString *
displayName	Sync	Cl	ISyncClient	im	NSString *
setDisplayName:	Sync	Cl	ISyncClient	im	void	NSString *
imagePath	Sync	Cl	ISyncClient	im	NSString *
setImagePath:	Sync	Cl	ISyncClient	im	void	NSString *
supportedEntityNames	Sync	Cl	ISyncClient	im	NSArray /* NSString */ *
canPushChangesForEntityName:	Sync	Cl	ISyncClient	im	BOOL	NSString *
canPullChangesForEntityName:	Sync	Cl	ISyncClient	im	BOOL	NSString *
lastSyncDateForEntityName:	Sync	Cl	ISyncClient	im	NSDate *	NSString *
lastSyncStatusForEntityName:	Sync	Cl	ISyncClient	im	ISyncStatus	NSString *
enabledEntityNames	Sync	Cl	ISyncClient	im	NSArray /* NSString */ *
isEnabledForEntityName:	Sync	Cl	ISyncClient	im	BOOL	NSString *
setEnabled:forEntityNames:	Sync	Cl	ISyncClient	im	void	BOOL	NSArray /* NSString */ *
shouldReplaceClientRecordsForEntityName:	Sync	Cl	ISyncClient	im	BOOL	NSString *
setShouldReplaceClientRecords:forEntityNames:	Sync	Cl	ISyncClient	im	void	BOOL	NSArray /* NSString */ *
objectForKey:	Sync	Cl	ISyncClient	im	id	NSString *
setObject:forKey:	Sync	Cl	ISyncClient	im	void	id<NSCoding>	NSString *
filters	Sync	Cl	ISyncClient	im	NSArray /* id <ISyncFiltering> */ *
setFilters:	Sync	Cl	ISyncClient	im	void	NSArray /* id <ISyncFiltering> */ *
shouldSynchronizeWithClientsOfType:	Sync	Cl	ISyncClient	im	BOOL	NSString *
setShouldSynchronize:withClientsOfType:	Sync	Cl	ISyncClient	im	void	BOOL	NSString *
syncAlertToolPath	Sync	Cl	ISyncClient	im	NSString *
setSyncAlertToolPath:	Sync	Cl	ISyncClient	im	void	NSString *
setSyncAlertHandler:selector:	Sync	Cl	ISyncClient	im	void	id	SEL
isEqual:	Sync	Pr	ISyncFiltering;ISyncFilter	im	BOOL	id
supportedEntityNames	Sync	Pr	ISyncFiltering;ISyncFilter	im	NSArray /* NSString */ *
shouldApplyRecord:withRecordIdentifier:	Sync	Pr	ISyncFiltering;ISyncFilter	im	BOOL	NSDictionary *	NSString *
filterMatchingAllFilters:	Sync	Cl	ISyncFilter	cm	id <ISyncFiltering>	NSArray /* id <ISyncFiltering> */ *
filterMatchingAtLeastOneFilter:	Sync	Cl	ISyncFilter	cm	id <ISyncFiltering>	NSArray /* id <ISyncFiltering> */ *
sharedManager	Sync	Cl	ISyncManager	cm	ISyncManager *
isEnabled	Sync	Cl	ISyncManager	im	BOOL
clientWithIdentifier:	Sync	Cl	ISyncManager	im	ISyncClient *	NSString *
registerClientWithIdentifier:descriptionFilePath:	Sync	Cl	ISyncManager	im	ISyncClient *	NSString *	NSString *
unregisterClient:	Sync	Cl	ISyncManager	im	void	ISyncClient *
registerSchemaWithBundlePath:	Sync	Cl	ISyncManager	im	BOOL	NSString *
unregisterSchemaWithName:	Sync	Cl	ISyncManager	im	void	NSString *
snapshotOfRecordsInTruthWithEntityNames:usingIdentifiersForClient:	Sync	Cl	ISyncManager	im	ISyncRecordSnapshot *	NSArray /* NSString */ *	ISyncClient *
recordsWithIdentifiers:	Sync	Cl	ISyncRecordSnapshot	im	NSDictionary *	NSArray /* NSString */ *
targetIdentifiersForRelationshipName:withSourceIdentifier:	Sync	Cl	ISyncRecordSnapshot	im	NSArray *	NSString *	NSString *
sourceIdentifiersForRelationshipName:withTargetIdentifier:	Sync	Cl	ISyncRecordSnapshot	im	NSArray *	NSString *	NSString *
recordsWithMatchingAttributes:	Sync	Cl	ISyncRecordSnapshot	im	NSDictionary *	NSDictionary *
beginSessionWithClient:entityNames:beforeDate:	Sync	Cl	ISyncSession	cm	ISyncSession *	ISyncClient *	NSArray /* entity name */ *	NSDate *
beginSessionInBackgroundWithClient:entityNames:target:selector:	Sync	Cl	ISyncSession	cm	void	ISyncClient *	NSArray /* entity name */ *	id	SEL
cancelPreviousBeginSessionWithClient:	Sync	Cl	ISyncSession	cm	void	ISyncClient *
clientDidResetEntityNames:	Sync	Cl	ISyncSession	im	void	NSArray /* NSString */ *
clientWantsToPushAllRecordsForEntityNames:	Sync	Cl	ISyncSession	im	void	NSArray /* NSString */ *
shouldPushChangesForEntityName:	Sync	Cl	ISyncSession	im	BOOL	NSString *
shouldPushAllRecordsForEntityName:	Sync	Cl	ISyncSession	im	BOOL	NSString *
shouldPullChangesForEntityName:	Sync	Cl	ISyncSession	im	BOOL	NSString *
shouldReplaceAllRecordsOnClientForEntityName:	Sync	Cl	ISyncSession	im	BOOL	NSString *
pushChange:	Sync	Cl	ISyncSession	im	void	ISyncChange *
pushChangesFromRecord:withIdentifier:	Sync	Cl	ISyncSession	im	void	NSDictionary *	NSString *
deleteRecordWithIdentifier:	Sync	Cl	ISyncSession	im	void	NSString *
clientLostRecordWithIdentifier:shouldReplaceOnNextSync:	Sync	Cl	ISyncSession	im	void	NSString *	BOOL
prepareToPullChangesForEntityNames:beforeDate:	Sync	Cl	ISyncSession	im	BOOL	NSArray /* NSString */ *	NSDate *
prepareToPullChangesInBackgroundForEntityNames:target:selector:	Sync	Cl	ISyncSession	im	void	NSArray /* NSString */ *	id	SEL
changeEnumeratorForEntityNames:	Sync	Cl	ISyncSession	im	NSEnumerator /* ISyncChange */ *	NSArray /* NSString */ *
clientAcceptedChangesForRecordWithIdentifier:formattedRecord:newRecordIdentifier:	Sync	Cl	ISyncSession	im	void	NSString *	NSDictionary *	NSString *
clientRefusedChangesForRecordWithIdentifier:	Sync	Cl	ISyncSession	im	void	NSString *
clientCommittedAcceptedChanges	Sync	Cl	ISyncSession	im	void
clientChangedRecordIdentifiers:	Sync	Cl	ISyncSession	im	void	NSDictionary *
isCancelled	Sync	Cl	ISyncSession	im	BOOL
cancelSyncing	Sync	Cl	ISyncSession	im	void
finishSyncing	Sync	Cl	ISyncSession	im	void
clientInfoForRecordWithIdentifier:	Sync	Cl	ISyncSession	im	id	NSString *
setClientInfo:forRecordWithIdentifier:	Sync	Cl	ISyncSession	im	void	id <NSCoding>	NSString *
snapshotOfRecordsInTruth	Sync	Cl	ISyncSession	im	ISyncRecordSnapshot *
hasFeature::	WK	Cl	DOMImplementation;DOMCore	im	BOOL	NSString *	NSString *
createDocumentType:::	WK	Cl	DOMImplementation;DOMCore	im	DOMDocumentType *	NSString *	NSString *	NSString *
createDocument:::	WK	Cl	DOMImplementation;DOMCore	im	DOMDocument *	NSString *	NSString *	DOMDocumentType *
nodeName	WK	Cl	DOMNode;DOMCore	im	NSString *
nodeValue	WK	Cl	DOMNode;DOMCore	im	NSString *
setNodeValue:	WK	Cl	DOMNode;DOMCore	im	void	NSString *
nodeType	WK	Cl	DOMNode;DOMCore	im	unsigned short
parentNode	WK	Cl	DOMNode;DOMCore	im	DOMNode *
childNodes	WK	Cl	DOMNode;DOMCore	im	DOMNodeList *
firstChild	WK	Cl	DOMNode;DOMCore	im	DOMNode *
lastChild	WK	Cl	DOMNode;DOMCore	im	DOMNode *
previousSibling	WK	Cl	DOMNode;DOMCore	im	DOMNode *
nextSibling	WK	Cl	DOMNode;DOMCore	im	DOMNode *
attributes	WK	Cl	DOMNode;DOMCore	im	DOMNamedNodeMap *
ownerDocument	WK	Cl	DOMNode;DOMCore	im	DOMDocument *
insertBefore::	WK	Cl	DOMNode;DOMCore	im	DOMNode *	DOMNode *	DOMNode *
replaceChild::	WK	Cl	DOMNode;DOMCore	im	DOMNode *	DOMNode *	DOMNode *
removeChild:	WK	Cl	DOMNode;DOMCore	im	DOMNode *	DOMNode *
appendChild:	WK	Cl	DOMNode;DOMCore	im	DOMNode *	DOMNode *
hasChildNodes	WK	Cl	DOMNode;DOMCore	im	BOOL
cloneNode:	WK	Cl	DOMNode;DOMCore	im	DOMNode *	BOOL
normalize	WK	Cl	DOMNode;DOMCore	im	void
isSupported::	WK	Cl	DOMNode;DOMCore	im	BOOL	NSString *	NSString *
namespaceURI	WK	Cl	DOMNode;DOMCore	im	NSString *
prefix	WK	Cl	DOMNode;DOMCore	im	NSString *
setPrefix:	WK	Cl	DOMNode;DOMCore	im	void	NSString *
localName	WK	Cl	DOMNode;DOMCore	im	NSString *
hasAttributes	WK	Cl	DOMNode;DOMCore	im	BOOL
item:	WK	Cl	DOMNodeList;DOMCore	im	DOMNode *	unsigned long
length	WK	Cl	DOMNodeList;DOMCore	im	unsigned long
getNamedItem:	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	NSString *
setNamedItem:	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	DOMNode *
removeNamedItem:	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	NSString *
item:	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	unsigned long
length	WK	Cl	DOMNamedNodeMap;DOMCore	im	unsigned long
getNamedItemNS::	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	NSString *	NSString *
setNamedItemNS:	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	DOMNode *
removeNamedItemNS::	WK	Cl	DOMNamedNodeMap;DOMCore	im	DOMNode *	NSString *	NSString *
data	WK	Cl	DOMCharacterData;DOMCore	im	NSString *
setData:	WK	Cl	DOMCharacterData;DOMCore	im	void	NSString *
length	WK	Cl	DOMCharacterData;DOMCore	im	unsigned long
substringData::	WK	Cl	DOMCharacterData;DOMCore	im	NSString *	unsigned long	unsigned long
appendData:	WK	Cl	DOMCharacterData;DOMCore	im	void	NSString *
insertData::	WK	Cl	DOMCharacterData;DOMCore	im	void	unsigned long	NSString *
deleteData::	WK	Cl	DOMCharacterData;DOMCore	im	void	unsigned long	unsigned long
replaceData:::	WK	Cl	DOMCharacterData;DOMCore	im	void	unsigned long	unsigned long	NSString *
name	WK	Cl	DOMAttr;DOMCore	im	NSString *
specified	WK	Cl	DOMAttr;DOMCore	im	BOOL
value	WK	Cl	DOMAttr;DOMCore	im	NSString *
setValue:	WK	Cl	DOMAttr;DOMCore	im	void	NSString *
ownerElement	WK	Cl	DOMAttr;DOMCore	im	DOMElement *
tagName	WK	Cl	DOMElement;DOMCore	im	NSString *
getAttribute:	WK	Cl	DOMElement;DOMCore	im	NSString *	NSString *
setAttribute::	WK	Cl	DOMElement;DOMCore	im	void	NSString *	NSString *
removeAttribute:	WK	Cl	DOMElement;DOMCore	im	void	NSString *
getAttributeNode:	WK	Cl	DOMElement;DOMCore	im	DOMAttr *	NSString *
setAttributeNode:	WK	Cl	DOMElement;DOMCore	im	DOMAttr *	DOMAttr *
removeAttributeNode:	WK	Cl	DOMElement;DOMCore	im	DOMAttr *	DOMAttr *
getElementsByTagName:	WK	Cl	DOMElement;DOMCore	im	DOMNodeList *	NSString *
getAttributeNS::	WK	Cl	DOMElement;DOMCore	im	NSString *	NSString *	NSString *
setAttributeNS:::	WK	Cl	DOMElement;DOMCore	im	void	NSString *	NSString *	NSString *
removeAttributeNS::	WK	Cl	DOMElement;DOMCore	im	void	NSString *	NSString *
getAttributeNodeNS::	WK	Cl	DOMElement;DOMCore	im	DOMAttr *	NSString *	NSString *
setAttributeNodeNS:	WK	Cl	DOMElement;DOMCore	im	DOMAttr *	DOMAttr *
getElementsByTagNameNS::	WK	Cl	DOMElement;DOMCore	im	DOMNodeList *	NSString *	NSString *
hasAttribute:	WK	Cl	DOMElement;DOMCore	im	BOOL	NSString *
hasAttributeNS::	WK	Cl	DOMElement;DOMCore	im	BOOL	NSString *	NSString *
splitText:	WK	Cl	DOMText;DOMCore	im	DOMText *	unsigned long
name	WK	Cl	DOMDocumentType;DOMCore	im	NSString *
entities	WK	Cl	DOMDocumentType;DOMCore	im	DOMNamedNodeMap *
notations	WK	Cl	DOMDocumentType;DOMCore	im	DOMNamedNodeMap *
publicId	WK	Cl	DOMDocumentType;DOMCore	im	NSString *
systemId	WK	Cl	DOMDocumentType;DOMCore	im	NSString *
internalSubset	WK	Cl	DOMDocumentType;DOMCore	im	NSString *
publicId	WK	Cl	DOMNotation;DOMCore	im	NSString *
systemId	WK	Cl	DOMNotation;DOMCore	im	NSString *
publicId	WK	Cl	DOMEntity;DOMCore	im	NSString *
systemId	WK	Cl	DOMEntity;DOMCore	im	NSString *
notationName	WK	Cl	DOMEntity;DOMCore	im	NSString *
target	WK	Cl	DOMProcessingInstruction;DOMCore	im	NSString *
data	WK	Cl	DOMProcessingInstruction;DOMCore	im	NSString *
setData:	WK	Cl	DOMProcessingInstruction;DOMCore	im	void	NSString *
doctype	WK	Cl	DOMDocument;DOMCore	im	DOMDocumentType *
implementation	WK	Cl	DOMDocument;DOMCore	im	DOMImplementation *
documentElement	WK	Cl	DOMDocument;DOMCore	im	DOMElement *
createElement:	WK	Cl	DOMDocument;DOMCore	im	DOMElement *	NSString *
createDocumentFragment	WK	Cl	DOMDocument;DOMCore	im	DOMDocumentFragment *
createTextNode:	WK	Cl	DOMDocument;DOMCore	im	DOMText *	NSString *
createComment:	WK	Cl	DOMDocument;DOMCore	im	DOMComment *	NSString *
createCDATASection:	WK	Cl	DOMDocument;DOMCore	im	DOMCDATASection *	NSString *
createProcessingInstruction::	WK	Cl	DOMDocument;DOMCore	im	DOMProcessingInstruction *	NSString *	NSString *
createAttribute:	WK	Cl	DOMDocument;DOMCore	im	DOMAttr *	NSString *
createEntityReference:	WK	Cl	DOMDocument;DOMCore	im	DOMEntityReference *	NSString *
getElementsByTagName:	WK	Cl	DOMDocument;DOMCore	im	DOMNodeList *	NSString *
importNode::	WK	Cl	DOMDocument;DOMCore	im	DOMNode *	DOMNode *	BOOL
createElementNS::	WK	Cl	DOMDocument;DOMCore	im	DOMElement *	NSString *	NSString *
createAttributeNS::	WK	Cl	DOMDocument;DOMCore	im	DOMAttr *	NSString *	NSString *
getElementsByTagNameNS::	WK	Cl	DOMDocument;DOMCore	im	DOMNodeList *	NSString *	NSString *
getElementById:	WK	Cl	DOMDocument;DOMCore	im	DOMElement *	NSString *
length	WK	Cl	DOMCSSRuleList;DOMCSS	im	unsigned long
item:	WK	Cl	DOMCSSRuleList;DOMCSS	im	DOMCSSRule *	unsigned long
type	WK	Cl	DOMCSSRule;DOMCSS	im	unsigned short
cssText	WK	Cl	DOMCSSRule;DOMCSS	im	NSString *
setCssText:	WK	Cl	DOMCSSRule;DOMCSS	im	void	NSString *
parentStyleSheet	WK	Cl	DOMCSSRule;DOMCSS	im	DOMCSSStyleSheet *
parentRule	WK	Cl	DOMCSSRule;DOMCSS	im	DOMCSSRule *
selectorText	WK	Cl	DOMCSSStyleRule;DOMCSS	im	NSString *
setSelectorText:	WK	Cl	DOMCSSStyleRule;DOMCSS	im	void	NSString *
style	WK	Cl	DOMCSSStyleRule;DOMCSS	im	DOMCSSStyleDeclaration *
media	WK	Cl	DOMCSSMediaRule;DOMCSS	im	DOMMediaList *
cssRules	WK	Cl	DOMCSSMediaRule;DOMCSS	im	DOMCSSRuleList *
insertRule::	WK	Cl	DOMCSSMediaRule;DOMCSS	im	unsigned long	NSString *	unsigned long
deleteRule:	WK	Cl	DOMCSSMediaRule;DOMCSS	im	void	unsigned long
style	WK	Cl	DOMCSSFontFaceRule;DOMCSS	im	DOMCSSStyleDeclaration *
selectorText	WK	Cl	DOMCSSPageRule;DOMCSS	im	NSString *
setSelectorText:	WK	Cl	DOMCSSPageRule;DOMCSS	im	void	NSString *
style	WK	Cl	DOMCSSPageRule;DOMCSS	im	DOMCSSStyleDeclaration *
media	WK	Cl	DOMCSSImportRule;DOMCSS	im	DOMMediaList *
href	WK	Cl	DOMCSSImportRule;DOMCSS	im	NSString *
styleSheet	WK	Cl	DOMCSSImportRule;DOMCSS	im	DOMCSSStyleSheet *
encoding	WK	Cl	DOMCSSCharsetRule;DOMCSS	im	NSString *
cssText	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCssText:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
getPropertyValue:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *	NSString *
getPropertyCSSValue:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	DOMCSSValue *	NSString *
removeProperty:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *	NSString *
getPropertyPriority:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *	NSString *
setProperty:::	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *	NSString *	NSString *
length	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	unsigned long
item:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *	unsigned long
parentRule	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	DOMCSSRule *
cssText	WK	Cl	DOMCSSValue;DOMCSS	im	NSString *
setCssText:	WK	Cl	DOMCSSValue;DOMCSS	im	void	NSString *
cssValueType	WK	Cl	DOMCSSValue;DOMCSS	im	unsigned short
primitiveType	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	unsigned short
setFloatValue::	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	void	unsigned short	float
getFloatValue:	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	float	unsigned short
setStringValue::	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	void	unsigned short	NSString *
getStringValue	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	NSString *
getCounterValue	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	DOMCounter *
getRectValue	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	DOMRect *
getRGBColorValue	WK	Cl	DOMCSSPrimitiveValue;DOMCSS	im	DOMRGBColor *
length	WK	Cl	DOMCSSValueList;DOMCSS	im	unsigned long
item:	WK	Cl	DOMCSSValueList;DOMCSS	im	DOMCSSValue *	unsigned long
red	WK	Cl	DOMRGBColor;DOMCSS	im	DOMCSSPrimitiveValue *
green	WK	Cl	DOMRGBColor;DOMCSS	im	DOMCSSPrimitiveValue *
blue	WK	Cl	DOMRGBColor;DOMCSS	im	DOMCSSPrimitiveValue *
top	WK	Cl	DOMRect;DOMCSS	im	DOMCSSPrimitiveValue *
right	WK	Cl	DOMRect;DOMCSS	im	DOMCSSPrimitiveValue *
bottom	WK	Cl	DOMRect;DOMCSS	im	DOMCSSPrimitiveValue *
left	WK	Cl	DOMRect;DOMCSS	im	DOMCSSPrimitiveValue *
identifier	WK	Cl	DOMCounter;DOMCSS	im	NSString *
listStyle	WK	Cl	DOMCounter;DOMCSS	im	NSString *
separator	WK	Cl	DOMCounter;DOMCSS	im	NSString *
style	WK	Cl	DOMElement;DOMCSS	im	DOMCSSStyleDeclaration *
azimuth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setAzimuth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
background	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBackground:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
backgroundAttachment	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBackgroundAttachment:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
backgroundColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBackgroundColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
backgroundImage	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBackgroundImage:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
backgroundPosition	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBackgroundPosition:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
backgroundRepeat	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBackgroundRepeat:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
border	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorder:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderCollapse	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderCollapse:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderSpacing	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderSpacing:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderTop	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderTop:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderRight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderRight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderBottom	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderBottom:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderLeft	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderLeft:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderTopColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderTopColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderRightColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderRightColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderBottomColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderBottomColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderLeftColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderLeftColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderTopStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderTopStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderRightStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderRightStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderBottomStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderBottomStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderLeftStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderLeftStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderTopWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderTopWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderRightWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderRightWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderBottomWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderBottomWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderLeftWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderLeftWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
borderWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBorderWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
bottom	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setBottom:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
captionSide	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCaptionSide:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
clear	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setClear:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
clip	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setClip:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
color	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
content	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setContent:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
counterIncrement	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCounterIncrement:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
counterReset	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCounterReset:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
cue	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCue:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
cueAfter	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCueAfter:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
cueBefore	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCueBefore:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
cursor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCursor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
direction	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setDirection:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
display	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setDisplay:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
elevation	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setElevation:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
emptyCells	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setEmptyCells:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
cssFloat	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setCssFloat:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
font	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFont:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontFamily	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontFamily:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontSize	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontSize:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontSizeAdjust	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontSizeAdjust:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontStretch	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontStretch:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontVariant	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontVariant:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
fontWeight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setFontWeight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
height	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setHeight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
left	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setLeft:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
letterSpacing	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setLetterSpacing:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
lineHeight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setLineHeight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
listStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setListStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
listStyleImage	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setListStyleImage:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
listStylePosition	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setListStylePosition:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
listStyleType	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setListStyleType:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
margin	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMargin:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
marginTop	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMarginTop:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
marginRight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMarginRight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
marginBottom	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMarginBottom:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
marginLeft	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMarginLeft:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
markerOffset	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMarkerOffset:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
marks	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMarks:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
maxHeight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMaxHeight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
maxWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMaxWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
minHeight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMinHeight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
minWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setMinWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
orphans	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setOrphans:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
outline	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setOutline:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
outlineColor	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setOutlineColor:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
outlineStyle	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setOutlineStyle:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
outlineWidth	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setOutlineWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
overflow	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setOverflow:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
padding	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPadding:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
paddingTop	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPaddingTop:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
paddingRight	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPaddingRight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
paddingBottom	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPaddingBottom:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
paddingLeft	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPaddingLeft:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
page	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPage:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pageBreakAfter	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPageBreakAfter:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pageBreakBefore	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPageBreakBefore:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pageBreakInside	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPageBreakInside:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pause	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPause:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pauseAfter	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPauseAfter:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pauseBefore	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPauseBefore:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pitch	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPitch:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
pitchRange	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPitchRange:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
playDuring	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPlayDuring:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
position	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setPosition:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
quotes	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setQuotes:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
richness	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setRichness:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
right	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setRight:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
size	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setSize:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
speak	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setSpeak:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
speakHeader	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setSpeakHeader:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
speakNumeral	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setSpeakNumeral:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
speakPunctuation	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setSpeakPunctuation:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
speechRate	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setSpeechRate:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
stress	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setStress:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
tableLayout	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTableLayout:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
textAlign	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTextAlign:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
textDecoration	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTextDecoration:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
textIndent	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTextIndent:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
textShadow	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTextShadow:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
textTransform	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTextTransform:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
top	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setTop:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
unicodeBidi	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setUnicodeBidi:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
verticalAlign	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setVerticalAlign:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
visibility	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setVisibility:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
voiceFamily	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setVoiceFamily:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
volume	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setVolume:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
whiteSpace	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setWhiteSpace:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
widows	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setWidows:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
width	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setWidth:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
wordSpacing	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setWordSpacing:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
zIndex	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	NSString *
setZIndex:	WK	Cl	DOMCSSStyleDeclaration;DOMCSS	im	void	NSString *
ownerRule	WK	Cl	DOMCSSStyleSheet;DOMCSS	im	DOMCSSRule *
cssRules	WK	Cl	DOMCSSStyleSheet;DOMCSS	im	DOMCSSRuleList *
insertRule::	WK	Cl	DOMCSSStyleSheet;DOMCSS	im	unsigned long	NSString *	unsigned long
deleteRule:	WK	Cl	DOMCSSStyleSheet;DOMCSS	im	void	unsigned long
getComputedStyle::	WK	Cl	DOMDocument;DOMCSS	im	DOMCSSStyleDeclaration *	DOMElement *	NSString *
getOverrideStyle::	WK	Cl	DOMDocument;DOMCSS	im	DOMCSSStyleDeclaration *	DOMElement *	NSString *
createCSSStyleSheet::	WK	Cl	DOMImplementation;DOMCSS	im	DOMCSSStyleSheet *	NSString *	NSString *
handleEvent:	WK	Pr	DOMEventListener;DOMEvents	im	void	DOMEvent *
addEventListener:::	WK	Pr	DOMEventTarget;DOMEvents	im	void	NSString *	id <DOMEventListener>	BOOL
removeEventListener:::	WK	Pr	DOMEventTarget;DOMEvents	im	void	NSString *	id <DOMEventListener>	BOOL
dispatchEvent:	WK	Pr	DOMEventTarget;DOMEvents	im	BOOL	DOMEvent *
type	WK	Cl	DOMEvent;DOMEvents	im	NSString *
target	WK	Cl	DOMEvent;DOMEvents	im	id <DOMEventTarget>
currentTarget	WK	Cl	DOMEvent;DOMEvents	im	id <DOMEventTarget>
eventPhase	WK	Cl	DOMEvent;DOMEvents	im	unsigned short
bubbles	WK	Cl	DOMEvent;DOMEvents	im	BOOL
cancelable	WK	Cl	DOMEvent;DOMEvents	im	BOOL
timeStamp	WK	Cl	DOMEvent;DOMEvents	im	DOMTimeStamp
stopPropagation	WK	Cl	DOMEvent;DOMEvents	im	void
preventDefault	WK	Cl	DOMEvent;DOMEvents	im	void
initEvent:::	WK	Cl	DOMEvent;DOMEvents	im	void	NSString *	BOOL	BOOL
createEvent:	WK	Cl	DOMDocument;DOMEvents	im	DOMEvent *	NSString *
view	WK	Cl	DOMUIEvent;DOMEvents	im	DOMAbstractView *
detail	WK	Cl	DOMUIEvent;DOMEvents	im	long
initUIEvent:::::	WK	Cl	DOMUIEvent;DOMEvents	im	void	NSString *	BOOL	BOOL	DOMAbstractView *	long
screenX	WK	Cl	DOMMouseEvent;DOMEvents	im	long
screenY	WK	Cl	DOMMouseEvent;DOMEvents	im	long
clientX	WK	Cl	DOMMouseEvent;DOMEvents	im	long
clientY	WK	Cl	DOMMouseEvent;DOMEvents	im	long
ctrlKey	WK	Cl	DOMMouseEvent;DOMEvents	im	BOOL
shiftKey	WK	Cl	DOMMouseEvent;DOMEvents	im	BOOL
altKey	WK	Cl	DOMMouseEvent;DOMEvents	im	BOOL
metaKey	WK	Cl	DOMMouseEvent;DOMEvents	im	BOOL
button	WK	Cl	DOMMouseEvent;DOMEvents	im	unsigned short
relatedTarget	WK	Cl	DOMMouseEvent;DOMEvents	im	id <DOMEventTarget>
initMouseEvent:::::::::::::::	WK	Cl	DOMMouseEvent;DOMEvents	im	void	NSString *	BOOL	BOOL	DOMAbstractView *	long	long	long	long	long	BOOL	BOOL	BOOL	BOOL	unsigned short	id <DOMEventTarget>
relatedNode	WK	Cl	DOMMutationEvent;DOMEvents	im	DOMNode *
prevValue	WK	Cl	DOMMutationEvent;DOMEvents	im	NSString *
newValue	WK	Cl	DOMMutationEvent;DOMEvents	im	NSString *
attrName	WK	Cl	DOMMutationEvent;DOMEvents	im	NSString *
attrChange	WK	Cl	DOMMutationEvent;DOMEvents	im	unsigned short
initMutationEvent::::::::	WK	Cl	DOMMutationEvent;DOMEvents	im	void	NSString *	BOOL	BOOL	DOMNode *	NSString *	NSString *	NSString *	unsigned short
createCSSStyleDeclaration	WK	Cl	DOMDocument;DOMExtensions	im	DOMCSSStyleDeclaration *
innerHTML	WK	Cl	DOMHTMLElement;DOMExtensions	im	NSString *
setInnerHTML:	WK	Cl	DOMHTMLElement;DOMExtensions	im	void	NSString *
innerText	WK	Cl	DOMHTMLElement;DOMExtensions	im	NSString *
setInnerText:	WK	Cl	DOMHTMLElement;DOMExtensions	im	void	NSString *
outerHTML	WK	Cl	DOMHTMLElement;DOMExtensions	im	NSString *
setOuterHTML:	WK	Cl	DOMHTMLElement;DOMExtensions	im	void	NSString *
outerText	WK	Cl	DOMHTMLElement;DOMExtensions	im	NSString *
setOuterText:	WK	Cl	DOMHTMLElement;DOMExtensions	im	void	NSString *
children	WK	Cl	DOMHTMLElement;DOMExtensions	im	DOMHTMLCollection *
contentEditable	WK	Cl	DOMHTMLElement;DOMExtensions	im	NSString *
setContentEditable:	WK	Cl	DOMHTMLElement;DOMExtensions	im	void	NSString *
isContentEditable	WK	Cl	DOMHTMLElement;DOMExtensions	im	BOOL
align	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	NSString *
setAlign:	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	void	NSString *
height	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	long
setHeight:	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	void	long
name	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	NSString *
setName:	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	void	NSString *
src	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	NSString *
setSrc:	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	void	NSString *
type	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	NSString *
setType:	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	void	NSString *
width	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	long
setWidth:	WK	Cl	DOMHTMLEmbedElement;DOMExtensions	im	void	long
alpha	WK	Cl	DOMRGBColor;DOMExtensions	im	DOMCSSPrimitiveValue *
length	WK	Cl	DOMHTMLCollection;DOMHTML	im	unsigned long
item:	WK	Cl	DOMHTMLCollection;DOMHTML	im	DOMNode *	unsigned long
namedItem:	WK	Cl	DOMHTMLCollection;DOMHTML	im	DOMNode *	NSString *
length	WK	Cl	DOMHTMLOptionsCollection;DOMHTML	im	unsigned long
setLength:	WK	Cl	DOMHTMLOptionsCollection;DOMHTML	im	void	unsigned long
item:	WK	Cl	DOMHTMLOptionsCollection;DOMHTML	im	DOMNode *	unsigned long
namedItem:	WK	Cl	DOMHTMLOptionsCollection;DOMHTML	im	DOMNode *	NSString *
title	WK	Cl	DOMHTMLDocument;DOMHTML	im	NSString *
setTitle:	WK	Cl	DOMHTMLDocument;DOMHTML	im	void	NSString *
referrer	WK	Cl	DOMHTMLDocument;DOMHTML	im	NSString *
domain	WK	Cl	DOMHTMLDocument;DOMHTML	im	NSString *
URL	WK	Cl	DOMHTMLDocument;DOMHTML	im	NSString *
body	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMHTMLElement *
setBody:	WK	Cl	DOMHTMLDocument;DOMHTML	im	void	DOMHTMLElement *
images	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMHTMLCollection *
applets	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMHTMLCollection *
links	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMHTMLCollection *
forms	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMHTMLCollection *
anchors	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMHTMLCollection *
cookie	WK	Cl	DOMHTMLDocument;DOMHTML	im	NSString *
setCookie:	WK	Cl	DOMHTMLDocument;DOMHTML	im	void	NSString *
open	WK	Cl	DOMHTMLDocument;DOMHTML	im	void
close	WK	Cl	DOMHTMLDocument;DOMHTML	im	void
write:	WK	Cl	DOMHTMLDocument;DOMHTML	im	void	NSString *
writeln:	WK	Cl	DOMHTMLDocument;DOMHTML	im	void	NSString *
getElementById:	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMElement *	NSString *
getElementsByName:	WK	Cl	DOMHTMLDocument;DOMHTML	im	DOMNodeList *	NSString *
idName	WK	Cl	DOMHTMLElement;DOMHTML	im	NSString *
setIdName:	WK	Cl	DOMHTMLElement;DOMHTML	im	void	NSString *
title	WK	Cl	DOMHTMLElement;DOMHTML	im	NSString *
setTitle:	WK	Cl	DOMHTMLElement;DOMHTML	im	void	NSString *
lang	WK	Cl	DOMHTMLElement;DOMHTML	im	NSString *
setLang:	WK	Cl	DOMHTMLElement;DOMHTML	im	void	NSString *
dir	WK	Cl	DOMHTMLElement;DOMHTML	im	NSString *
setDir:	WK	Cl	DOMHTMLElement;DOMHTML	im	void	NSString *
className	WK	Cl	DOMHTMLElement;DOMHTML	im	NSString *
setClassName:	WK	Cl	DOMHTMLElement;DOMHTML	im	void	NSString *
version	WK	Cl	DOMHTMLHtmlElement;DOMHTML	im	NSString *
setVersion:	WK	Cl	DOMHTMLHtmlElement;DOMHTML	im	void	NSString *
profile	WK	Cl	DOMHTMLHeadElement;DOMHTML	im	NSString *
setProfile:	WK	Cl	DOMHTMLHeadElement;DOMHTML	im	void	NSString *
disabled	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	BOOL
charset	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setCharset:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
href	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setHref:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
hreflang	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setHreflang:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
media	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setMedia:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
rel	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setRel:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
rev	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setRev:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
target	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setTarget:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
type	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLLinkElement;DOMHTML	im	void	NSString *
text	WK	Cl	DOMHTMLTitleElement;DOMHTML	im	NSString *
setText:	WK	Cl	DOMHTMLTitleElement;DOMHTML	im	void	NSString *
content	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	NSString *
setContent:	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	void	NSString *
httpEquiv	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	NSString *
setHttpEquiv:	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	void	NSString *
name	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	void	NSString *
scheme	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	NSString *
setScheme:	WK	Cl	DOMHTMLMetaElement;DOMHTML	im	void	NSString *
href	WK	Cl	DOMHTMLBaseElement;DOMHTML	im	NSString *
setHref:	WK	Cl	DOMHTMLBaseElement;DOMHTML	im	void	NSString *
target	WK	Cl	DOMHTMLBaseElement;DOMHTML	im	NSString *
setTarget:	WK	Cl	DOMHTMLBaseElement;DOMHTML	im	void	NSString *
form	WK	Cl	DOMHTMLIsIndexElement;DOMHTML	im	DOMHTMLFormElement *
prompt	WK	Cl	DOMHTMLIsIndexElement;DOMHTML	im	NSString *
setPrompt:	WK	Cl	DOMHTMLIsIndexElement;DOMHTML	im	void	NSString *
disabled	WK	Cl	DOMHTMLStyleElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLStyleElement;DOMHTML	im	void	BOOL
media	WK	Cl	DOMHTMLStyleElement;DOMHTML	im	NSString *
setMedia:	WK	Cl	DOMHTMLStyleElement;DOMHTML	im	void	NSString *
type	WK	Cl	DOMHTMLStyleElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLStyleElement;DOMHTML	im	void	NSString *
aLink	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	NSString *
setALink:	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	void	NSString *
background	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	NSString *
setBackground:	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	void	NSString *
bgColor	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	NSString *
setBgColor:	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	void	NSString *
link	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	NSString *
setLink:	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	void	NSString *
text	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	NSString *
setText:	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	void	NSString *
vLink	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	NSString *
setVLink:	WK	Cl	DOMHTMLBodyElement;DOMHTML	im	void	NSString *
elements	WK	Cl	DOMHTMLFormElement;DOMHTML	im	DOMHTMLCollection *
length	WK	Cl	DOMHTMLFormElement;DOMHTML	im	long
name	WK	Cl	DOMHTMLFormElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void	NSString *
acceptCharset	WK	Cl	DOMHTMLFormElement;DOMHTML	im	NSString *
setAcceptCharset:	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void	NSString *
action	WK	Cl	DOMHTMLFormElement;DOMHTML	im	NSString *
setAction:	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void	NSString *
enctype	WK	Cl	DOMHTMLFormElement;DOMHTML	im	NSString *
setEnctype:	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void	NSString *
method	WK	Cl	DOMHTMLFormElement;DOMHTML	im	NSString *
setMethod:	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void	NSString *
target	WK	Cl	DOMHTMLFormElement;DOMHTML	im	NSString *
setTarget:	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void	NSString *
submit	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void
reset	WK	Cl	DOMHTMLFormElement;DOMHTML	im	void
type	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	NSString *
selectedIndex	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	long
setSelectedIndex:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	long
value	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	NSString *
setValue:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	NSString *
length	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	long
form	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	DOMHTMLFormElement *
options	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	DOMHTMLOptionsCollection *
disabled	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	BOOL
multiple	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	BOOL
setMultiple:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	BOOL
name	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	NSString *
size	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	long
setSize:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	long
tabIndex	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	long
add::	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	DOMHTMLElement *	DOMHTMLElement *
remove:	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void	long
blur	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void
focus	WK	Cl	DOMHTMLSelectElement;DOMHTML	im	void
disabled	WK	Cl	DOMHTMLOptGroupElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLOptGroupElement;DOMHTML	im	void	BOOL
label	WK	Cl	DOMHTMLOptGroupElement;DOMHTML	im	NSString *
setLabel:	WK	Cl	DOMHTMLOptGroupElement;DOMHTML	im	void	NSString *
form	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	DOMHTMLFormElement *
defaultSelected	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	BOOL
setDefaultSelected:	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	void	BOOL
text	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	NSString *
index	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	long
disabled	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	void	BOOL
label	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	NSString *
setLabel:	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	void	NSString *
selected	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	BOOL
setSelected:	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	void	BOOL
value	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	NSString *
setValue:	WK	Cl	DOMHTMLOptionElement;DOMHTML	im	void	NSString *
defaultValue	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setDefaultValue:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
defaultChecked	WK	Cl	DOMHTMLInputElement;DOMHTML	im	BOOL
setDefaultChecked:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	BOOL
form	WK	Cl	DOMHTMLInputElement;DOMHTML	im	DOMHTMLFormElement *
accept	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setAccept:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
accessKey	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
alt	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setAlt:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
checked	WK	Cl	DOMHTMLInputElement;DOMHTML	im	BOOL
setChecked:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	BOOL
disabled	WK	Cl	DOMHTMLInputElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	BOOL
maxLength	WK	Cl	DOMHTMLInputElement;DOMHTML	im	long
setMaxLength:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	long
name	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
readOnly	WK	Cl	DOMHTMLInputElement;DOMHTML	im	BOOL
setReadOnly:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	BOOL
size	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setSize:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
src	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setSrc:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
tabIndex	WK	Cl	DOMHTMLInputElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	long
type	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
useMap	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setUseMap:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
value	WK	Cl	DOMHTMLInputElement;DOMHTML	im	NSString *
setValue:	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void	NSString *
blur	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void
focus	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void
select	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void
click	WK	Cl	DOMHTMLInputElement;DOMHTML	im	void
defaultValue	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	NSString *
setDefaultValue:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	NSString *
form	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	DOMHTMLFormElement *
accessKey	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	NSString *
cols	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	long
setCols:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	long
disabled	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	BOOL
name	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	NSString *
readOnly	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	BOOL
setReadOnly:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	BOOL
rows	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	long
setRows:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	long
tabIndex	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	long
type	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	NSString *
value	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	NSString *
setValue:	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void	NSString *
blur	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void
focus	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void
select	WK	Cl	DOMHTMLTextAreaElement;DOMHTML	im	void
form	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	DOMHTMLFormElement *
accessKey	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	void	NSString *
disabled	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	BOOL
setDisabled:	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	void	BOOL
name	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	void	NSString *
tabIndex	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	void	long
type	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	NSString *
value	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	NSString *
setValue:	WK	Cl	DOMHTMLButtonElement;DOMHTML	im	void	NSString *
form	WK	Cl	DOMHTMLLabelElement;DOMHTML	im	DOMHTMLFormElement *
accessKey	WK	Cl	DOMHTMLLabelElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLLabelElement;DOMHTML	im	void	NSString *
htmlFor	WK	Cl	DOMHTMLLabelElement;DOMHTML	im	NSString *
setHtmlFor:	WK	Cl	DOMHTMLLabelElement;DOMHTML	im	void	NSString *
form	WK	Cl	DOMHTMLFieldSetElement;DOMHTML	im	DOMHTMLFormElement *
form	WK	Cl	DOMHTMLLegendElement;DOMHTML	im	DOMHTMLFormElement *
accessKey	WK	Cl	DOMHTMLLegendElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLLegendElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLLegendElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLLegendElement;DOMHTML	im	void	NSString *
compact	WK	Cl	DOMHTMLUListElement;DOMHTML	im	BOOL
setCompact:	WK	Cl	DOMHTMLUListElement;DOMHTML	im	void	BOOL
type	WK	Cl	DOMHTMLUListElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLUListElement;DOMHTML	im	void	NSString *
compact	WK	Cl	DOMHTMLOListElement;DOMHTML	im	BOOL
setCompact:	WK	Cl	DOMHTMLOListElement;DOMHTML	im	void	BOOL
start	WK	Cl	DOMHTMLOListElement;DOMHTML	im	long
setStart:	WK	Cl	DOMHTMLOListElement;DOMHTML	im	void	long
type	WK	Cl	DOMHTMLOListElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLOListElement;DOMHTML	im	void	NSString *
compact	WK	Cl	DOMHTMLDListElement;DOMHTML	im	BOOL
setCompact:	WK	Cl	DOMHTMLDListElement;DOMHTML	im	void	BOOL
compact	WK	Cl	DOMHTMLDirectoryElement;DOMHTML	im	BOOL
setCompact:	WK	Cl	DOMHTMLDirectoryElement;DOMHTML	im	void	BOOL
compact	WK	Cl	DOMHTMLMenuElement;DOMHTML	im	BOOL
setCompact:	WK	Cl	DOMHTMLMenuElement;DOMHTML	im	void	BOOL
type	WK	Cl	DOMHTMLLIElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLLIElement;DOMHTML	im	void	NSString *
value	WK	Cl	DOMHTMLLIElement;DOMHTML	im	long
setValue:	WK	Cl	DOMHTMLLIElement;DOMHTML	im	void	long
align	WK	Cl	DOMHTMLDivElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLDivElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLParagraphElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLParagraphElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLHeadingElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLHeadingElement;DOMHTML	im	void	NSString *
cite	WK	Cl	DOMHTMLQuoteElement;DOMHTML	im	NSString *
setCite:	WK	Cl	DOMHTMLQuoteElement;DOMHTML	im	void	NSString *
width	WK	Cl	DOMHTMLPreElement;DOMHTML	im	long
setWidth:	WK	Cl	DOMHTMLPreElement;DOMHTML	im	void	long
clear	WK	Cl	DOMHTMLBRElement;DOMHTML	im	NSString *
setClear:	WK	Cl	DOMHTMLBRElement;DOMHTML	im	void	NSString *
color	WK	Cl	DOMHTMLBaseFontElement;DOMHTML	im	NSString *
setColor:	WK	Cl	DOMHTMLBaseFontElement;DOMHTML	im	void	NSString *
face	WK	Cl	DOMHTMLBaseFontElement;DOMHTML	im	NSString *
setFace:	WK	Cl	DOMHTMLBaseFontElement;DOMHTML	im	void	NSString *
size	WK	Cl	DOMHTMLBaseFontElement;DOMHTML	im	NSString *
setSize:	WK	Cl	DOMHTMLBaseFontElement;DOMHTML	im	void	NSString *
color	WK	Cl	DOMHTMLFontElement;DOMHTML	im	NSString *
setColor:	WK	Cl	DOMHTMLFontElement;DOMHTML	im	void	NSString *
face	WK	Cl	DOMHTMLFontElement;DOMHTML	im	NSString *
setFace:	WK	Cl	DOMHTMLFontElement;DOMHTML	im	void	NSString *
size	WK	Cl	DOMHTMLFontElement;DOMHTML	im	NSString *
setSize:	WK	Cl	DOMHTMLFontElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLHRElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLHRElement;DOMHTML	im	void	NSString *
noShade	WK	Cl	DOMHTMLHRElement;DOMHTML	im	BOOL
setNoShade:	WK	Cl	DOMHTMLHRElement;DOMHTML	im	void	BOOL
size	WK	Cl	DOMHTMLHRElement;DOMHTML	im	NSString *
setSize:	WK	Cl	DOMHTMLHRElement;DOMHTML	im	void	NSString *
width	WK	Cl	DOMHTMLHRElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLHRElement;DOMHTML	im	void	NSString *
cite	WK	Cl	DOMHTMLModElement;DOMHTML	im	NSString *
setCite:	WK	Cl	DOMHTMLModElement;DOMHTML	im	void	NSString *
dateTime	WK	Cl	DOMHTMLModElement;DOMHTML	im	NSString *
setDateTime:	WK	Cl	DOMHTMLModElement;DOMHTML	im	void	NSString *
accessKey	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
charset	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setCharset:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
coords	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setCoords:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
href	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setHref:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
hreflang	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setHreflang:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
name	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
rel	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setRel:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
rev	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setRev:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
shape	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setShape:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
tabIndex	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	long
target	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setTarget:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
type	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void	NSString *
blur	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void
focus	WK	Cl	DOMHTMLAnchorElement;DOMHTML	im	void
name	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
alt	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setAlt:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
border	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setBorder:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
height	WK	Cl	DOMHTMLImageElement;DOMHTML	im	long
setHeight:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	long
hspace	WK	Cl	DOMHTMLImageElement;DOMHTML	im	long
setHspace:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	long
isMap	WK	Cl	DOMHTMLImageElement;DOMHTML	im	BOOL
setIsMap:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	BOOL
longDesc	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setLongDesc:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
src	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setSrc:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
useMap	WK	Cl	DOMHTMLImageElement;DOMHTML	im	NSString *
setUseMap:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	NSString *
vspace	WK	Cl	DOMHTMLImageElement;DOMHTML	im	long
setVspace:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	long
width	WK	Cl	DOMHTMLImageElement;DOMHTML	im	long
setWidth:	WK	Cl	DOMHTMLImageElement;DOMHTML	im	void	long
form	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	DOMHTMLFormElement *
code	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setCode:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
archive	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setArchive:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
border	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setBorder:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
codeBase	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setCodeBase:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
codeType	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setCodeType:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
data	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setData:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
declare	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	BOOL
setDeclare:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	BOOL
height	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setHeight:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
hspace	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	long
setHspace:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	long
name	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
standby	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setStandby:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
tabIndex	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	long
type	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
useMap	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setUseMap:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
vspace	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	long
setVspace:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	long
width	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	void	NSString *
contentDocument	WK	Cl	DOMHTMLObjectElement;DOMHTML	im	DOMDocument *
name	WK	Cl	DOMHTMLParamElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLParamElement;DOMHTML	im	void	NSString *
type	WK	Cl	DOMHTMLParamElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLParamElement;DOMHTML	im	void	NSString *
value	WK	Cl	DOMHTMLParamElement;DOMHTML	im	NSString *
setValue:	WK	Cl	DOMHTMLParamElement;DOMHTML	im	void	NSString *
valueType	WK	Cl	DOMHTMLParamElement;DOMHTML	im	NSString *
setValueType:	WK	Cl	DOMHTMLParamElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
alt	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setAlt:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
archive	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setArchive:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
code	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setCode:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
codeBase	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setCodeBase:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
height	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setHeight:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
hspace	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	long
setHspace:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	long
name	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
object	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setObject:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
vspace	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	long
setVspace:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	long
width	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLAppletElement;DOMHTML	im	void	NSString *
areas	WK	Cl	DOMHTMLMapElement;DOMHTML	im	DOMHTMLCollection *
name	WK	Cl	DOMHTMLMapElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLMapElement;DOMHTML	im	void	NSString *
accessKey	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	NSString *
setAccessKey:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	NSString *
alt	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	NSString *
setAlt:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	NSString *
coords	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	NSString *
setCoords:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	NSString *
href	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	NSString *
setHref:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	NSString *
noHref	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	BOOL
setNoHref:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	BOOL
shape	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	NSString *
setShape:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	NSString *
tabIndex	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	long
setTabIndex:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	long
target	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	NSString *
setTarget:	WK	Cl	DOMHTMLAreaElement;DOMHTML	im	void	NSString *
text	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	NSString *
setText:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	NSString *
htmlFor	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	NSString *
setHtmlFor:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	NSString *
event	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	NSString *
setEvent:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	NSString *
charset	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	NSString *
setCharset:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	NSString *
defer	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	BOOL
setDefer:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	BOOL
src	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	NSString *
setSrc:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	NSString *
type	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	NSString *
setType:	WK	Cl	DOMHTMLScriptElement;DOMHTML	im	void	NSString *
caption	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLTableCaptionElement *
setCaption:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	DOMHTMLTableCaptionElement *
tHead	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLTableSectionElement *
setTHead:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	DOMHTMLTableSectionElement *
tFoot	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLTableSectionElement *
setTFoot:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	DOMHTMLTableSectionElement *
rows	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLCollection *
tBodies	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLCollection *
align	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
bgColor	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setBgColor:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
border	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setBorder:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
cellPadding	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setCellPadding:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
cellSpacing	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setCellSpacing:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
frameBorders	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setFrameBorders:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
rules	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setRules:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
summary	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setSummary:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
width	WK	Cl	DOMHTMLTableElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	NSString *
createTHead	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLElement *
deleteTHead	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void
createTFoot	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLElement *
deleteTFoot	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void
createCaption	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLElement *
deleteCaption	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void
insertRow:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	DOMHTMLElement *	long
deleteRow:	WK	Cl	DOMHTMLTableElement;DOMHTML	im	void	long
align	WK	Cl	DOMHTMLTableCaptionElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLTableCaptionElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	void	NSString *
ch	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	NSString *
setCh:	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	void	NSString *
chOff	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	NSString *
setChOff:	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	void	NSString *
span	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	long
setSpan:	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	void	long
vAlign	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	NSString *
setVAlign:	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	void	NSString *
width	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLTableColElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	void	NSString *
ch	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	NSString *
setCh:	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	void	NSString *
chOff	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	NSString *
setChOff:	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	void	NSString *
vAlign	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	NSString *
setVAlign:	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	void	NSString *
rows	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	DOMHTMLCollection *
insertRow:	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	DOMHTMLElement *	long
deleteRow:	WK	Cl	DOMHTMLTableSectionElement;DOMHTML	im	void	long
rowIndex	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	long
sectionRowIndex	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	long
cells	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	DOMHTMLCollection *
align	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	void	NSString *
bgColor	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	NSString *
setBgColor:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	void	NSString *
ch	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	NSString *
setCh:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	void	NSString *
chOff	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	NSString *
setChOff:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	void	NSString *
vAlign	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	NSString *
setVAlign:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	void	NSString *
insertCell:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	DOMHTMLElement *	long
deleteCell:	WK	Cl	DOMHTMLTableRowElement;DOMHTML	im	void	long
cellIndex	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	long
abbr	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setAbbr:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
align	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
axis	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setAxis:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
bgColor	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setBgColor:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
ch	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setCh:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
chOff	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setChOff:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
colSpan	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	long
setColSpan:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	long
headers	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setHeaders:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
height	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setHeight:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
noWrap	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	BOOL
setNoWrap:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	BOOL
rowSpan	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	long
setRowSpan:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	long
scope	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setScope:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
vAlign	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setVAlign:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
width	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLTableCellElement;DOMHTML	im	void	NSString *
cols	WK	Cl	DOMHTMLFrameSetElement;DOMHTML	im	NSString *
setCols:	WK	Cl	DOMHTMLFrameSetElement;DOMHTML	im	void	NSString *
rows	WK	Cl	DOMHTMLFrameSetElement;DOMHTML	im	NSString *
setRows:	WK	Cl	DOMHTMLFrameSetElement;DOMHTML	im	void	NSString *
frameBorder	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setFrameBorder:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
longDesc	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setLongDesc:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
marginHeight	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setMarginHeight:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
marginWidth	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setMarginWidth:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
name	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
noResize	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	BOOL
setNoResize:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	BOOL
scrolling	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setScrolling:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
src	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	NSString *
setSrc:	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	void	NSString *
contentDocument	WK	Cl	DOMHTMLFrameElement;DOMHTML	im	DOMDocument *
align	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setAlign:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
frameBorder	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setFrameBorder:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
height	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setHeight:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
longDesc	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setLongDesc:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
marginHeight	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setMarginHeight:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
marginWidth	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setMarginWidth:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
name	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setName:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
scrolling	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setScrolling:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
src	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setSrc:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
width	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	NSString *
setWidth:	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	void	NSString *
contentDocument	WK	Cl	DOMHTMLIFrameElement;DOMHTML	im	DOMDocument *
startContainer	WK	Cl	DOMRange	im	DOMNode *
startOffset	WK	Cl	DOMRange	im	long
endContainer	WK	Cl	DOMRange	im	DOMNode *
endOffset	WK	Cl	DOMRange	im	long
collapsed	WK	Cl	DOMRange	im	BOOL
commonAncestorContainer	WK	Cl	DOMRange	im	DOMNode *
setStart::	WK	Cl	DOMRange	im	void	DOMNode *	long
setEnd::	WK	Cl	DOMRange	im	void	DOMNode *	long
setStartBefore:	WK	Cl	DOMRange	im	void	DOMNode *
setStartAfter:	WK	Cl	DOMRange	im	void	DOMNode *
setEndBefore:	WK	Cl	DOMRange	im	void	DOMNode *
setEndAfter:	WK	Cl	DOMRange	im	void	DOMNode *
collapse:	WK	Cl	DOMRange	im	void	BOOL
selectNode:	WK	Cl	DOMRange	im	void	DOMNode *
selectNodeContents:	WK	Cl	DOMRange	im	void	DOMNode *
compareBoundaryPoints::	WK	Cl	DOMRange	im	short	unsigned short	DOMRange *
deleteContents	WK	Cl	DOMRange	im	void
extractContents	WK	Cl	DOMRange	im	DOMDocumentFragment *
cloneContents	WK	Cl	DOMRange	im	DOMDocumentFragment *
insertNode:	WK	Cl	DOMRange	im	void	DOMNode *
surroundContents:	WK	Cl	DOMRange	im	void	DOMNode *
cloneRange	WK	Cl	DOMRange	im	DOMRange *
toString	WK	Cl	DOMRange	im	NSString *
detach	WK	Cl	DOMRange	im	void
createRange	WK	Cl	DOMDocument;DOMRange	im	DOMRange *
type	WK	Cl	DOMStyleSheet;DOMStylesheets	im	NSString *
disabled	WK	Cl	DOMStyleSheet;DOMStylesheets	im	BOOL
setDisabled:	WK	Cl	DOMStyleSheet;DOMStylesheets	im	void	BOOL
ownerNode	WK	Cl	DOMStyleSheet;DOMStylesheets	im	DOMNode *
parentStyleSheet	WK	Cl	DOMStyleSheet;DOMStylesheets	im	DOMStyleSheet *
href	WK	Cl	DOMStyleSheet;DOMStylesheets	im	NSString *
title	WK	Cl	DOMStyleSheet;DOMStylesheets	im	NSString *
media	WK	Cl	DOMStyleSheet;DOMStylesheets	im	DOMMediaList *
length	WK	Cl	DOMStyleSheetList;DOMStylesheets	im	unsigned long
item:	WK	Cl	DOMStyleSheetList;DOMStylesheets	im	DOMStyleSheet *	unsigned long
mediaText	WK	Cl	DOMMediaList;DOMStylesheets	im	NSString *
setMediaText:	WK	Cl	DOMMediaList;DOMStylesheets	im	void	NSString *
length	WK	Cl	DOMMediaList;DOMStylesheets	im	unsigned long
item:	WK	Cl	DOMMediaList;DOMStylesheets	im	NSString *	unsigned long
deleteMedium:	WK	Cl	DOMMediaList;DOMStylesheets	im	void	NSString *
appendMedium:	WK	Cl	DOMMediaList;DOMStylesheets	im	void	NSString *
sheet	WK	Cl	DOMObject;DOMStylesheets	im	DOMStyleSheet *
styleSheets	WK	Cl	DOMDocument;DOMStylesheets	im	DOMStyleSheetList *
acceptNode:	WK	Pr	DOMNodeFilter;DOMTraversal	im	short	DOMNode *
root	WK	Cl	DOMNodeIterator;DOMTraversal	im	DOMNode *
whatToShow	WK	Cl	DOMNodeIterator;DOMTraversal	im	unsigned long
filter	WK	Cl	DOMNodeIterator;DOMTraversal	im	id <DOMNodeFilter>
expandEntityReferences	WK	Cl	DOMNodeIterator;DOMTraversal	im	BOOL
nextNode	WK	Cl	DOMNodeIterator;DOMTraversal	im	DOMNode *
previousNode	WK	Cl	DOMNodeIterator;DOMTraversal	im	DOMNode *
detach	WK	Cl	DOMNodeIterator;DOMTraversal	im	void
root	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
whatToShow	WK	Cl	DOMTreeWalker;DOMTraversal	im	unsigned long
filter	WK	Cl	DOMTreeWalker;DOMTraversal	im	id <DOMNodeFilter>
expandEntityReferences	WK	Cl	DOMTreeWalker;DOMTraversal	im	BOOL
currentNode	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
setCurrentNode:	WK	Cl	DOMTreeWalker;DOMTraversal	im	void	DOMNode *
parentNode	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
firstChild	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
lastChild	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
previousSibling	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
nextSibling	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
previousNode	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
nextNode	WK	Cl	DOMTreeWalker;DOMTraversal	im	DOMNode *
createNodeIterator::::	WK	Cl	DOMDocument;DOMTraversal	im	DOMNodeIterator *	DOMNode *	unsigned long	id <DOMNodeFilter>	BOOL
createTreeWalker::::	WK	Cl	DOMDocument;DOMTraversal	im	DOMTreeWalker *	DOMNode *	unsigned long	id <DOMNodeFilter>	BOOL
document	WK	Cl	DOMAbstractView;DOMViews	im	DOMDocument *
defaultView	WK	Cl	DOMDocument;DOMViews	im	DOMAbstractView *
initWithMainResource:subresources:subframeArchives:	WK	Cl	WebArchive	im	id	WebResource *	NSArray *	NSArray *
initWithData:	WK	Cl	WebArchive	im	id	NSData *
mainResource	WK	Cl	WebArchive	im	WebResource *
subresources	WK	Cl	WebArchive	im	NSArray *
subframeArchives	WK	Cl	WebArchive	im	NSArray *
data	WK	Cl	WebArchive	im	NSData *
addItem:	WK	Cl	WebBackForwardList	im	void	WebHistoryItem *
goBack	WK	Cl	WebBackForwardList	im	void
goForward	WK	Cl	WebBackForwardList	im	void
goToItem:	WK	Cl	WebBackForwardList	im	void	WebHistoryItem *
backItem	WK	Cl	WebBackForwardList	im	WebHistoryItem *
currentItem	WK	Cl	WebBackForwardList	im	WebHistoryItem *
forwardItem	WK	Cl	WebBackForwardList	im	WebHistoryItem *
backListWithLimit:	WK	Cl	WebBackForwardList	im	NSArray *	int
forwardListWithLimit:	WK	Cl	WebBackForwardList	im	NSArray *	int
capacity	WK	Cl	WebBackForwardList	im	int
setCapacity:	WK	Cl	WebBackForwardList	im	void	int
backListCount	WK	Cl	WebBackForwardList	im	int
forwardListCount	WK	Cl	WebBackForwardList	im	int
containsItem:	WK	Cl	WebBackForwardList	im	BOOL	WebHistoryItem *
itemAtIndex:	WK	Cl	WebBackForwardList	im	WebHistoryItem *	int
setPageCacheSize:	WK	Cl	WebBackForwardList	im	void	unsigned
pageCacheSize	WK	Cl	WebBackForwardList	im	unsigned
initWithRequest:	WK	Cl	WebDataSource	im	id	NSURLRequest *
data	WK	Cl	WebDataSource	im	NSData *
representation	WK	Cl	WebDataSource	im	id <WebDocumentRepresentation>
webFrame	WK	Cl	WebDataSource	im	WebFrame *
initialRequest	WK	Cl	WebDataSource	im	NSURLRequest *
request	WK	Cl	WebDataSource	im	NSMutableURLRequest *
response	WK	Cl	WebDataSource	im	NSURLResponse *
textEncodingName	WK	Cl	WebDataSource	im	NSString *
isLoading	WK	Cl	WebDataSource	im	BOOL
pageTitle	WK	Cl	WebDataSource	im	NSString *
unreachableURL	WK	Cl	WebDataSource	im	NSURL *
webArchive	WK	Cl	WebDataSource	im	WebArchive *
mainResource	WK	Cl	WebDataSource	im	WebResource *
subresources	WK	Cl	WebDataSource	im	NSArray *
subresourceForURL:	WK	Cl	WebDataSource	im	WebResource *	NSURL *
addSubresource:	WK	Cl	WebDataSource	im	void	WebResource *
setDataSource:	WK	Pr	WebDocumentView;WebDocument	im	void	WebDataSource *
dataSourceUpdated:	WK	Pr	WebDocumentView;WebDocument	im	void	WebDataSource *
setNeedsLayout:	WK	Pr	WebDocumentView;WebDocument	im	void	BOOL
layout	WK	Pr	WebDocumentView;WebDocument	im	void
viewWillMoveToHostWindow:	WK	Pr	WebDocumentView;WebDocument	im	void	NSWindow *
viewDidMoveToHostWindow	WK	Pr	WebDocumentView;WebDocument	im	void
searchFor:direction:caseSensitive:wrap:	WK	Pr	WebDocumentSearching;WebDocument	im	BOOL	NSString *	BOOL	BOOL	BOOL
supportsTextEncoding	WK	Pr	WebDocumentText;WebDocument	im	BOOL
string	WK	Pr	WebDocumentText;WebDocument	im	NSString *
attributedString	WK	Pr	WebDocumentText;WebDocument	im	NSAttributedString *
selectedString	WK	Pr	WebDocumentText;WebDocument	im	NSString *
selectedAttributedString	WK	Pr	WebDocumentText;WebDocument	im	NSAttributedString *
selectAll	WK	Pr	WebDocumentText;WebDocument	im	void
deselectAll	WK	Pr	WebDocumentText;WebDocument	im	void
setDataSource:	WK	Pr	WebDocumentRepresentation;WebDocument	im	void	WebDataSource *
receivedData:withDataSource:	WK	Pr	WebDocumentRepresentation;WebDocument	im	void	NSData *	WebDataSource *
receivedError:withDataSource:	WK	Pr	WebDocumentRepresentation;WebDocument	im	void	NSError *	WebDataSource *
finishedLoadingWithDataSource:	WK	Pr	WebDocumentRepresentation;WebDocument	im	void	WebDataSource *
canProvideDocumentSource	WK	Pr	WebDocumentRepresentation;WebDocument	im	BOOL
documentSource	WK	Pr	WebDocumentRepresentation;WebDocument	im	NSString *
title	WK	Pr	WebDocumentRepresentation;WebDocument	im	NSString *
webArchive	WK	Cl	DOMNode;WebDOMOperations	im	WebArchive *
webFrame	WK	Cl	DOMDocument;WebDOMOperations	im	WebFrame *
URLWithAttributeString:	WK	Cl	DOMDocument;WebDOMOperations	im	NSURL *	NSString *
webArchive	WK	Cl	DOMRange;WebDOMOperations	im	WebArchive *
markupString	WK	Cl	DOMRange;WebDOMOperations	im	NSString *
contentFrame	WK	Cl	DOMHTMLFrameElement;WebDOMOperations	im	WebFrame *
contentFrame	WK	Cl	DOMHTMLIFrameElement;WebDOMOperations	im	WebFrame *
contentFrame	WK	Cl	DOMHTMLObjectElement;WebDOMOperations	im	WebFrame *
downloadWindowForAuthenticationSheet:	WK	Cl	NSObject;WebDownload	dm	NSWindow *	WebDownload *
webView:shouldBeginEditingInDOMRange:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMRange *
webView:shouldEndEditingInDOMRange:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMRange *
webView:shouldInsertNode:replacingDOMRange:givenAction:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMNode *	DOMRange *	WebViewInsertAction
webView:shouldInsertText:replacingDOMRange:givenAction:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	NSString *	DOMRange *	WebViewInsertAction
webView:shouldDeleteDOMRange:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMRange *
webView:shouldChangeSelectedDOMRange:toDOMRange:affinity:stillSelecting:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMRange *	DOMRange *	NSSelectionAffinity	BOOL
webView:shouldApplyStyle:toElementsInDOMRange:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMCSSStyleDeclaration *	DOMRange *
webView:shouldChangeTypingStyle:toStyle:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	DOMCSSStyleDeclaration *	DOMCSSStyleDeclaration *
webView:doCommandBySelector:	WK	Cl	NSObject;WebEditingDelegate	dm	BOOL	WebView *	SEL
webViewDidBeginEditing:	WK	Cl	NSObject;WebEditingDelegate	dm	void	NSNotification *
webViewDidChange:	WK	Cl	NSObject;WebEditingDelegate	dm	void	NSNotification *
webViewDidEndEditing:	WK	Cl	NSObject;WebEditingDelegate	dm	void	NSNotification *
webViewDidChangeTypingStyle:	WK	Cl	NSObject;WebEditingDelegate	dm	void	NSNotification *
webViewDidChangeSelection:	WK	Cl	NSObject;WebEditingDelegate	dm	void	NSNotification *
undoManagerForWebView:	WK	Cl	NSObject;WebEditingDelegate	dm	NSUndoManager *	WebView *
initWithName:webFrameView:webView:	WK	Cl	WebFrame	im	id	NSString *	WebFrameView *	WebView *
name	WK	Cl	WebFrame	im	NSString *
webView	WK	Cl	WebFrame	im	WebView *
frameView	WK	Cl	WebFrame	im	WebFrameView *
DOMDocument	WK	Cl	WebFrame	im	DOMDocument *
frameElement	WK	Cl	WebFrame	im	DOMHTMLElement *
loadRequest:	WK	Cl	WebFrame	im	void	NSURLRequest *
loadData:MIMEType:textEncodingName:baseURL:	WK	Cl	WebFrame	im	void	NSData *	NSString *	NSString *	NSURL *
loadHTMLString:baseURL:	WK	Cl	WebFrame	im	void	NSString *	NSURL *
loadAlternateHTMLString:baseURL:forUnreachableURL:	WK	Cl	WebFrame	im	void	NSString *	NSURL *	NSURL *
loadArchive:	WK	Cl	WebFrame	im	void	WebArchive *
dataSource	WK	Cl	WebFrame	im	WebDataSource *
provisionalDataSource	WK	Cl	WebFrame	im	WebDataSource *
stopLoading	WK	Cl	WebFrame	im	void
reload	WK	Cl	WebFrame	im	void
findFrameNamed:	WK	Cl	WebFrame	im	WebFrame *	NSString *
parentFrame	WK	Cl	WebFrame	im	WebFrame *
childFrames	WK	Cl	WebFrame	im	NSArray *
webView:didStartProvisionalLoadForFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:didReceiveServerRedirectForProvisionalLoadForFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:didFailProvisionalLoadWithError:forFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	NSError *	WebFrame *
webView:didCommitLoadForFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:didReceiveTitle:forFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	NSString *	WebFrame *
webView:didReceiveIcon:forFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	NSImage *	WebFrame *
webView:didFinishLoadForFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:didFailLoadWithError:forFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	NSError *	WebFrame *
webView:didChangeLocationWithinPageForFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:willPerformClientRedirectToURL:delay:fireDate:forFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	NSURL *	NSTimeInterval	NSDate *	WebFrame *
webView:didCancelClientRedirectForFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:willCloseFrame:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebFrame *
webView:windowScriptObjectAvailable:	WK	Cl	NSObject;WebFrameLoadDelegate	dm	void	WebView *	WebScriptObject *
webFrame	WK	Cl	WebFrameView	im	WebFrame *
documentView	WK	Cl	WebFrameView	im	NSView <WebDocumentView> *
setAllowsScrolling:	WK	Cl	WebFrameView	im	void	BOOL
allowsScrolling	WK	Cl	WebFrameView	im	BOOL
optionalSharedHistory	WK	Cl	WebHistory	cm	WebHistory *
setOptionalSharedHistory:	WK	Cl	WebHistory	cm	void	WebHistory *
loadFromURL:error:	WK	Cl	WebHistory	im	BOOL	NSURL *	NSError **
saveToURL:error:	WK	Cl	WebHistory	im	BOOL	NSURL *	NSError **
addItems:	WK	Cl	WebHistory	im	void	NSArray *
removeItems:	WK	Cl	WebHistory	im	void	NSArray *
removeAllItems	WK	Cl	WebHistory	im	void
orderedLastVisitedDays	WK	Cl	WebHistory	im	NSArray *
orderedItemsLastVisitedOnDay:	WK	Cl	WebHistory	im	NSArray *	NSCalendarDate *
itemForURL:	WK	Cl	WebHistory	im	WebHistoryItem *	NSURL *
setHistoryItemLimit:	WK	Cl	WebHistory	im	void	int
historyItemLimit	WK	Cl	WebHistory	im	int
setHistoryAgeInDaysLimit:	WK	Cl	WebHistory	im	void	int
historyAgeInDaysLimit	WK	Cl	WebHistory	im	int
initWithURLString:title:lastVisitedTimeInterval:	WK	Cl	WebHistoryItem	im	id	NSString *	NSString *	NSTimeInterval
originalURLString	WK	Cl	WebHistoryItem	im	NSString *
URLString	WK	Cl	WebHistoryItem	im	NSString *
title	WK	Cl	WebHistoryItem	im	NSString *
lastVisitedTimeInterval	WK	Cl	WebHistoryItem	im	NSTimeInterval
setAlternateTitle:	WK	Cl	WebHistoryItem	im	void	NSString *
alternateTitle	WK	Cl	WebHistoryItem	im	NSString *
icon	WK	Cl	WebHistoryItem	im	NSImage *
webPlugInGetApplet	WK	Cl	NSObject;WebJavaPlugIn	im	jobject
webPlugInCallJava:isStatic:returnType:method:arguments:callingURL:exceptionDescription:	WK	Cl	NSObject;WebJavaPlugIn	im	jvalue	jobject	BOOL	WebJNIReturnType	jmethodID	jvalue *	NSURL *	NSString **
webPlugInInitialize	WK	Cl	NSObject;WebPlugin	im	void
webPlugInStart	WK	Cl	NSObject;WebPlugin	im	void
webPlugInStop	WK	Cl	NSObject;WebPlugin	im	void
webPlugInDestroy	WK	Cl	NSObject;WebPlugin	im	void
webPlugInSetIsSelected:	WK	Cl	NSObject;WebPlugin	im	void	BOOL
objectForWebScript	WK	Cl	NSObject;WebPlugin	im	id
webPlugInContainerLoadRequest:inFrame:	WK	Cl	NSObject;WebPluginContainer	im	void	NSURLRequest *	NSString *
webPlugInContainerShowStatus:	WK	Cl	NSObject;WebPluginContainer	im	void	NSString *
webPlugInContainerSelectionColor	WK	Cl	NSObject;WebPluginContainer	im	NSColor *
webFrame	WK	Cl	NSObject;WebPluginContainer	im	WebFrame *
plugInViewWithArguments:	WK	Pr	WebPlugInViewFactory;WebPluginViewFactory	cm	NSView *	NSDictionary *
use	WK	Pr	WebPolicyDecisionListener;WebPolicyDelegate	im	void
download	WK	Pr	WebPolicyDecisionListener;WebPolicyDelegate	im	void
ignore	WK	Pr	WebPolicyDecisionListener;WebPolicyDelegate	im	void
webView:decidePolicyForNavigationAction:request:frame:decisionListener:	WK	Cl	NSObject;WebPolicyDelegate	dm	void	WebView *	NSDictionary *	NSURLRequest *	WebFrame *	id<WebPolicyDecisionListener>
webView:decidePolicyForNewWindowAction:request:newFrameName:decisionListener:	WK	Cl	NSObject;WebPolicyDelegate	dm	void	WebView *	NSDictionary *	NSURLRequest *	NSString *	id<WebPolicyDecisionListener>
webView:decidePolicyForMIMEType:request:frame:decisionListener:	WK	Cl	NSObject;WebPolicyDelegate	dm	void	WebView *	NSString *	NSURLRequest *	WebFrame *	id<WebPolicyDecisionListener>
webView:unableToImplementPolicyWithError:frame:	WK	Cl	NSObject;WebPolicyDelegate	dm	void	WebView *	NSError *	WebFrame *
standardPreferences	WK	Cl	WebPreferences	cm	WebPreferences *
initWithIdentifier:	WK	Cl	WebPreferences	im	id	NSString *
identifier	WK	Cl	WebPreferences	im	NSString *
standardFontFamily	WK	Cl	WebPreferences	im	NSString *
setStandardFontFamily:	WK	Cl	WebPreferences	im	void	NSString *
fixedFontFamily	WK	Cl	WebPreferences	im	NSString *
setFixedFontFamily:	WK	Cl	WebPreferences	im	void	NSString *
serifFontFamily	WK	Cl	WebPreferences	im	NSString *
setSerifFontFamily:	WK	Cl	WebPreferences	im	void	NSString *
sansSerifFontFamily	WK	Cl	WebPreferences	im	NSString *
setSansSerifFontFamily:	WK	Cl	WebPreferences	im	void	NSString *
cursiveFontFamily	WK	Cl	WebPreferences	im	NSString *
setCursiveFontFamily:	WK	Cl	WebPreferences	im	void	NSString *
fantasyFontFamily	WK	Cl	WebPreferences	im	NSString *
setFantasyFontFamily:	WK	Cl	WebPreferences	im	void	NSString *
defaultFontSize	WK	Cl	WebPreferences	im	int
setDefaultFontSize:	WK	Cl	WebPreferences	im	void	int
defaultFixedFontSize	WK	Cl	WebPreferences	im	int
setDefaultFixedFontSize:	WK	Cl	WebPreferences	im	void	int
minimumFontSize	WK	Cl	WebPreferences	im	int
setMinimumFontSize:	WK	Cl	WebPreferences	im	void	int
minimumLogicalFontSize	WK	Cl	WebPreferences	im	int
setMinimumLogicalFontSize:	WK	Cl	WebPreferences	im	void	int
defaultTextEncodingName	WK	Cl	WebPreferences	im	NSString *
setDefaultTextEncodingName:	WK	Cl	WebPreferences	im	void	NSString *
userStyleSheetEnabled	WK	Cl	WebPreferences	im	BOOL
setUserStyleSheetEnabled:	WK	Cl	WebPreferences	im	void	BOOL
userStyleSheetLocation	WK	Cl	WebPreferences	im	NSURL *
setUserStyleSheetLocation:	WK	Cl	WebPreferences	im	void	NSURL *
isJavaEnabled	WK	Cl	WebPreferences	im	BOOL
setJavaEnabled:	WK	Cl	WebPreferences	im	void	BOOL
isJavaScriptEnabled	WK	Cl	WebPreferences	im	BOOL
setJavaScriptEnabled:	WK	Cl	WebPreferences	im	void	BOOL
javaScriptCanOpenWindowsAutomatically	WK	Cl	WebPreferences	im	BOOL
setJavaScriptCanOpenWindowsAutomatically:	WK	Cl	WebPreferences	im	void	BOOL
arePlugInsEnabled	WK	Cl	WebPreferences	im	BOOL
setPlugInsEnabled:	WK	Cl	WebPreferences	im	void	BOOL
allowsAnimatedImages	WK	Cl	WebPreferences	im	BOOL
setAllowsAnimatedImages:	WK	Cl	WebPreferences	im	void	BOOL
allowsAnimatedImageLooping	WK	Cl	WebPreferences	im	BOOL
setAllowsAnimatedImageLooping:	WK	Cl	WebPreferences	im	void	BOOL
setLoadsImagesAutomatically:	WK	Cl	WebPreferences	im	void	BOOL
loadsImagesAutomatically	WK	Cl	WebPreferences	im	BOOL
setAutosaves:	WK	Cl	WebPreferences	im	void	BOOL
autosaves	WK	Cl	WebPreferences	im	BOOL
setShouldPrintBackgrounds:	WK	Cl	WebPreferences	im	void	BOOL
shouldPrintBackgrounds	WK	Cl	WebPreferences	im	BOOL
setPrivateBrowsingEnabled:	WK	Cl	WebPreferences	im	void	BOOL
privateBrowsingEnabled	WK	Cl	WebPreferences	im	BOOL
setTabsToLinks:	WK	Cl	WebPreferences	im	void	BOOL
tabsToLinks	WK	Cl	WebPreferences	im	BOOL
initWithData:URL:MIMEType:textEncodingName:frameName:	WK	Cl	WebResource	im	id	NSData *	NSURL *	NSString *	NSString *	NSString *
data	WK	Cl	WebResource	im	NSData *
URL	WK	Cl	WebResource	im	NSURL *
MIMEType	WK	Cl	WebResource	im	NSString *
textEncodingName	WK	Cl	WebResource	im	NSString *
frameName	WK	Cl	WebResource	im	NSString *
webView:identifierForInitialRequest:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	id	WebView *	NSURLRequest *	WebDataSource *
webView:resource:willSendRequest:redirectResponse:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	NSURLRequest *	WebView *	id	NSURLRequest *	NSURLResponse *	WebDataSource *
webView:resource:didReceiveAuthenticationChallenge:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	id	NSURLAuthenticationChallenge *	WebDataSource *
webView:resource:didCancelAuthenticationChallenge:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	id	NSURLAuthenticationChallenge *	WebDataSource *
webView:resource:didReceiveResponse:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	id	NSURLResponse *	WebDataSource *
webView:resource:didReceiveContentLength:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	id	unsigned	WebDataSource *
webView:resource:didFinishLoadingFromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	id	WebDataSource *
webView:resource:didFailLoadingWithError:fromDataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	id	NSError *	WebDataSource *
webView:plugInFailedWithError:dataSource:	WK	Cl	NSObject;WebResourceLoadDelegate	dm	void	WebView *	NSError *	WebDataSource *
webScriptNameForSelector:	WK	Cl	NSObject;WebScriptObject	cm	NSString *	SEL
isSelectorExcludedFromWebScript:	WK	Cl	NSObject;WebScriptObject	cm	BOOL	SEL
webScriptNameForKey:	WK	Cl	NSObject;WebScriptObject	cm	NSString *	const char *
isKeyExcludedFromWebScript:	WK	Cl	NSObject;WebScriptObject	cm	BOOL	const char *
invokeUndefinedMethodFromWebScript:withArguments:	WK	Cl	NSObject;WebScriptObject	im	id	NSString *	NSArray *
invokeDefaultMethodWithArguments:	WK	Cl	NSObject;WebScriptObject	im	id	NSArray *
finalizeForWebScript	WK	Cl	NSObject;WebScriptObject	im	void
throwException:	WK	Cl	WebScriptObject	cm	BOOL	NSString *
callWebScriptMethod:withArguments:	WK	Cl	WebScriptObject	im	id	NSString *	NSArray *
evaluateWebScript:	WK	Cl	WebScriptObject	im	id	NSString *
removeWebScriptKey:	WK	Cl	WebScriptObject	im	void	NSString *
stringRepresentation	WK	Cl	WebScriptObject	im	NSString *
webScriptValueAtIndex:	WK	Cl	WebScriptObject	im	id	unsigned int
setWebScriptValueAtIndex:value:	WK	Cl	WebScriptObject	im	void	unsigned int	id
setException:	WK	Cl	WebScriptObject	im	void	NSString *
undefined	WK	Cl	WebUndefined;WebScriptObject	cm	WebUndefined *
chooseFilename:	WK	Pr	WebOpenPanelResultListener;WebUIDelegate	im	void	NSString *
cancel	WK	Pr	WebOpenPanelResultListener;WebUIDelegate	im	void
webView:createWebViewWithRequest:	WK	Cl	NSObject;WebUIDelegate	dm	WebView *	WebView *	NSURLRequest *
webViewShow:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *
webViewClose:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *
webViewFocus:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *
webViewUnfocus:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *
webViewFirstResponder:	WK	Cl	NSObject;WebUIDelegate	dm	NSResponder *	WebView *
webView:makeFirstResponder:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	NSResponder *
webView:setStatusText:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	NSString *
webViewStatusText:	WK	Cl	NSObject;WebUIDelegate	dm	NSString *	WebView *
webViewAreToolbarsVisible:	WK	Cl	NSObject;WebUIDelegate	dm	BOOL	WebView *
webView:setToolbarsVisible:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	BOOL
webViewIsStatusBarVisible:	WK	Cl	NSObject;WebUIDelegate	dm	BOOL	WebView *
webView:setStatusBarVisible:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	BOOL
webViewIsResizable:	WK	Cl	NSObject;WebUIDelegate	dm	BOOL	WebView *
webView:setResizable:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	BOOL
webView:setFrame:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	NSRect
webViewFrame:	WK	Cl	NSObject;WebUIDelegate	dm	NSRect	WebView *
webView:setContentRect:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	NSRect
webViewContentRect:	WK	Cl	NSObject;WebUIDelegate	dm	NSRect	WebView *
webView:runJavaScriptAlertPanelWithMessage:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	NSString *
webView:runJavaScriptConfirmPanelWithMessage:	WK	Cl	NSObject;WebUIDelegate	dm	BOOL	WebView *	NSString *
webView:runJavaScriptTextInputPanelWithPrompt:defaultText:	WK	Cl	NSObject;WebUIDelegate	dm	NSString *	WebView *	NSString *	NSString *
webView:runOpenPanelForFileButtonWithResultListener:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	id<WebOpenPanelResultListener>
webView:mouseDidMoveOverElement:modifierFlags:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	NSDictionary *	unsigned int
webView:contextMenuItemsForElement:defaultMenuItems:	WK	Cl	NSObject;WebUIDelegate	dm	NSArray *	WebView *	NSDictionary *	NSArray *
webView:validateUserInterfaceItem:defaultValidation:	WK	Cl	NSObject;WebUIDelegate	dm	BOOL	WebView *	id <NSValidatedUserInterfaceItem>	BOOL
webView:shouldPerformAction:fromSender:	WK	Cl	NSObject;WebUIDelegate	dm	BOOL	WebView *	SEL	id
webView:dragDestinationActionMaskForDraggingInfo:	WK	Cl	NSObject;WebUIDelegate	dm	unsigned	WebView *	id <NSDraggingInfo>
webView:willPerformDragDestinationAction:forDraggingInfo:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	WebDragDestinationAction	id <NSDraggingInfo>
webView:dragSourceActionMaskForPoint:	WK	Cl	NSObject;WebUIDelegate	dm	unsigned	WebView *	NSPoint
webView:willPerformDragSourceAction:fromPoint:withPasteboard:	WK	Cl	NSObject;WebUIDelegate	dm	void	WebView *	WebDragSourceAction	NSPoint	NSPasteboard *
canShowMIMEType:	WK	Cl	WebView	cm	BOOL	NSString *
canShowMIMETypeAsHTML:	WK	Cl	WebView	cm	BOOL	NSString *
MIMETypesShownAsHTML	WK	Cl	WebView	cm	NSArray *
setMIMETypesShownAsHTML:	WK	Cl	WebView	cm	void	NSArray *
URLFromPasteboard:	WK	Cl	WebView	cm	NSURL *	NSPasteboard *
URLTitleFromPasteboard:	WK	Cl	WebView	cm	NSString *	NSPasteboard *
initWithFrame:frameName:groupName:	WK	Cl	WebView	im	id	NSRect	NSString *	NSString *
setUIDelegate:	WK	Cl	WebView	im	void	id
UIDelegate	WK	Cl	WebView	im	id
setResourceLoadDelegate:	WK	Cl	WebView	im	void	id
resourceLoadDelegate	WK	Cl	WebView	im	id
setDownloadDelegate:	WK	Cl	WebView	im	void	id
downloadDelegate	WK	Cl	WebView	im	id
setFrameLoadDelegate:	WK	Cl	WebView	im	void	id
frameLoadDelegate	WK	Cl	WebView	im	id
setPolicyDelegate:	WK	Cl	WebView	im	void	id
policyDelegate	WK	Cl	WebView	im	id
mainFrame	WK	Cl	WebView	im	WebFrame *
backForwardList	WK	Cl	WebView	im	WebBackForwardList *
setMaintainsBackForwardList:	WK	Cl	WebView	im	void	BOOL
goBack	WK	Cl	WebView	im	BOOL
goForward	WK	Cl	WebView	im	BOOL
goToBackForwardItem:	WK	Cl	WebView	im	BOOL	WebHistoryItem *
setTextSizeMultiplier:	WK	Cl	WebView	im	void	float
textSizeMultiplier	WK	Cl	WebView	im	float
setApplicationNameForUserAgent:	WK	Cl	WebView	im	void	NSString *
applicationNameForUserAgent	WK	Cl	WebView	im	NSString *
setCustomUserAgent:	WK	Cl	WebView	im	void	NSString *
customUserAgent	WK	Cl	WebView	im	NSString *
userAgentForURL:	WK	Cl	WebView	im	NSString *	NSURL *
supportsTextEncoding	WK	Cl	WebView	im	BOOL
setCustomTextEncodingName:	WK	Cl	WebView	im	void	NSString *
customTextEncodingName	WK	Cl	WebView	im	NSString *
setMediaStyle:	WK	Cl	WebView	im	void	NSString *
mediaStyle	WK	Cl	WebView	im	NSString *
stringByEvaluatingJavaScriptFromString:	WK	Cl	WebView	im	NSString *	NSString *
windowScriptObject	WK	Cl	WebView	im	WebScriptObject *
setPreferences:	WK	Cl	WebView	im	void	WebPreferences *
preferences	WK	Cl	WebView	im	WebPreferences *
setPreferencesIdentifier:	WK	Cl	WebView	im	void	NSString *
preferencesIdentifier	WK	Cl	WebView	im	NSString *
setHostWindow:	WK	Cl	WebView	im	void	NSWindow *
hostWindow	WK	Cl	WebView	im	NSWindow *
searchFor:direction:caseSensitive:wrap:	WK	Cl	WebView	im	BOOL	NSString *	BOOL	BOOL	BOOL
registerViewClass:representationClass:forMIMEType:	WK	Cl	WebView	cm	void	Class	Class	NSString *
setGroupName:	WK	Cl	WebView	im	void	NSString *
groupName	WK	Cl	WebView	im	NSString *
estimatedProgress	WK	Cl	WebView	im	double
elementAtPoint:	WK	Cl	WebView	im	NSDictionary *	NSPoint
pasteboardTypesForSelection	WK	Cl	WebView	im	NSArray *
writeSelectionWithPasteboardTypes:toPasteboard:	WK	Cl	WebView	im	void	NSArray *	NSPasteboard *
pasteboardTypesForElement:	WK	Cl	WebView	im	NSArray *	NSDictionary *
writeElement:withPasteboardTypes:toPasteboard:	WK	Cl	WebView	im	void	NSDictionary *	NSArray *	NSPasteboard *
moveDragCaretToPoint:	WK	Cl	WebView	im	void	NSPoint
removeDragCaret	WK	Cl	WebView	im	void
takeStringURLFrom:	WK	Cl	WebView	im	IBAction	id
stopLoading:	WK	Cl	WebView	im	IBAction	id
reload:	WK	Cl	WebView	im	IBAction	id
canGoBack	WK	Cl	WebView	im	BOOL
goBack:	WK	Cl	WebView	im	IBAction	id
canGoForward	WK	Cl	WebView	im	BOOL
goForward:	WK	Cl	WebView	im	IBAction	id
canMakeTextLarger	WK	Cl	WebView	im	BOOL
makeTextLarger:	WK	Cl	WebView	im	IBAction	id
canMakeTextSmaller	WK	Cl	WebView	im	BOOL
makeTextSmaller:	WK	Cl	WebView	im	IBAction	id
computedStyleForElement:pseudoElement:	WK	Cl	WebView	im	DOMCSSStyleDeclaration *	DOMElement *	NSString *
editableDOMRangeForPoint:	WK	Cl	WebView	im	DOMRange *	NSPoint
setSelectedDOMRange:affinity:	WK	Cl	WebView	im	void	DOMRange *	NSSelectionAffinity
selectedDOMRange	WK	Cl	WebView	im	DOMRange *
selectionAffinity	WK	Cl	WebView	im	NSSelectionAffinity
setEditable:	WK	Cl	WebView	im	void	BOOL
isEditable	WK	Cl	WebView	im	BOOL
setTypingStyle:	WK	Cl	WebView	im	void	DOMCSSStyleDeclaration *
typingStyle	WK	Cl	WebView	im	DOMCSSStyleDeclaration *
setSmartInsertDeleteEnabled:	WK	Cl	WebView	im	void	BOOL
smartInsertDeleteEnabled	WK	Cl	WebView	im	BOOL
setContinuousSpellCheckingEnabled:	WK	Cl	WebView	im	void	BOOL
isContinuousSpellCheckingEnabled	WK	Cl	WebView	im	BOOL
spellCheckerDocumentTag	WK	Cl	WebView	im	int
undoManager	WK	Cl	WebView	im	NSUndoManager *
setEditingDelegate:	WK	Cl	WebView	im	void	id
editingDelegate	WK	Cl	WebView	im	id
styleDeclarationWithText:	WK	Cl	WebView	im	DOMCSSStyleDeclaration *	NSString *
replaceSelectionWithNode:	WK	Cl	WebView	im	void	DOMNode *
replaceSelectionWithText:	WK	Cl	WebView	im	void	NSString *
replaceSelectionWithMarkupString:	WK	Cl	WebView	im	void	NSString *
replaceSelectionWithArchive:	WK	Cl	WebView	im	void	WebArchive *
deleteSelection	WK	Cl	WebView	im	void
applyStyle:	WK	Cl	WebView	im	void	DOMCSSStyleDeclaration *
copy:	WK	Cl	WebView	im	void	id
cut:	WK	Cl	WebView	im	void	id
paste:	WK	Cl	WebView	im	void	id
copyFont:	WK	Cl	WebView	im	void	id
pasteFont:	WK	Cl	WebView	im	void	id
delete:	WK	Cl	WebView	im	void	id
pasteAsPlainText:	WK	Cl	WebView	im	void	id
pasteAsRichText:	WK	Cl	WebView	im	void	id
changeFont:	WK	Cl	WebView	im	void	id
changeAttributes:	WK	Cl	WebView	im	void	id
changeDocumentBackgroundColor:	WK	Cl	WebView	im	void	id
changeColor:	WK	Cl	WebView	im	void	id
alignCenter:	WK	Cl	WebView	im	void	id
alignJustified:	WK	Cl	WebView	im	void	id
alignLeft:	WK	Cl	WebView	im	void	id
alignRight:	WK	Cl	WebView	im	void	id
checkSpelling:	WK	Cl	WebView	im	void	id
showGuessPanel:	WK	Cl	WebView	im	void	id
performFindPanelAction:	WK	Cl	WebView	im	void	id
startSpeaking:	WK	Cl	WebView	im	void	id
stopSpeaking:	WK	Cl	WebView	im	void	id
capitalizeWord:	WK	Cl	WebView	im	void	id
centerSelectionInVisibleArea:	WK	Cl	WebView	im	void	id
changeCaseOfLetter:	WK	Cl	WebView	im	void	id
complete:	WK	Cl	WebView	im	void	id
deleteBackward:	WK	Cl	WebView	im	void	id
deleteBackwardByDecomposingPreviousCharacter:	WK	Cl	WebView	im	void	id
deleteForward:	WK	Cl	WebView	im	void	id
deleteToBeginningOfLine:	WK	Cl	WebView	im	void	id
deleteToBeginningOfParagraph:	WK	Cl	WebView	im	void	id
deleteToEndOfLine:	WK	Cl	WebView	im	void	id
deleteToEndOfParagraph:	WK	Cl	WebView	im	void	id
deleteWordBackward:	WK	Cl	WebView	im	void	id
deleteWordForward:	WK	Cl	WebView	im	void	id
indent:	WK	Cl	WebView	im	void	id
insertBacktab:	WK	Cl	WebView	im	void	id
insertNewline:	WK	Cl	WebView	im	void	id
insertParagraphSeparator:	WK	Cl	WebView	im	void	id
insertTab:	WK	Cl	WebView	im	void	id
lowercaseWord:	WK	Cl	WebView	im	void	id
moveBackward:	WK	Cl	WebView	im	void	id
moveBackwardAndModifySelection:	WK	Cl	WebView	im	void	id
moveDown:	WK	Cl	WebView	im	void	id
moveDownAndModifySelection:	WK	Cl	WebView	im	void	id
moveForward:	WK	Cl	WebView	im	void	id
moveForwardAndModifySelection:	WK	Cl	WebView	im	void	id
moveLeft:	WK	Cl	WebView	im	void	id
moveLeftAndModifySelection:	WK	Cl	WebView	im	void	id
moveRight:	WK	Cl	WebView	im	void	id
moveRightAndModifySelection:	WK	Cl	WebView	im	void	id
moveToBeginningOfDocument:	WK	Cl	WebView	im	void	id
moveToBeginningOfDocumentAndModifySelection:	WK	Cl	WebView	im	void	id
moveToBeginningOfLine:	WK	Cl	WebView	im	void	id
moveToBeginningOfLineAndModifySelection:	WK	Cl	WebView	im	void	id
moveToBeginningOfParagraph:	WK	Cl	WebView	im	void	id
moveToBeginningOfParagraphAndModifySelection:	WK	Cl	WebView	im	void	id
moveToEndOfDocument:	WK	Cl	WebView	im	void	id
moveToEndOfDocumentAndModifySelection:	WK	Cl	WebView	im	void	id
moveToEndOfLine:	WK	Cl	WebView	im	void	id
moveToEndOfLineAndModifySelection:	WK	Cl	WebView	im	void	id
moveToEndOfParagraph:	WK	Cl	WebView	im	void	id
moveToEndOfParagraphAndModifySelection:	WK	Cl	WebView	im	void	id
moveUp:	WK	Cl	WebView	im	void	id
moveUpAndModifySelection:	WK	Cl	WebView	im	void	id
moveWordBackward:	WK	Cl	WebView	im	void	id
moveWordBackwardAndModifySelection:	WK	Cl	WebView	im	void	id
moveWordForward:	WK	Cl	WebView	im	void	id
moveWordForwardAndModifySelection:	WK	Cl	WebView	im	void	id
moveWordLeft:	WK	Cl	WebView	im	void	id
moveWordLeftAndModifySelection:	WK	Cl	WebView	im	void	id
moveWordRight:	WK	Cl	WebView	im	void	id
moveWordRightAndModifySelection:	WK	Cl	WebView	im	void	id
pageDown:	WK	Cl	WebView	im	void	id
pageUp:	WK	Cl	WebView	im	void	id
scrollLineDown:	WK	Cl	WebView	im	void	id
scrollLineUp:	WK	Cl	WebView	im	void	id
scrollPageDown:	WK	Cl	WebView	im	void	id
scrollPageUp:	WK	Cl	WebView	im	void	id
selectAll:	WK	Cl	WebView	im	void	id
selectLine:	WK	Cl	WebView	im	void	id
selectParagraph:	WK	Cl	WebView	im	void	id
selectWord:	WK	Cl	WebView	im	void	id
uppercaseWord:	WK	Cl	WebView	im	void	id
actionMonitorWithResource:action:	Grid	Cl	XGActionMonitor	cm	id	XGResource *	XGResourceAction
actionMonitorWithResource:action:parameters:	Grid	Cl	XGActionMonitor	cm	id	XGResource *	XGResourceAction	NSDictionary *
initWithResource:action:parameters:	Grid	Cl	XGActionMonitor	im	id	id	XGResourceAction	NSDictionary *
resource	Grid	Cl	XGActionMonitor	im	XGResource *
action	Grid	Cl	XGActionMonitor	im	XGResourceAction
parameters	Grid	Cl	XGActionMonitor	im	NSDictionary *
performAction	Grid	Cl	XGActionMonitor	im	void
outcome	Grid	Cl	XGActionMonitor	im	XGActionMonitorOutcome
results	Grid	Cl	XGActionMonitor	im	NSDictionary *
error	Grid	Cl	XGActionMonitor	im	NSError *
actionDidSucceed	Grid	Cl	XGActionMonitor	im	BOOL
actionDidFail	Grid	Cl	XGActionMonitor	im	BOOL
profileURI	Grid	Cl	XGAuthenticator	cm	NSString *
setDelegate:	Grid	Cl	XGAuthenticator	im	void	id
delegate	Grid	Cl	XGAuthenticator	im	id
error	Grid	Cl	XGAuthenticator	im	NSError *
state	Grid	Cl	XGAuthenticator	im	XGAuthenticatorState
piggyback	Grid	Cl	XGAuthenticator	im	NSString *
beginAuthentication:	Grid	Cl	XGAuthenticator	im	void	NSString *
receiveData:	Grid	Cl	XGAuthenticator	im	void	NSData *
finishAuthentication	Grid	Cl	XGAuthenticator	im	void
sendData:	Grid	Cl	XGAuthenticator	im	void	NSData *
failWithError:	Grid	Cl	XGAuthenticator	im	void	NSError *
authenticatorDidAuthenticate:	Grid	Cl	NSObject;XGAuthenticator	dm	void	XGAuthenticator *
authenticatorDidNotAuthenticate:	Grid	Cl	NSObject;XGAuthenticator	dm	void	XGAuthenticator *
initWithNetService:	Grid	Cl	XGConnection	im	id	NSNetService *
initWithHostname:portnumber:	Grid	Cl	XGConnection	im	id	NSString *	UInt32
netService	Grid	Cl	XGConnection	im	NSNetService *
hostname	Grid	Cl	XGConnection	im	NSString *
portnumber	Grid	Cl	XGConnection	im	UInt32
name	Grid	Cl	XGConnection	im	NSString *
setDelegate:	Grid	Cl	XGConnection	im	void	id
delegate	Grid	Cl	XGConnection	im	id
setAuthenticator:	Grid	Cl	XGConnection	im	void	XGAuthenticator *
authenticator	Grid	Cl	XGConnection	im	XGAuthenticator *
error	Grid	Cl	XGConnection	im	NSError *
state	Grid	Cl	XGConnection	im	XGConnectionState
isOpened	Grid	Cl	XGConnection	im	BOOL
isClosed	Grid	Cl	XGConnection	im	BOOL
open	Grid	Cl	XGConnection	im	void
close	Grid	Cl	XGConnection	im	void
servicePrincipal	Grid	Cl	XGConnection	im	NSString *
connectionDidOpen:	Grid	Cl	NSObject;XGConnection	dm	void	XGConnection *
connectionDidNotOpen:withError:	Grid	Cl	NSObject;XGConnection	dm	void	XGConnection *	NSError *
connectionDidClose:	Grid	Cl	NSObject;XGConnection	dm	void	XGConnection *
initWithConnection:	Grid	Cl	XGController	im	id	XGConnection *
setJobsPredicateString:	Grid	Cl	XGController	im	void	NSString *
jobsPredicateString	Grid	Cl	XGController	im	NSString *
grids	Grid	Cl	XGController	im	NSArray *
gridForIdentifier:	Grid	Cl	XGController	im	XGGrid *	NSString *
defaultGrid	Grid	Cl	XGController	im	XGGrid *
performSubmitJobActionWithJobSpecification:gridIdentifier:	Grid	Cl	XGController	im	id	NSDictionary *	NSString *
controllerWithNetService:	Grid	Cl	XGController	cm	id	NSNetService *
controllerWithHostname:portnumber:	Grid	Cl	XGController	cm	id	NSString *	UInt32
job	Grid	Cl	XGFile	im	XGJob *
taskIdentifier	Grid	Cl	XGFile	im	NSString *
type	Grid	Cl	XGFile	im	XGFileType
path	Grid	Cl	XGFile	im	NSString *
initWithFile:delegate:	Grid	Cl	XGFileDownload	im	id	XGFile *	id
cancel	Grid	Cl	XGFileDownload	im	void
setDestination:allowOverwrite:	Grid	Cl	XGFileDownload	im	void	NSString *	BOOL
file	Grid	Cl	XGFileDownload	im	XGFile *
delegate	Grid	Cl	XGFileDownload	im	id
destination	Grid	Cl	XGFileDownload	im	NSString *
fileDownloadDidBegin:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *
fileDownload:didReceiveAttributes:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *	NSDictionary *
fileDownload:decideDestinationWithSuggestedPath:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *	NSString *
fileDownload:didCreateDestination:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *	NSString *
fileDownload:didReceiveData:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *	NSData *
fileDownload:didFailWithError:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *	NSError *
fileDownloadDidFinish:	Grid	Cl	NSObject;XGFileDownload	dm	void	XGFileDownload *
isDefault	Grid	Cl	XGGrid	im	BOOL
jobs	Grid	Cl	XGGrid	im	NSArray *
jobForIdentifier:	Grid	Cl	XGGrid	im	XGJob *	NSString *
setServicePrincipal:	Grid	Cl	XGGSSAuthenticator	im	void	NSString *
servicePrincipal	Grid	Cl	XGGSSAuthenticator	im	NSString *
applicationIdentifier	Grid	Cl	XGJob	im	NSString *
applicationInfo	Grid	Cl	XGJob	im	NSDictionary *
activeCPUPower	Grid	Cl	XGJob	im	float
percentDone	Grid	Cl	XGJob	im	float
taskCount	Grid	Cl	XGJob	im	int
completedTaskCount	Grid	Cl	XGJob	im	int
dateSubmitted	Grid	Cl	XGJob	im	NSDate *
dateStarted	Grid	Cl	XGJob	im	NSDate *
dateStopped	Grid	Cl	XGJob	im	NSDate *
performStopAction	Grid	Cl	XGJob	im	XGActionMonitor *
performRestartAction	Grid	Cl	XGJob	im	XGActionMonitor *
performSuspendAction	Grid	Cl	XGJob	im	XGActionMonitor *
performResumeAction	Grid	Cl	XGJob	im	XGActionMonitor *
performGetOutputStreamsAction	Grid	Cl	XGJob	im	XGActionMonitor *
performGetOutputFilesAction	Grid	Cl	XGJob	im	XGActionMonitor *
performGetSpecificationAction	Grid	Cl	XGJob	im	XGActionMonitor *
performDeleteAction	Grid	Cl	XGJob	im	XGActionMonitor *
controller	Grid	Cl	XGResource	im	XGController *
connection	Grid	Cl	XGResource	im	XGConnection *
isUpdating	Grid	Cl	XGResource	im	BOOL
isUpdated	Grid	Cl	XGResource	im	BOOL
state	Grid	Cl	XGResource	im	XGResourceState
identifier	Grid	Cl	XGResource	im	NSString *
performAction:withParameters:	Grid	Cl	XGResource	im	XGActionMonitor *	XGResourceAction	NSDictionary *
actionMonitors	Grid	Cl	XGResource	im	NSArray *
setUsername:	Grid	Cl	XGTwoWayRandomAuthenticator	im	void	NSString *
username	Grid	Cl	XGTwoWayRandomAuthenticator	im	NSString *
setPassword:	Grid	Cl	XGTwoWayRandomAuthenticator	im	void	NSString *